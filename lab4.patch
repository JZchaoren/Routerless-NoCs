From 73c5c36be27f1fddf7e0cbbedb58e0d54e15ec4b Mon Sep 17 00:00:00 2001
From: Your Name <you@example.com>
Date: Sun, 1 Sep 2024 18:11:22 +0800
Subject: [PATCH] Mission accomplished

---
 Experiment Data/IMR/routing_table.txt         | 1380 ++++++
 Experiment Data/IMR/test.txt                  | 3836 +++++++++++++++++
 Experiment Data/Routerless/routing_table.txt  | 1084 +++++
 Experiment Data/bestIMR.txt                   |   57 +
 configs/example/garnet_synth_traffic.py       |    6 +-
 configs/network/Network.py                    |    5 +-
 configs/topologies/ConstructIMR.py            |  618 +++
 configs/topologies/ConstructRouterless.py     |  174 +
 configs/topologies/IMR.py                     |  229 +
 configs/topologies/Mesh_XY.py                 |    1 -
 configs/topologies/Ring.py                    |  104 +
 configs/topologies/Routerless.py              |  229 +
 generate_imr.sh                               |   11 +
 network_stats.txt                             |    9 +
 .../results_IMR_algo_4_neighbor_N=4_horse.txt |   78 +
 .../results_IMR_algo_4_neighbor_N=6_dog.txt   |   64 +
 .../results_IMR_algo_4_neighbor_N=8_dog.txt   |   71 +
 .../results_IMR_algo_4_shuffle_N=4_horse.txt  |   78 +
 .../results_IMR_algo_4_shuffle_N=6_dog.txt    |   50 +
 .../results_IMR_algo_4_shuffle_N=8_dog.txt    |   71 +
 .../results_IMR_algo_4_tornado_N=4_horse.txt  |   78 +
 .../results_IMR_algo_4_tornado_N=6_dog.txt    |   57 +
 .../results_IMR_algo_4_tornado_N=8_dog.txt    |   71 +
 ...results_IMR_algo_4_transpose_N=4_horse.txt |   78 +
 .../results_IMR_algo_4_transpose_N=6_dog.txt  |   50 +
 .../results_IMR_algo_4_transpose_N=8_dog.txt  |   71 +
 ...ts_IMR_algo_4_uniform_random_N=4_horse.txt |   78 +
 ...ults_IMR_algo_4_uniform_random_N=6_dog.txt |   71 +
 ...ults_IMR_algo_4_uniform_random_N=8_dog.txt |  106 +
 ...ults_Mesh_XY_algo_1_neighbor_N=4_horse.txt |   78 +
 ...esults_Mesh_XY_algo_1_neighbor_N=6_dog.txt |   71 +
 ...esults_Mesh_XY_algo_1_neighbor_N=8_dog.txt |   64 +
 ...sults_Mesh_XY_algo_1_shuffle_N=4_horse.txt |   78 +
 ...results_Mesh_XY_algo_1_shuffle_N=6_dog.txt |   71 +
 ...results_Mesh_XY_algo_1_shuffle_N=8_dog.txt |   64 +
 ...sults_Mesh_XY_algo_1_tornado_N=4_horse.txt |   78 +
 ...results_Mesh_XY_algo_1_tornado_N=6_dog.txt |   71 +
 ...results_Mesh_XY_algo_1_tornado_N=8_dog.txt |   64 +
 ...lts_Mesh_XY_algo_1_transpose_N=4_horse.txt |   78 +
 ...sults_Mesh_XY_algo_1_transpose_N=6_dog.txt |   71 +
 ...sults_Mesh_XY_algo_1_transpose_N=8_dog.txt |   64 +
 ...esh_XY_algo_1_uniform_random_N=4_horse.txt |   78 +
 ..._Mesh_XY_algo_1_uniform_random_N=6_dog.txt |   43 +
 ...esh_XY_algo_1_uniform_random_N=6_horse.txt |   71 +
 ..._Mesh_XY_algo_1_uniform_random_N=8_dog.txt |   64 +
 ...esh_XY_algo_1_uniform_random_N=8_horse.txt |  106 +
 ...results_Ring_algo_3_neighbor_N=4_horse.txt |   78 +
 ...results_Ring_algo_3_neighbor_N=6_horse.txt |   71 +
 ...results_Ring_algo_3_neighbor_N=8_horse.txt |   64 +
 .../results_Ring_algo_3_shuffle_N=4_horse.txt |  106 +
 .../results_Ring_algo_3_shuffle_N=6_horse.txt |   57 +
 .../results_Ring_algo_3_shuffle_N=8_horse.txt |   78 +
 .../results_Ring_algo_3_tornado_N=4_horse.txt |   78 +
 .../results_Ring_algo_3_tornado_N=6_horse.txt |   57 +
 .../results_Ring_algo_3_tornado_N=8_horse.txt |   64 +
 ...esults_Ring_algo_3_transpose_N=4_horse.txt |   57 +
 ...esults_Ring_algo_3_transpose_N=6_horse.txt |   57 +
 ...esults_Ring_algo_3_transpose_N=8_horse.txt |   57 +
 ...s_Ring_algo_3_uniform_random_N=4_horse.txt |   50 +
 ...s_Ring_algo_3_uniform_random_N=6_horse.txt |   36 +
 ...s_Ring_algo_3_uniform_random_N=8_horse.txt |   50 +
 ...s_Routerless_algo_5_neighbor_N=4_horse.txt |   78 +
 ...lts_Routerless_algo_5_neighbor_N=6_dog.txt |   64 +
 ...lts_Routerless_algo_5_neighbor_N=8_dog.txt |   64 +
 ...ts_Routerless_algo_5_shuffle_N=4_horse.txt |   78 +
 ...ults_Routerless_algo_5_shuffle_N=6_dog.txt |   57 +
 ...ults_Routerless_algo_5_shuffle_N=8_dog.txt |   57 +
 ...ts_Routerless_algo_5_tornado_N=4_horse.txt |   78 +
 ...ults_Routerless_algo_5_tornado_N=6_dog.txt |   57 +
 ...ults_Routerless_algo_5_tornado_N=8_dog.txt |   64 +
 ..._Routerless_algo_5_transpose_N=4_horse.txt |   78 +
 ...ts_Routerless_algo_5_transpose_N=6_dog.txt |   78 +
 ...ts_Routerless_algo_5_transpose_N=8_dog.txt |   64 +
 ...erless_algo_5_uniform_random_N=4_horse.txt |   78 +
 ...uterless_algo_5_uniform_random_N=6_dog.txt |   57 +
 ...uterless_algo_5_uniform_random_N=8_dog.txt |   57 +
 ..._IMR_algo_4_uniform_random_N=4_default.txt |   78 +
 ...esults_IMR_algo_4_uniform_random_N=4_o.txt |   78 +
 simulate.sh                                   |   68 +
 src/mem/ruby/network/garnet/CommonTypes.hh    |    2 +-
 src/mem/ruby/network/garnet/GarnetNetwork.cc  |    3 +
 src/mem/ruby/network/garnet/Router.hh         |   85 +
 src/mem/ruby/network/garnet/RoutingUnit.cc    |   76 +
 src/mem/ruby/network/garnet/RoutingUnit.hh    |    4 +
 84 files changed, 12388 insertions(+), 4 deletions(-)
 create mode 100644 Experiment Data/IMR/routing_table.txt
 create mode 100644 Experiment Data/IMR/test.txt
 create mode 100644 Experiment Data/Routerless/routing_table.txt
 create mode 100644 Experiment Data/bestIMR.txt
 create mode 100644 configs/topologies/ConstructIMR.py
 create mode 100644 configs/topologies/ConstructRouterless.py
 create mode 100644 configs/topologies/IMR.py
 create mode 100644 configs/topologies/Ring.py
 create mode 100644 configs/topologies/Routerless.py
 create mode 100644 generate_imr.sh
 create mode 100644 network_stats.txt
 create mode 100644 results/IMR/results_IMR_algo_4_neighbor_N=4_horse.txt
 create mode 100644 results/IMR/results_IMR_algo_4_neighbor_N=6_dog.txt
 create mode 100644 results/IMR/results_IMR_algo_4_neighbor_N=8_dog.txt
 create mode 100644 results/IMR/results_IMR_algo_4_shuffle_N=4_horse.txt
 create mode 100644 results/IMR/results_IMR_algo_4_shuffle_N=6_dog.txt
 create mode 100644 results/IMR/results_IMR_algo_4_shuffle_N=8_dog.txt
 create mode 100644 results/IMR/results_IMR_algo_4_tornado_N=4_horse.txt
 create mode 100644 results/IMR/results_IMR_algo_4_tornado_N=6_dog.txt
 create mode 100644 results/IMR/results_IMR_algo_4_tornado_N=8_dog.txt
 create mode 100644 results/IMR/results_IMR_algo_4_transpose_N=4_horse.txt
 create mode 100644 results/IMR/results_IMR_algo_4_transpose_N=6_dog.txt
 create mode 100644 results/IMR/results_IMR_algo_4_transpose_N=8_dog.txt
 create mode 100644 results/IMR/results_IMR_algo_4_uniform_random_N=4_horse.txt
 create mode 100644 results/IMR/results_IMR_algo_4_uniform_random_N=6_dog.txt
 create mode 100644 results/IMR/results_IMR_algo_4_uniform_random_N=8_dog.txt
 create mode 100644 results/Mesh_XY/results_Mesh_XY_algo_1_neighbor_N=4_horse.txt
 create mode 100644 results/Mesh_XY/results_Mesh_XY_algo_1_neighbor_N=6_dog.txt
 create mode 100644 results/Mesh_XY/results_Mesh_XY_algo_1_neighbor_N=8_dog.txt
 create mode 100644 results/Mesh_XY/results_Mesh_XY_algo_1_shuffle_N=4_horse.txt
 create mode 100644 results/Mesh_XY/results_Mesh_XY_algo_1_shuffle_N=6_dog.txt
 create mode 100644 results/Mesh_XY/results_Mesh_XY_algo_1_shuffle_N=8_dog.txt
 create mode 100644 results/Mesh_XY/results_Mesh_XY_algo_1_tornado_N=4_horse.txt
 create mode 100644 results/Mesh_XY/results_Mesh_XY_algo_1_tornado_N=6_dog.txt
 create mode 100644 results/Mesh_XY/results_Mesh_XY_algo_1_tornado_N=8_dog.txt
 create mode 100644 results/Mesh_XY/results_Mesh_XY_algo_1_transpose_N=4_horse.txt
 create mode 100644 results/Mesh_XY/results_Mesh_XY_algo_1_transpose_N=6_dog.txt
 create mode 100644 results/Mesh_XY/results_Mesh_XY_algo_1_transpose_N=8_dog.txt
 create mode 100644 results/Mesh_XY/results_Mesh_XY_algo_1_uniform_random_N=4_horse.txt
 create mode 100644 results/Mesh_XY/results_Mesh_XY_algo_1_uniform_random_N=6_dog.txt
 create mode 100644 results/Mesh_XY/results_Mesh_XY_algo_1_uniform_random_N=6_horse.txt
 create mode 100644 results/Mesh_XY/results_Mesh_XY_algo_1_uniform_random_N=8_dog.txt
 create mode 100644 results/Mesh_XY/results_Mesh_XY_algo_1_uniform_random_N=8_horse.txt
 create mode 100644 results/Ring/results_Ring_algo_3_neighbor_N=4_horse.txt
 create mode 100644 results/Ring/results_Ring_algo_3_neighbor_N=6_horse.txt
 create mode 100644 results/Ring/results_Ring_algo_3_neighbor_N=8_horse.txt
 create mode 100644 results/Ring/results_Ring_algo_3_shuffle_N=4_horse.txt
 create mode 100644 results/Ring/results_Ring_algo_3_shuffle_N=6_horse.txt
 create mode 100644 results/Ring/results_Ring_algo_3_shuffle_N=8_horse.txt
 create mode 100644 results/Ring/results_Ring_algo_3_tornado_N=4_horse.txt
 create mode 100644 results/Ring/results_Ring_algo_3_tornado_N=6_horse.txt
 create mode 100644 results/Ring/results_Ring_algo_3_tornado_N=8_horse.txt
 create mode 100644 results/Ring/results_Ring_algo_3_transpose_N=4_horse.txt
 create mode 100644 results/Ring/results_Ring_algo_3_transpose_N=6_horse.txt
 create mode 100644 results/Ring/results_Ring_algo_3_transpose_N=8_horse.txt
 create mode 100644 results/Ring/results_Ring_algo_3_uniform_random_N=4_horse.txt
 create mode 100644 results/Ring/results_Ring_algo_3_uniform_random_N=6_horse.txt
 create mode 100644 results/Ring/results_Ring_algo_3_uniform_random_N=8_horse.txt
 create mode 100644 results/Routerless/results_Routerless_algo_5_neighbor_N=4_horse.txt
 create mode 100644 results/Routerless/results_Routerless_algo_5_neighbor_N=6_dog.txt
 create mode 100644 results/Routerless/results_Routerless_algo_5_neighbor_N=8_dog.txt
 create mode 100644 results/Routerless/results_Routerless_algo_5_shuffle_N=4_horse.txt
 create mode 100644 results/Routerless/results_Routerless_algo_5_shuffle_N=6_dog.txt
 create mode 100644 results/Routerless/results_Routerless_algo_5_shuffle_N=8_dog.txt
 create mode 100644 results/Routerless/results_Routerless_algo_5_tornado_N=4_horse.txt
 create mode 100644 results/Routerless/results_Routerless_algo_5_tornado_N=6_dog.txt
 create mode 100644 results/Routerless/results_Routerless_algo_5_tornado_N=8_dog.txt
 create mode 100644 results/Routerless/results_Routerless_algo_5_transpose_N=4_horse.txt
 create mode 100644 results/Routerless/results_Routerless_algo_5_transpose_N=6_dog.txt
 create mode 100644 results/Routerless/results_Routerless_algo_5_transpose_N=8_dog.txt
 create mode 100644 results/Routerless/results_Routerless_algo_5_uniform_random_N=4_horse.txt
 create mode 100644 results/Routerless/results_Routerless_algo_5_uniform_random_N=6_dog.txt
 create mode 100644 results/Routerless/results_Routerless_algo_5_uniform_random_N=8_dog.txt
 create mode 100644 results/objective_function/results_IMR_algo_4_uniform_random_N=4_default.txt
 create mode 100644 results/objective_function/results_IMR_algo_4_uniform_random_N=4_o.txt
 create mode 100644 simulate.sh

diff --git a/Experiment Data/IMR/routing_table.txt b/Experiment Data/IMR/routing_table.txt
new file mode 100644
index 0000000000..195c285172
--- /dev/null
+++ b/Experiment Data/IMR/routing_table.txt	
@@ -0,0 +1,1380 @@
+Pair (0, 4):
+  Ring 4: Length = 1
+  Ring 5: Length = 1
+  Ring 2: Length = 9
+  Ring 8: Length = 9
+  Ring 6: Length = 11
+
+Pair (0, 8):
+  Ring 4: Length = 2
+  Ring 8: Length = 8
+  Ring 6: Length = 10
+
+Pair (0, 12):
+  Ring 4: Length = 3
+  Ring 8: Length = 7
+
+Pair (0, 1):
+  Ring 2: Length = 1
+  Ring 6: Length = 1
+  Ring 8: Length = 1
+  Ring 4: Length = 11
+  Ring 5: Length = 11
+
+Pair (0, 5):
+  Ring 5: Length = 2
+  Ring 6: Length = 2
+  Ring 4: Length = 6
+  Ring 2: Length = 8
+
+Pair (0, 9):
+  Ring 5: Length = 3
+  Ring 4: Length = 5
+  Ring 2: Length = 7
+  Ring 6: Length = 9
+
+Pair (0, 13):
+  Ring 4: Length = 4
+  Ring 8: Length = 6
+  Ring 6: Length = 8
+
+Pair (0, 2):
+  Ring 2: Length = 2
+  Ring 8: Length = 2
+  Ring 4: Length = 10
+  Ring 5: Length = 10
+
+Pair (0, 6):
+  Ring 6: Length = 3
+  Ring 8: Length = 3
+  Ring 4: Length = 7
+  Ring 5: Length = 9
+
+Pair (0, 10):
+  Ring 5: Length = 4
+  Ring 6: Length = 4
+  Ring 8: Length = 4
+  Ring 2: Length = 6
+
+Pair (0, 14):
+  Ring 5: Length = 5
+  Ring 8: Length = 5
+  Ring 6: Length = 7
+
+Pair (0, 3):
+  Ring 2: Length = 3
+  Ring 4: Length = 9
+
+Pair (0, 7):
+  Ring 2: Length = 4
+  Ring 4: Length = 8
+  Ring 5: Length = 8
+
+Pair (0, 11):
+  Ring 2: Length = 5
+  Ring 6: Length = 5
+  Ring 5: Length = 7
+
+Pair (0, 15):
+  Ring 5: Length = 6
+  Ring 6: Length = 6
+
+Pair (4, 0):
+  Ring 2: Length = 1
+  Ring 6: Length = 1
+  Ring 8: Length = 1
+  Ring 4: Length = 11
+  Ring 5: Length = 11
+
+Pair (4, 8):
+  Ring 1: Length = 1
+  Ring 4: Length = 1
+  Ring 8: Length = 9
+  Ring 6: Length = 11
+
+Pair (4, 12):
+  Ring 1: Length = 2
+  Ring 4: Length = 2
+  Ring 8: Length = 8
+
+Pair (4, 1):
+  Ring 2: Length = 2
+  Ring 6: Length = 2
+  Ring 8: Length = 2
+  Ring 4: Length = 10
+  Ring 5: Length = 10
+
+Pair (4, 5):
+  Ring 5: Length = 1
+  Ring 6: Length = 3
+  Ring 4: Length = 5
+  Ring 1: Length = 9
+  Ring 2: Length = 9
+
+Pair (4, 9):
+  Ring 5: Length = 2
+  Ring 4: Length = 4
+  Ring 1: Length = 8
+  Ring 2: Length = 8
+  Ring 6: Length = 10
+
+Pair (4, 13):
+  Ring 1: Length = 3
+  Ring 4: Length = 3
+  Ring 8: Length = 7
+  Ring 6: Length = 9
+
+Pair (4, 2):
+  Ring 2: Length = 3
+  Ring 8: Length = 3
+  Ring 4: Length = 9
+  Ring 5: Length = 9
+
+Pair (4, 6):
+  Ring 6: Length = 4
+  Ring 8: Length = 4
+  Ring 4: Length = 6
+  Ring 5: Length = 8
+
+Pair (4, 10):
+  Ring 5: Length = 3
+  Ring 6: Length = 5
+  Ring 8: Length = 5
+  Ring 1: Length = 7
+  Ring 2: Length = 7
+
+Pair (4, 14):
+  Ring 1: Length = 4
+  Ring 5: Length = 4
+  Ring 8: Length = 6
+  Ring 6: Length = 8
+
+Pair (4, 3):
+  Ring 2: Length = 4
+  Ring 4: Length = 8
+
+Pair (4, 7):
+  Ring 2: Length = 5
+  Ring 4: Length = 7
+  Ring 5: Length = 7
+
+Pair (4, 11):
+  Ring 1: Length = 6
+  Ring 2: Length = 6
+  Ring 5: Length = 6
+  Ring 6: Length = 6
+
+Pair (4, 15):
+  Ring 1: Length = 5
+  Ring 5: Length = 5
+  Ring 6: Length = 7
+
+Pair (8, 0):
+  Ring 6: Length = 2
+  Ring 8: Length = 2
+  Ring 4: Length = 10
+
+Pair (8, 4):
+  Ring 6: Length = 1
+  Ring 8: Length = 1
+  Ring 1: Length = 9
+  Ring 4: Length = 11
+
+Pair (8, 12):
+  Ring 1: Length = 1
+  Ring 4: Length = 1
+  Ring 7: Length = 3
+  Ring 8: Length = 9
+  Ring 0: Length = 11
+
+Pair (8, 1):
+  Ring 6: Length = 3
+  Ring 8: Length = 3
+  Ring 4: Length = 9
+
+Pair (8, 5):
+  Ring 4: Length = 4
+  Ring 6: Length = 4
+  Ring 1: Length = 8
+
+Pair (8, 9):
+  Ring 0: Length = 1
+  Ring 7: Length = 1
+  Ring 4: Length = 3
+  Ring 1: Length = 7
+  Ring 6: Length = 11
+
+Pair (8, 13):
+  Ring 1: Length = 2
+  Ring 4: Length = 2
+  Ring 7: Length = 2
+  Ring 8: Length = 8
+  Ring 0: Length = 10
+  Ring 6: Length = 10
+
+Pair (8, 2):
+  Ring 0: Length = 4
+  Ring 8: Length = 4
+  Ring 4: Length = 8
+
+Pair (8, 6):
+  Ring 0: Length = 3
+  Ring 4: Length = 5
+  Ring 6: Length = 5
+  Ring 8: Length = 5
+
+Pair (8, 10):
+  Ring 0: Length = 2
+  Ring 1: Length = 6
+  Ring 6: Length = 6
+  Ring 8: Length = 6
+
+Pair (8, 14):
+  Ring 1: Length = 3
+  Ring 8: Length = 7
+  Ring 0: Length = 9
+  Ring 6: Length = 9
+
+Pair (8, 3):
+  Ring 0: Length = 5
+  Ring 4: Length = 7
+
+Pair (8, 7):
+  Ring 0: Length = 6
+  Ring 4: Length = 6
+
+Pair (8, 11):
+  Ring 1: Length = 5
+  Ring 0: Length = 7
+  Ring 6: Length = 7
+
+Pair (8, 15):
+  Ring 1: Length = 4
+  Ring 0: Length = 8
+  Ring 6: Length = 8
+
+Pair (12, 0):
+  Ring 8: Length = 3
+  Ring 4: Length = 9
+
+Pair (12, 4):
+  Ring 8: Length = 2
+  Ring 1: Length = 8
+  Ring 4: Length = 10
+
+Pair (12, 8):
+  Ring 0: Length = 1
+  Ring 7: Length = 1
+  Ring 8: Length = 1
+  Ring 1: Length = 9
+  Ring 4: Length = 11
+
+Pair (12, 1):
+  Ring 8: Length = 4
+  Ring 4: Length = 8
+
+Pair (12, 5):
+  Ring 4: Length = 3
+  Ring 1: Length = 7
+
+Pair (12, 9):
+  Ring 0: Length = 2
+  Ring 4: Length = 2
+  Ring 7: Length = 2
+  Ring 1: Length = 6
+
+Pair (12, 13):
+  Ring 1: Length = 1
+  Ring 4: Length = 1
+  Ring 7: Length = 3
+  Ring 8: Length = 9
+  Ring 0: Length = 11
+
+Pair (12, 2):
+  Ring 0: Length = 5
+  Ring 8: Length = 5
+  Ring 4: Length = 7
+
+Pair (12, 6):
+  Ring 0: Length = 4
+  Ring 4: Length = 4
+  Ring 8: Length = 6
+
+Pair (12, 10):
+  Ring 0: Length = 3
+  Ring 1: Length = 5
+  Ring 8: Length = 7
+
+Pair (12, 14):
+  Ring 1: Length = 2
+  Ring 8: Length = 8
+  Ring 0: Length = 10
+
+Pair (12, 3):
+  Ring 0: Length = 6
+  Ring 4: Length = 6
+
+Pair (12, 7):
+  Ring 4: Length = 5
+  Ring 0: Length = 7
+
+Pair (12, 11):
+  Ring 1: Length = 4
+  Ring 0: Length = 8
+
+Pair (12, 15):
+  Ring 1: Length = 3
+  Ring 0: Length = 9
+
+Pair (1, 0):
+  Ring 4: Length = 1
+  Ring 5: Length = 1
+  Ring 2: Length = 9
+  Ring 8: Length = 9
+  Ring 6: Length = 11
+
+Pair (1, 4):
+  Ring 4: Length = 2
+  Ring 5: Length = 2
+  Ring 2: Length = 8
+  Ring 8: Length = 8
+  Ring 6: Length = 10
+
+Pair (1, 8):
+  Ring 4: Length = 3
+  Ring 8: Length = 7
+  Ring 6: Length = 9
+
+Pair (1, 12):
+  Ring 4: Length = 4
+  Ring 8: Length = 6
+
+Pair (1, 5):
+  Ring 3: Length = 1
+  Ring 6: Length = 1
+  Ring 5: Length = 3
+  Ring 2: Length = 7
+  Ring 4: Length = 7
+
+Pair (1, 9):
+  Ring 3: Length = 2
+  Ring 5: Length = 4
+  Ring 2: Length = 6
+  Ring 4: Length = 6
+  Ring 6: Length = 8
+
+Pair (1, 13):
+  Ring 3: Length = 3
+  Ring 4: Length = 5
+  Ring 8: Length = 5
+  Ring 6: Length = 7
+
+Pair (1, 2):
+  Ring 2: Length = 1
+  Ring 8: Length = 1
+  Ring 3: Length = 9
+  Ring 4: Length = 11
+  Ring 5: Length = 11
+
+Pair (1, 6):
+  Ring 6: Length = 2
+  Ring 8: Length = 2
+  Ring 4: Length = 8
+  Ring 5: Length = 10
+
+Pair (1, 10):
+  Ring 6: Length = 3
+  Ring 8: Length = 3
+  Ring 2: Length = 5
+  Ring 3: Length = 5
+  Ring 5: Length = 5
+
+Pair (1, 14):
+  Ring 3: Length = 4
+  Ring 8: Length = 4
+  Ring 5: Length = 6
+  Ring 6: Length = 6
+
+Pair (1, 3):
+  Ring 2: Length = 2
+  Ring 3: Length = 8
+  Ring 4: Length = 10
+
+Pair (1, 7):
+  Ring 2: Length = 3
+  Ring 3: Length = 7
+  Ring 4: Length = 9
+  Ring 5: Length = 9
+
+Pair (1, 11):
+  Ring 2: Length = 4
+  Ring 6: Length = 4
+  Ring 3: Length = 6
+  Ring 5: Length = 8
+
+Pair (1, 15):
+  Ring 6: Length = 5
+  Ring 5: Length = 7
+
+Pair (5, 0):
+  Ring 2: Length = 2
+  Ring 4: Length = 6
+  Ring 5: Length = 10
+  Ring 6: Length = 10
+
+Pair (5, 4):
+  Ring 1: Length = 1
+  Ring 2: Length = 1
+  Ring 4: Length = 7
+  Ring 6: Length = 9
+  Ring 5: Length = 11
+
+Pair (5, 8):
+  Ring 1: Length = 2
+  Ring 4: Length = 8
+  Ring 6: Length = 8
+
+Pair (5, 12):
+  Ring 1: Length = 3
+  Ring 4: Length = 9
+
+Pair (5, 1):
+  Ring 2: Length = 3
+  Ring 4: Length = 5
+  Ring 3: Length = 9
+  Ring 5: Length = 9
+  Ring 6: Length = 11
+
+Pair (5, 9):
+  Ring 3: Length = 1
+  Ring 5: Length = 1
+  Ring 6: Length = 7
+  Ring 1: Length = 9
+  Ring 2: Length = 9
+  Ring 4: Length = 11
+
+Pair (5, 13):
+  Ring 3: Length = 2
+  Ring 1: Length = 4
+  Ring 6: Length = 6
+  Ring 4: Length = 10
+
+Pair (5, 2):
+  Ring 2: Length = 4
+  Ring 4: Length = 4
+  Ring 3: Length = 8
+  Ring 5: Length = 8
+
+Pair (5, 6):
+  Ring 4: Length = 1
+  Ring 6: Length = 1
+  Ring 5: Length = 7
+
+Pair (5, 10):
+  Ring 5: Length = 2
+  Ring 6: Length = 2
+  Ring 3: Length = 4
+  Ring 1: Length = 8
+  Ring 2: Length = 8
+
+Pair (5, 14):
+  Ring 3: Length = 3
+  Ring 5: Length = 3
+  Ring 1: Length = 5
+  Ring 6: Length = 5
+
+Pair (5, 3):
+  Ring 4: Length = 3
+  Ring 2: Length = 5
+  Ring 3: Length = 7
+
+Pair (5, 7):
+  Ring 4: Length = 2
+  Ring 2: Length = 6
+  Ring 3: Length = 6
+  Ring 5: Length = 6
+
+Pair (5, 11):
+  Ring 6: Length = 3
+  Ring 3: Length = 5
+  Ring 5: Length = 5
+  Ring 1: Length = 7
+  Ring 2: Length = 7
+
+Pair (5, 15):
+  Ring 5: Length = 4
+  Ring 6: Length = 4
+  Ring 1: Length = 6
+
+Pair (9, 0):
+  Ring 2: Length = 3
+  Ring 6: Length = 3
+  Ring 4: Length = 7
+  Ring 5: Length = 9
+
+Pair (9, 4):
+  Ring 1: Length = 2
+  Ring 2: Length = 2
+  Ring 6: Length = 2
+  Ring 4: Length = 8
+  Ring 5: Length = 10
+
+Pair (9, 8):
+  Ring 6: Length = 1
+  Ring 1: Length = 3
+  Ring 7: Length = 3
+  Ring 4: Length = 9
+  Ring 0: Length = 11
+
+Pair (9, 12):
+  Ring 7: Length = 2
+  Ring 1: Length = 4
+  Ring 0: Length = 10
+  Ring 4: Length = 10
+
+Pair (9, 1):
+  Ring 2: Length = 4
+  Ring 6: Length = 4
+  Ring 4: Length = 6
+  Ring 3: Length = 8
+  Ring 5: Length = 8
+
+Pair (9, 5):
+  Ring 1: Length = 1
+  Ring 2: Length = 1
+  Ring 4: Length = 1
+  Ring 6: Length = 5
+  Ring 3: Length = 9
+  Ring 5: Length = 11
+
+Pair (9, 13):
+  Ring 3: Length = 1
+  Ring 7: Length = 1
+  Ring 1: Length = 5
+  Ring 0: Length = 9
+  Ring 4: Length = 11
+  Ring 6: Length = 11
+
+Pair (9, 2):
+  Ring 0: Length = 3
+  Ring 2: Length = 5
+  Ring 4: Length = 5
+  Ring 3: Length = 7
+  Ring 5: Length = 7
+
+Pair (9, 6):
+  Ring 0: Length = 2
+  Ring 4: Length = 2
+  Ring 5: Length = 6
+  Ring 6: Length = 6
+
+Pair (9, 10):
+  Ring 0: Length = 1
+  Ring 5: Length = 1
+  Ring 3: Length = 3
+  Ring 6: Length = 7
+  Ring 1: Length = 9
+  Ring 2: Length = 9
+
+Pair (9, 14):
+  Ring 3: Length = 2
+  Ring 5: Length = 2
+  Ring 1: Length = 6
+  Ring 0: Length = 8
+  Ring 6: Length = 10
+
+Pair (9, 3):
+  Ring 0: Length = 4
+  Ring 4: Length = 4
+  Ring 2: Length = 6
+  Ring 3: Length = 6
+
+Pair (9, 7):
+  Ring 4: Length = 3
+  Ring 0: Length = 5
+  Ring 3: Length = 5
+  Ring 5: Length = 5
+  Ring 2: Length = 7
+
+Pair (9, 11):
+  Ring 3: Length = 4
+  Ring 5: Length = 4
+  Ring 0: Length = 6
+  Ring 1: Length = 8
+  Ring 2: Length = 8
+  Ring 6: Length = 8
+
+Pair (9, 15):
+  Ring 5: Length = 3
+  Ring 0: Length = 7
+  Ring 1: Length = 7
+  Ring 6: Length = 9
+
+Pair (13, 0):
+  Ring 6: Length = 4
+  Ring 8: Length = 4
+  Ring 4: Length = 8
+
+Pair (13, 4):
+  Ring 6: Length = 3
+  Ring 8: Length = 3
+  Ring 1: Length = 7
+  Ring 4: Length = 9
+
+Pair (13, 8):
+  Ring 0: Length = 2
+  Ring 6: Length = 2
+  Ring 7: Length = 2
+  Ring 8: Length = 2
+  Ring 1: Length = 8
+  Ring 4: Length = 10
+
+Pair (13, 12):
+  Ring 0: Length = 1
+  Ring 7: Length = 1
+  Ring 8: Length = 1
+  Ring 1: Length = 9
+  Ring 4: Length = 11
+
+Pair (13, 1):
+  Ring 6: Length = 5
+  Ring 8: Length = 5
+  Ring 3: Length = 7
+  Ring 4: Length = 7
+
+Pair (13, 5):
+  Ring 4: Length = 2
+  Ring 1: Length = 6
+  Ring 6: Length = 6
+  Ring 3: Length = 8
+
+Pair (13, 9):
+  Ring 4: Length = 1
+  Ring 6: Length = 1
+  Ring 0: Length = 3
+  Ring 7: Length = 3
+  Ring 1: Length = 5
+  Ring 3: Length = 9
+
+Pair (13, 2):
+  Ring 0: Length = 6
+  Ring 3: Length = 6
+  Ring 4: Length = 6
+  Ring 8: Length = 6
+
+Pair (13, 6):
+  Ring 4: Length = 3
+  Ring 0: Length = 5
+  Ring 6: Length = 7
+  Ring 8: Length = 7
+
+Pair (13, 10):
+  Ring 3: Length = 2
+  Ring 0: Length = 4
+  Ring 1: Length = 4
+  Ring 6: Length = 8
+  Ring 8: Length = 8
+
+Pair (13, 14):
+  Ring 1: Length = 1
+  Ring 3: Length = 1
+  Ring 8: Length = 9
+  Ring 0: Length = 11
+  Ring 6: Length = 11
+
+Pair (13, 3):
+  Ring 3: Length = 5
+  Ring 4: Length = 5
+  Ring 0: Length = 7
+
+Pair (13, 7):
+  Ring 3: Length = 4
+  Ring 4: Length = 4
+  Ring 0: Length = 8
+
+Pair (13, 11):
+  Ring 1: Length = 3
+  Ring 3: Length = 3
+  Ring 0: Length = 9
+  Ring 6: Length = 9
+
+Pair (13, 15):
+  Ring 1: Length = 2
+  Ring 0: Length = 10
+  Ring 6: Length = 10
+
+Pair (2, 0):
+  Ring 4: Length = 2
+  Ring 5: Length = 2
+  Ring 2: Length = 8
+  Ring 8: Length = 8
+
+Pair (2, 4):
+  Ring 4: Length = 3
+  Ring 5: Length = 3
+  Ring 2: Length = 7
+  Ring 8: Length = 7
+
+Pair (2, 8):
+  Ring 4: Length = 4
+  Ring 8: Length = 6
+  Ring 0: Length = 8
+
+Pair (2, 12):
+  Ring 4: Length = 5
+  Ring 8: Length = 5
+  Ring 0: Length = 7
+
+Pair (2, 1):
+  Ring 3: Length = 1
+  Ring 4: Length = 1
+  Ring 5: Length = 1
+  Ring 2: Length = 9
+  Ring 8: Length = 9
+
+Pair (2, 5):
+  Ring 3: Length = 2
+  Ring 5: Length = 4
+  Ring 2: Length = 6
+  Ring 4: Length = 8
+
+Pair (2, 9):
+  Ring 3: Length = 3
+  Ring 2: Length = 5
+  Ring 5: Length = 5
+  Ring 4: Length = 7
+  Ring 0: Length = 9
+
+Pair (2, 13):
+  Ring 3: Length = 4
+  Ring 8: Length = 4
+  Ring 0: Length = 6
+  Ring 4: Length = 6
+
+Pair (2, 6):
+  Ring 8: Length = 1
+  Ring 4: Length = 9
+  Ring 0: Length = 11
+  Ring 5: Length = 11
+
+Pair (2, 10):
+  Ring 8: Length = 2
+  Ring 2: Length = 4
+  Ring 3: Length = 6
+  Ring 5: Length = 6
+  Ring 0: Length = 10
+
+Pair (2, 14):
+  Ring 8: Length = 3
+  Ring 0: Length = 5
+  Ring 3: Length = 5
+  Ring 5: Length = 7
+
+Pair (2, 3):
+  Ring 0: Length = 1
+  Ring 2: Length = 1
+  Ring 3: Length = 9
+  Ring 4: Length = 11
+
+Pair (2, 7):
+  Ring 0: Length = 2
+  Ring 2: Length = 2
+  Ring 3: Length = 8
+  Ring 4: Length = 10
+  Ring 5: Length = 10
+
+Pair (2, 11):
+  Ring 0: Length = 3
+  Ring 2: Length = 3
+  Ring 3: Length = 7
+  Ring 5: Length = 9
+
+Pair (2, 15):
+  Ring 0: Length = 4
+  Ring 5: Length = 8
+
+Pair (6, 0):
+  Ring 5: Length = 3
+  Ring 4: Length = 5
+  Ring 8: Length = 7
+  Ring 6: Length = 9
+
+Pair (6, 4):
+  Ring 5: Length = 4
+  Ring 4: Length = 6
+  Ring 8: Length = 6
+  Ring 6: Length = 8
+
+Pair (6, 8):
+  Ring 8: Length = 5
+  Ring 4: Length = 7
+  Ring 6: Length = 7
+  Ring 0: Length = 9
+
+Pair (6, 12):
+  Ring 8: Length = 4
+  Ring 0: Length = 8
+  Ring 4: Length = 8
+
+Pair (6, 1):
+  Ring 5: Length = 2
+  Ring 4: Length = 4
+  Ring 8: Length = 8
+  Ring 6: Length = 10
+
+Pair (6, 5):
+  Ring 5: Length = 5
+  Ring 4: Length = 11
+  Ring 6: Length = 11
+
+Pair (6, 9):
+  Ring 5: Length = 6
+  Ring 6: Length = 6
+  Ring 0: Length = 10
+  Ring 4: Length = 10
+
+Pair (6, 13):
+  Ring 8: Length = 3
+  Ring 6: Length = 5
+  Ring 0: Length = 7
+  Ring 4: Length = 9
+
+Pair (6, 2):
+  Ring 0: Length = 1
+  Ring 5: Length = 1
+  Ring 4: Length = 3
+  Ring 8: Length = 9
+
+Pair (6, 10):
+  Ring 6: Length = 1
+  Ring 8: Length = 1
+  Ring 5: Length = 7
+  Ring 0: Length = 11
+
+Pair (6, 14):
+  Ring 8: Length = 2
+  Ring 6: Length = 4
+  Ring 0: Length = 6
+  Ring 5: Length = 8
+
+Pair (6, 3):
+  Ring 0: Length = 2
+  Ring 4: Length = 2
+
+Pair (6, 7):
+  Ring 4: Length = 1
+  Ring 0: Length = 3
+  Ring 5: Length = 11
+
+Pair (6, 11):
+  Ring 6: Length = 2
+  Ring 0: Length = 4
+  Ring 5: Length = 10
+
+Pair (6, 15):
+  Ring 6: Length = 3
+  Ring 0: Length = 5
+  Ring 5: Length = 9
+
+Pair (10, 0):
+  Ring 2: Length = 4
+  Ring 8: Length = 6
+  Ring 5: Length = 8
+  Ring 6: Length = 8
+
+Pair (10, 4):
+  Ring 1: Length = 3
+  Ring 2: Length = 3
+  Ring 8: Length = 5
+  Ring 6: Length = 7
+  Ring 5: Length = 9
+
+Pair (10, 8):
+  Ring 1: Length = 4
+  Ring 8: Length = 4
+  Ring 6: Length = 6
+  Ring 0: Length = 10
+
+Pair (10, 12):
+  Ring 8: Length = 3
+  Ring 1: Length = 5
+  Ring 0: Length = 9
+
+Pair (10, 1):
+  Ring 2: Length = 5
+  Ring 3: Length = 5
+  Ring 5: Length = 7
+  Ring 8: Length = 7
+  Ring 6: Length = 9
+
+Pair (10, 5):
+  Ring 1: Length = 2
+  Ring 2: Length = 2
+  Ring 3: Length = 6
+  Ring 5: Length = 10
+  Ring 6: Length = 10
+
+Pair (10, 9):
+  Ring 1: Length = 1
+  Ring 2: Length = 1
+  Ring 6: Length = 5
+  Ring 3: Length = 7
+  Ring 0: Length = 11
+  Ring 5: Length = 11
+
+Pair (10, 13):
+  Ring 8: Length = 2
+  Ring 6: Length = 4
+  Ring 1: Length = 6
+  Ring 0: Length = 8
+  Ring 3: Length = 8
+
+Pair (10, 2):
+  Ring 0: Length = 2
+  Ring 3: Length = 4
+  Ring 2: Length = 6
+  Ring 5: Length = 6
+  Ring 8: Length = 8
+
+Pair (10, 6):
+  Ring 0: Length = 1
+  Ring 5: Length = 5
+  Ring 8: Length = 9
+  Ring 6: Length = 11
+
+Pair (10, 14):
+  Ring 5: Length = 1
+  Ring 8: Length = 1
+  Ring 6: Length = 3
+  Ring 0: Length = 7
+  Ring 1: Length = 7
+  Ring 3: Length = 9
+
+Pair (10, 3):
+  Ring 0: Length = 3
+  Ring 3: Length = 3
+  Ring 2: Length = 7
+
+Pair (10, 7):
+  Ring 3: Length = 2
+  Ring 0: Length = 4
+  Ring 5: Length = 4
+  Ring 2: Length = 8
+
+Pair (10, 11):
+  Ring 3: Length = 1
+  Ring 6: Length = 1
+  Ring 5: Length = 3
+  Ring 0: Length = 5
+  Ring 1: Length = 9
+  Ring 2: Length = 9
+
+Pair (10, 15):
+  Ring 5: Length = 2
+  Ring 6: Length = 2
+  Ring 0: Length = 6
+  Ring 1: Length = 8
+
+Pair (14, 0):
+  Ring 6: Length = 5
+  Ring 8: Length = 5
+  Ring 5: Length = 7
+
+Pair (14, 4):
+  Ring 6: Length = 4
+  Ring 8: Length = 4
+  Ring 1: Length = 6
+  Ring 5: Length = 8
+
+Pair (14, 8):
+  Ring 0: Length = 3
+  Ring 6: Length = 3
+  Ring 8: Length = 3
+  Ring 1: Length = 7
+
+Pair (14, 12):
+  Ring 0: Length = 2
+  Ring 8: Length = 2
+  Ring 1: Length = 8
+
+Pair (14, 1):
+  Ring 3: Length = 6
+  Ring 5: Length = 6
+  Ring 6: Length = 6
+  Ring 8: Length = 6
+
+Pair (14, 5):
+  Ring 1: Length = 5
+  Ring 3: Length = 7
+  Ring 6: Length = 7
+  Ring 5: Length = 9
+
+Pair (14, 9):
+  Ring 6: Length = 2
+  Ring 0: Length = 4
+  Ring 1: Length = 4
+  Ring 3: Length = 8
+  Ring 5: Length = 10
+
+Pair (14, 13):
+  Ring 0: Length = 1
+  Ring 6: Length = 1
+  Ring 8: Length = 1
+  Ring 1: Length = 9
+  Ring 3: Length = 9
+
+Pair (14, 2):
+  Ring 3: Length = 5
+  Ring 5: Length = 5
+  Ring 0: Length = 7
+  Ring 8: Length = 7
+
+Pair (14, 6):
+  Ring 5: Length = 4
+  Ring 0: Length = 6
+  Ring 6: Length = 8
+  Ring 8: Length = 8
+
+Pair (14, 10):
+  Ring 3: Length = 1
+  Ring 1: Length = 3
+  Ring 0: Length = 5
+  Ring 6: Length = 9
+  Ring 8: Length = 9
+  Ring 5: Length = 11
+
+Pair (14, 3):
+  Ring 3: Length = 4
+  Ring 0: Length = 8
+
+Pair (14, 7):
+  Ring 3: Length = 3
+  Ring 5: Length = 3
+  Ring 0: Length = 9
+
+Pair (14, 11):
+  Ring 1: Length = 2
+  Ring 3: Length = 2
+  Ring 5: Length = 2
+  Ring 0: Length = 10
+  Ring 6: Length = 10
+
+Pair (14, 15):
+  Ring 1: Length = 1
+  Ring 5: Length = 1
+  Ring 0: Length = 11
+  Ring 6: Length = 11
+
+Pair (3, 0):
+  Ring 4: Length = 3
+  Ring 2: Length = 7
+
+Pair (3, 4):
+  Ring 4: Length = 4
+  Ring 2: Length = 6
+
+Pair (3, 8):
+  Ring 4: Length = 5
+  Ring 0: Length = 7
+
+Pair (3, 12):
+  Ring 0: Length = 6
+  Ring 4: Length = 6
+
+Pair (3, 1):
+  Ring 3: Length = 2
+  Ring 4: Length = 2
+  Ring 2: Length = 8
+
+Pair (3, 5):
+  Ring 3: Length = 3
+  Ring 2: Length = 5
+  Ring 4: Length = 9
+
+Pair (3, 9):
+  Ring 2: Length = 4
+  Ring 3: Length = 4
+  Ring 0: Length = 8
+  Ring 4: Length = 8
+
+Pair (3, 13):
+  Ring 0: Length = 5
+  Ring 3: Length = 5
+  Ring 4: Length = 7
+
+Pair (3, 2):
+  Ring 3: Length = 1
+  Ring 4: Length = 1
+  Ring 2: Length = 9
+  Ring 0: Length = 11
+
+Pair (3, 6):
+  Ring 0: Length = 10
+  Ring 4: Length = 10
+
+Pair (3, 10):
+  Ring 2: Length = 3
+  Ring 3: Length = 7
+  Ring 0: Length = 9
+
+Pair (3, 14):
+  Ring 0: Length = 4
+  Ring 3: Length = 6
+
+Pair (3, 7):
+  Ring 0: Length = 1
+  Ring 2: Length = 1
+  Ring 3: Length = 9
+  Ring 4: Length = 11
+
+Pair (3, 11):
+  Ring 0: Length = 2
+  Ring 2: Length = 2
+  Ring 3: Length = 8
+
+Pair (3, 15):
+  Ring 0: Length = 3
+
+Pair (7, 0):
+  Ring 4: Length = 4
+  Ring 5: Length = 4
+  Ring 2: Length = 6
+
+Pair (7, 4):
+  Ring 2: Length = 5
+  Ring 4: Length = 5
+  Ring 5: Length = 5
+
+Pair (7, 8):
+  Ring 0: Length = 6
+  Ring 4: Length = 6
+
+Pair (7, 12):
+  Ring 0: Length = 5
+  Ring 4: Length = 7
+
+Pair (7, 1):
+  Ring 3: Length = 3
+  Ring 4: Length = 3
+  Ring 5: Length = 3
+  Ring 2: Length = 7
+
+Pair (7, 5):
+  Ring 2: Length = 4
+  Ring 3: Length = 4
+  Ring 5: Length = 6
+  Ring 4: Length = 10
+
+Pair (7, 9):
+  Ring 2: Length = 3
+  Ring 3: Length = 5
+  Ring 0: Length = 7
+  Ring 5: Length = 7
+  Ring 4: Length = 9
+
+Pair (7, 13):
+  Ring 0: Length = 4
+  Ring 3: Length = 6
+  Ring 4: Length = 8
+
+Pair (7, 2):
+  Ring 3: Length = 2
+  Ring 4: Length = 2
+  Ring 5: Length = 2
+  Ring 2: Length = 8
+  Ring 0: Length = 10
+
+Pair (7, 6):
+  Ring 5: Length = 1
+  Ring 0: Length = 9
+  Ring 4: Length = 11
+
+Pair (7, 10):
+  Ring 2: Length = 2
+  Ring 0: Length = 8
+  Ring 3: Length = 8
+  Ring 5: Length = 8
+
+Pair (7, 14):
+  Ring 0: Length = 3
+  Ring 3: Length = 7
+  Ring 5: Length = 9
+
+Pair (7, 3):
+  Ring 3: Length = 1
+  Ring 4: Length = 1
+  Ring 2: Length = 9
+  Ring 0: Length = 11
+
+Pair (7, 11):
+  Ring 0: Length = 1
+  Ring 2: Length = 1
+  Ring 3: Length = 9
+  Ring 5: Length = 11
+
+Pair (7, 15):
+  Ring 0: Length = 2
+  Ring 5: Length = 10
+
+Pair (11, 0):
+  Ring 2: Length = 5
+  Ring 5: Length = 5
+  Ring 6: Length = 7
+
+Pair (11, 4):
+  Ring 1: Length = 4
+  Ring 2: Length = 4
+  Ring 5: Length = 6
+  Ring 6: Length = 6
+
+Pair (11, 8):
+  Ring 0: Length = 5
+  Ring 1: Length = 5
+  Ring 6: Length = 5
+
+Pair (11, 12):
+  Ring 0: Length = 4
+  Ring 1: Length = 6
+
+Pair (11, 1):
+  Ring 3: Length = 4
+  Ring 5: Length = 4
+  Ring 2: Length = 6
+  Ring 6: Length = 8
+
+Pair (11, 5):
+  Ring 1: Length = 3
+  Ring 2: Length = 3
+  Ring 3: Length = 5
+  Ring 5: Length = 7
+  Ring 6: Length = 9
+
+Pair (11, 9):
+  Ring 1: Length = 2
+  Ring 2: Length = 2
+  Ring 6: Length = 4
+  Ring 0: Length = 6
+  Ring 3: Length = 6
+  Ring 5: Length = 8
+
+Pair (11, 13):
+  Ring 0: Length = 3
+  Ring 6: Length = 3
+  Ring 1: Length = 7
+  Ring 3: Length = 7
+
+Pair (11, 2):
+  Ring 3: Length = 3
+  Ring 5: Length = 3
+  Ring 2: Length = 7
+  Ring 0: Length = 9
+
+Pair (11, 6):
+  Ring 5: Length = 2
+  Ring 0: Length = 8
+  Ring 6: Length = 10
+
+Pair (11, 10):
+  Ring 1: Length = 1
+  Ring 2: Length = 1
+  Ring 0: Length = 7
+  Ring 3: Length = 9
+  Ring 5: Length = 9
+  Ring 6: Length = 11
+
+Pair (11, 14):
+  Ring 0: Length = 2
+  Ring 6: Length = 2
+  Ring 1: Length = 8
+  Ring 3: Length = 8
+  Ring 5: Length = 10
+
+Pair (11, 3):
+  Ring 3: Length = 2
+  Ring 2: Length = 8
+  Ring 0: Length = 10
+
+Pair (11, 7):
+  Ring 3: Length = 1
+  Ring 5: Length = 1
+  Ring 2: Length = 9
+  Ring 0: Length = 11
+
+Pair (11, 15):
+  Ring 0: Length = 1
+  Ring 6: Length = 1
+  Ring 1: Length = 9
+  Ring 5: Length = 11
+
+Pair (15, 0):
+  Ring 5: Length = 6
+  Ring 6: Length = 6
+
+Pair (15, 4):
+  Ring 1: Length = 5
+  Ring 6: Length = 5
+  Ring 5: Length = 7
+
+Pair (15, 8):
+  Ring 0: Length = 4
+  Ring 6: Length = 4
+  Ring 1: Length = 6
+
+Pair (15, 12):
+  Ring 0: Length = 3
+  Ring 1: Length = 7
+
+Pair (15, 1):
+  Ring 5: Length = 5
+  Ring 6: Length = 7
+
+Pair (15, 5):
+  Ring 1: Length = 4
+  Ring 5: Length = 8
+  Ring 6: Length = 8
+
+Pair (15, 9):
+  Ring 1: Length = 3
+  Ring 6: Length = 3
+  Ring 0: Length = 5
+  Ring 5: Length = 9
+
+Pair (15, 13):
+  Ring 0: Length = 2
+  Ring 6: Length = 2
+  Ring 1: Length = 8
+
+Pair (15, 2):
+  Ring 5: Length = 4
+  Ring 0: Length = 8
+
+Pair (15, 6):
+  Ring 5: Length = 3
+  Ring 0: Length = 7
+  Ring 6: Length = 9
+
+Pair (15, 10):
+  Ring 1: Length = 2
+  Ring 0: Length = 6
+  Ring 5: Length = 10
+  Ring 6: Length = 10
+
+Pair (15, 14):
+  Ring 0: Length = 1
+  Ring 6: Length = 1
+  Ring 1: Length = 9
+  Ring 5: Length = 11
+
+Pair (15, 3):
+  Ring 0: Length = 9
+
+Pair (15, 7):
+  Ring 5: Length = 2
+  Ring 0: Length = 10
+
+Pair (15, 11):
+  Ring 1: Length = 1
+  Ring 5: Length = 1
+  Ring 0: Length = 11
+  Ring 6: Length = 11
+
diff --git a/Experiment Data/IMR/test.txt b/Experiment Data/IMR/test.txt
new file mode 100644
index 0000000000..dce812d841
--- /dev/null
+++ b/Experiment Data/IMR/test.txt	
@@ -0,0 +1,3836 @@
+Generation 100
+Binary Strings:
+0: 1001001000
+1: 0001001100
+2: 0100100000
+3: 1101000000
+4: 1111010000
+5: 1111011111
+6: 0000001001
+7: 0010010110
+8: 0000111110
+Ring Vertices:
+0: (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (1,2) -> (1,1) -> (1,0) -> (0,0)
+1: (0,1) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (2,2) -> (1,2) -> (1,1) -> (0,1)
+2: (1,0) -> (1,1) -> (1,2) -> (2,2) -> (2,1) -> (2,0) -> (1,0)
+3: (0,0) -> (0,1) -> (0,2) -> (1,2) -> (1,1) -> (2,1) -> (2,0) -> (1,0) -> (0,0)
+4: (2,0) -> (1,0) -> (0,0) -> (0,1) -> (0,2) -> (1,2) -> (1,1) -> (2,1) -> (2,2) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+5: (2,0) -> (3,0) -> (3,1) -> (3,2) -> (3,3) -> (2,3) -> (1,3) -> (0,3) -> (0,2) -> (0,1) -> (0,0) -> (1,0) -> (2,0)
+6: (1,2) -> (1,3) -> (0,3) -> (0,2) -> (1,2)
+7: (2,0) -> (2,1) -> (2,2) -> (1,2) -> (1,3) -> (2,3) -> (3,3) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+8: (2,1) -> (1,1) -> (1,2) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (3,3) -> (3,2) -> (3,1) -> (2,1)
+Ring Visualizations:
+Visualization of ring 0:
+↓ ← . .
+↓ ↑ . .
+↓ ↑ . .
+→ ↑ . .
+
+Visualization of ring 1:
+. . . .
+↓ ← . .
+↓ ↑ ← .
+→ → ↑ .
+
+Visualization of ring 2:
+. ↓ ← .
+. ↓ ↑ .
+. → ↑ .
+. . . .
+
+Visualization of ring 3:
+↓ ← ← .
+↓ → ↑ .
+→ ↑ . .
+. . . .
+
+Visualization of ring 4:
+↓ ← ← ←
+↓ → ↓ ↑
+→ ↑ → ↑
+. . . .
+
+Visualization of ring 5:
+→ → → ↓
+↑ . . ↓
+↑ . . ↓
+↑ ← ← ←
+
+Visualization of ring 6:
+. . . .
+. . . .
+→ ↓ . .
+↑ ← . .
+
+Visualization of ring 7:
+. . ↓ ←
+. . ↓ ↑
+. ↓ ← ↑
+. → → ↑
+
+Visualization of ring 8:
+. . . .
+. ↓ ← ←
+↓ ← . ↑
+→ → → ↑
+
+Score: 3.9050000000000002, Distance: 3.125, Length: 78
+========================================
+Generation 200
+Binary Strings:
+0: 1001001000
+1: 1101101000
+2: 1100110000
+3: 0100000000
+4: 1110000000
+5: 1111011111
+6: 0000000001
+7: 1110110010
+8: 0000001110
+Ring Vertices:
+0: (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (1,2) -> (1,1) -> (1,0) -> (0,0)
+1: (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (1,2) -> (2,2) -> (2,1) -> (2,0) -> (1,0) -> (0,0)
+2: (2,1) -> (2,0) -> (1,0) -> (0,0) -> (0,1) -> (1,1) -> (1,2) -> (2,2) -> (3,2) -> (3,1) -> (2,1)
+3: (1,1) -> (2,1) -> (2,0) -> (1,0) -> (1,1)
+4: (2,1) -> (3,1) -> (3,0) -> (2,0) -> (1,0) -> (0,0) -> (0,1) -> (1,1) -> (2,1)
+5: (2,0) -> (3,0) -> (3,1) -> (3,2) -> (3,3) -> (2,3) -> (1,3) -> (0,3) -> (0,2) -> (0,1) -> (0,0) -> (1,0) -> (2,0)
+6:
+7: (2,0) -> (2,1) -> (2,2) -> (1,2) -> (1,3) -> (2,3) -> (3,3) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+8: (2,1) -> (1,1) -> (1,2) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (3,3) -> (3,2) -> (3,1) -> (2,1)
+Ring Visualizations:
+Visualization of ring 0:
+↓ ← . .
+↓ ↑ . .
+↓ ↑ . .
+→ ↑ . .
+
+Visualization of ring 1:
+↓ ← ← .
+↓ . ↑ .
+↓ → ↑ .
+→ ↑ . .
+
+Visualization of ring 2:
+↓ ← ← .
+→ ↓ ↑ ←
+. → → ↑
+. . . .
+
+Visualization of ring 3:
+. ↓ ← .
+. → ↑ .
+. . . .
+. . . .
+
+Visualization of ring 4:
+↓ ← ← ←
+→ → → ↑
+. . . .
+. . . .
+
+Visualization of ring 5:
+→ → → ↓
+↑ . . ↓
+↑ . . ↓
+↑ ← ← ←
+
+Visualization of ring 6:
+. . . .
+. . . .
+. . . .
+. . . .
+
+Visualization of ring 7:
+. . ↓ ←
+. . ↓ ↑
+. ↓ ← ↑
+. → → ↑
+
+Visualization of ring 8:
+. . . .
+. ↓ ← ←
+↓ ← . ↑
+→ → → ↑
+
+Score: 3.8766666666666665, Distance: 3.1666666666666665, Length: 71
+========================================
+Generation 300
+Binary Strings:
+0: 1001001000
+1: 1101101000
+2: 1100110000
+3: 0100000000
+4: 1110000000
+5: 1111011111
+6: 0000000001
+7: 1110110010
+8: 0000001110
+Ring Vertices:
+0: (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (1,2) -> (1,1) -> (1,0) -> (0,0)
+1: (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (1,2) -> (2,2) -> (2,1) -> (2,0) -> (1,0) -> (0,0)
+2: (2,1) -> (2,0) -> (1,0) -> (0,0) -> (0,1) -> (1,1) -> (1,2) -> (2,2) -> (3,2) -> (3,1) -> (2,1)
+3: (1,1) -> (2,1) -> (2,0) -> (1,0) -> (1,1)
+4: (2,1) -> (3,1) -> (3,0) -> (2,0) -> (1,0) -> (0,0) -> (0,1) -> (1,1) -> (2,1)
+5: (2,0) -> (3,0) -> (3,1) -> (3,2) -> (3,3) -> (2,3) -> (1,3) -> (0,3) -> (0,2) -> (0,1) -> (0,0) -> (1,0) -> (2,0)
+6:
+7: (2,0) -> (2,1) -> (2,2) -> (1,2) -> (1,3) -> (2,3) -> (3,3) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+8: (2,1) -> (1,1) -> (1,2) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (3,3) -> (3,2) -> (3,1) -> (2,1)
+Ring Visualizations:
+Visualization of ring 0:
+↓ ← . .
+↓ ↑ . .
+↓ ↑ . .
+→ ↑ . .
+
+Visualization of ring 1:
+↓ ← ← .
+↓ . ↑ .
+↓ → ↑ .
+→ ↑ . .
+
+Visualization of ring 2:
+↓ ← ← .
+→ ↓ ↑ ←
+. → → ↑
+. . . .
+
+Visualization of ring 3:
+. ↓ ← .
+. → ↑ .
+. . . .
+. . . .
+
+Visualization of ring 4:
+↓ ← ← ←
+→ → → ↑
+. . . .
+. . . .
+
+Visualization of ring 5:
+→ → → ↓
+↑ . . ↓
+↑ . . ↓
+↑ ← ← ←
+
+Visualization of ring 6:
+. . . .
+. . . .
+. . . .
+. . . .
+
+Visualization of ring 7:
+. . ↓ ←
+. . ↓ ↑
+. ↓ ← ↑
+. → → ↑
+
+Visualization of ring 8:
+. . . .
+. ↓ ← ←
+↓ ← . ↑
+→ → → ↑
+
+Score: 3.8766666666666665, Distance: 3.1666666666666665, Length: 71
+========================================
+Generation 400
+Binary Strings:
+0: 1001001000
+1: 1101101000
+2: 1100110000
+3: 0100000000
+4: 1110000000
+5: 1111011111
+6: 0000000001
+7: 1110110010
+8: 0000001110
+Ring Vertices:
+0: (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (1,2) -> (1,1) -> (1,0) -> (0,0)
+1: (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (1,2) -> (2,2) -> (2,1) -> (2,0) -> (1,0) -> (0,0)
+2: (2,1) -> (2,0) -> (1,0) -> (0,0) -> (0,1) -> (1,1) -> (1,2) -> (2,2) -> (3,2) -> (3,1) -> (2,1)
+3: (1,1) -> (2,1) -> (2,0) -> (1,0) -> (1,1)
+4: (2,1) -> (3,1) -> (3,0) -> (2,0) -> (1,0) -> (0,0) -> (0,1) -> (1,1) -> (2,1)
+5: (2,0) -> (3,0) -> (3,1) -> (3,2) -> (3,3) -> (2,3) -> (1,3) -> (0,3) -> (0,2) -> (0,1) -> (0,0) -> (1,0) -> (2,0)
+6:
+7: (2,0) -> (2,1) -> (2,2) -> (1,2) -> (1,3) -> (2,3) -> (3,3) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+8: (2,1) -> (1,1) -> (1,2) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (3,3) -> (3,2) -> (3,1) -> (2,1)
+Ring Visualizations:
+Visualization of ring 0:
+↓ ← . .
+↓ ↑ . .
+↓ ↑ . .
+→ ↑ . .
+
+Visualization of ring 1:
+↓ ← ← .
+↓ . ↑ .
+↓ → ↑ .
+→ ↑ . .
+
+Visualization of ring 2:
+↓ ← ← .
+→ ↓ ↑ ←
+. → → ↑
+. . . .
+
+Visualization of ring 3:
+. ↓ ← .
+. → ↑ .
+. . . .
+. . . .
+
+Visualization of ring 4:
+↓ ← ← ←
+→ → → ↑
+. . . .
+. . . .
+
+Visualization of ring 5:
+→ → → ↓
+↑ . . ↓
+↑ . . ↓
+↑ ← ← ←
+
+Visualization of ring 6:
+. . . .
+. . . .
+. . . .
+. . . .
+
+Visualization of ring 7:
+. . ↓ ←
+. . ↓ ↑
+. ↓ ← ↑
+. → → ↑
+
+Visualization of ring 8:
+. . . .
+. ↓ ← ←
+↓ ← . ↑
+→ → → ↑
+
+Score: 3.8766666666666665, Distance: 3.1666666666666665, Length: 71
+========================================
+Generation 500
+Binary Strings:
+0: 1001001000
+1: 1101101000
+2: 1100110000
+3: 0100000000
+4: 1110000000
+5: 1111011111
+6: 0000000001
+7: 1110110010
+8: 0000001110
+Ring Vertices:
+0: (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (1,2) -> (1,1) -> (1,0) -> (0,0)
+1: (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (1,2) -> (2,2) -> (2,1) -> (2,0) -> (1,0) -> (0,0)
+2: (2,1) -> (2,0) -> (1,0) -> (0,0) -> (0,1) -> (1,1) -> (1,2) -> (2,2) -> (3,2) -> (3,1) -> (2,1)
+3: (1,1) -> (2,1) -> (2,0) -> (1,0) -> (1,1)
+4: (2,1) -> (3,1) -> (3,0) -> (2,0) -> (1,0) -> (0,0) -> (0,1) -> (1,1) -> (2,1)
+5: (2,0) -> (3,0) -> (3,1) -> (3,2) -> (3,3) -> (2,3) -> (1,3) -> (0,3) -> (0,2) -> (0,1) -> (0,0) -> (1,0) -> (2,0)
+6:
+7: (2,0) -> (2,1) -> (2,2) -> (1,2) -> (1,3) -> (2,3) -> (3,3) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+8: (2,1) -> (1,1) -> (1,2) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (3,3) -> (3,2) -> (3,1) -> (2,1)
+Ring Visualizations:
+Visualization of ring 0:
+↓ ← . .
+↓ ↑ . .
+↓ ↑ . .
+→ ↑ . .
+
+Visualization of ring 1:
+↓ ← ← .
+↓ . ↑ .
+↓ → ↑ .
+→ ↑ . .
+
+Visualization of ring 2:
+↓ ← ← .
+→ ↓ ↑ ←
+. → → ↑
+. . . .
+
+Visualization of ring 3:
+. ↓ ← .
+. → ↑ .
+. . . .
+. . . .
+
+Visualization of ring 4:
+↓ ← ← ←
+→ → → ↑
+. . . .
+. . . .
+
+Visualization of ring 5:
+→ → → ↓
+↑ . . ↓
+↑ . . ↓
+↑ ← ← ←
+
+Visualization of ring 6:
+. . . .
+. . . .
+. . . .
+. . . .
+
+Visualization of ring 7:
+. . ↓ ←
+. . ↓ ↑
+. ↓ ← ↑
+. → → ↑
+
+Visualization of ring 8:
+. . . .
+. ↓ ← ←
+↓ ← . ↑
+→ → → ↑
+
+Score: 3.8766666666666665, Distance: 3.1666666666666665, Length: 71
+========================================
+Generation 600
+Binary Strings:
+0: 1001001000
+1: 1101101000
+2: 1100110000
+3: 0100000000
+4: 1110000000
+5: 1111011111
+6: 0000000001
+7: 1110110010
+8: 0000001110
+Ring Vertices:
+0: (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (1,2) -> (1,1) -> (1,0) -> (0,0)
+1: (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (1,2) -> (2,2) -> (2,1) -> (2,0) -> (1,0) -> (0,0)
+2: (2,1) -> (2,0) -> (1,0) -> (0,0) -> (0,1) -> (1,1) -> (1,2) -> (2,2) -> (3,2) -> (3,1) -> (2,1)
+3: (1,1) -> (2,1) -> (2,0) -> (1,0) -> (1,1)
+4: (2,1) -> (3,1) -> (3,0) -> (2,0) -> (1,0) -> (0,0) -> (0,1) -> (1,1) -> (2,1)
+5: (2,0) -> (3,0) -> (3,1) -> (3,2) -> (3,3) -> (2,3) -> (1,3) -> (0,3) -> (0,2) -> (0,1) -> (0,0) -> (1,0) -> (2,0)
+6:
+7: (2,0) -> (2,1) -> (2,2) -> (1,2) -> (1,3) -> (2,3) -> (3,3) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+8: (2,1) -> (1,1) -> (1,2) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (3,3) -> (3,2) -> (3,1) -> (2,1)
+Ring Visualizations:
+Visualization of ring 0:
+↓ ← . .
+↓ ↑ . .
+↓ ↑ . .
+→ ↑ . .
+
+Visualization of ring 1:
+↓ ← ← .
+↓ . ↑ .
+↓ → ↑ .
+→ ↑ . .
+
+Visualization of ring 2:
+↓ ← ← .
+→ ↓ ↑ ←
+. → → ↑
+. . . .
+
+Visualization of ring 3:
+. ↓ ← .
+. → ↑ .
+. . . .
+. . . .
+
+Visualization of ring 4:
+↓ ← ← ←
+→ → → ↑
+. . . .
+. . . .
+
+Visualization of ring 5:
+→ → → ↓
+↑ . . ↓
+↑ . . ↓
+↑ ← ← ←
+
+Visualization of ring 6:
+. . . .
+. . . .
+. . . .
+. . . .
+
+Visualization of ring 7:
+. . ↓ ←
+. . ↓ ↑
+. ↓ ← ↑
+. → → ↑
+
+Visualization of ring 8:
+. . . .
+. ↓ ← ←
+↓ ← . ↑
+→ → → ↑
+
+Score: 3.8766666666666665, Distance: 3.1666666666666665, Length: 71
+========================================
+Generation 700
+Binary Strings:
+0: 1001001000
+1: 1101101000
+2: 1100110000
+3: 0100000000
+4: 1110000000
+5: 1111011111
+6: 0000000001
+7: 1110110010
+8: 0000001110
+Ring Vertices:
+0: (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (1,2) -> (1,1) -> (1,0) -> (0,0)
+1: (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (1,2) -> (2,2) -> (2,1) -> (2,0) -> (1,0) -> (0,0)
+2: (2,1) -> (2,0) -> (1,0) -> (0,0) -> (0,1) -> (1,1) -> (1,2) -> (2,2) -> (3,2) -> (3,1) -> (2,1)
+3: (1,1) -> (2,1) -> (2,0) -> (1,0) -> (1,1)
+4: (2,1) -> (3,1) -> (3,0) -> (2,0) -> (1,0) -> (0,0) -> (0,1) -> (1,1) -> (2,1)
+5: (2,0) -> (3,0) -> (3,1) -> (3,2) -> (3,3) -> (2,3) -> (1,3) -> (0,3) -> (0,2) -> (0,1) -> (0,0) -> (1,0) -> (2,0)
+6:
+7: (2,0) -> (2,1) -> (2,2) -> (1,2) -> (1,3) -> (2,3) -> (3,3) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+8: (2,1) -> (1,1) -> (1,2) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (3,3) -> (3,2) -> (3,1) -> (2,1)
+Ring Visualizations:
+Visualization of ring 0:
+↓ ← . .
+↓ ↑ . .
+↓ ↑ . .
+→ ↑ . .
+
+Visualization of ring 1:
+↓ ← ← .
+↓ . ↑ .
+↓ → ↑ .
+→ ↑ . .
+
+Visualization of ring 2:
+↓ ← ← .
+→ ↓ ↑ ←
+. → → ↑
+. . . .
+
+Visualization of ring 3:
+. ↓ ← .
+. → ↑ .
+. . . .
+. . . .
+
+Visualization of ring 4:
+↓ ← ← ←
+→ → → ↑
+. . . .
+. . . .
+
+Visualization of ring 5:
+→ → → ↓
+↑ . . ↓
+↑ . . ↓
+↑ ← ← ←
+
+Visualization of ring 6:
+. . . .
+. . . .
+. . . .
+. . . .
+
+Visualization of ring 7:
+. . ↓ ←
+. . ↓ ↑
+. ↓ ← ↑
+. → → ↑
+
+Visualization of ring 8:
+. . . .
+. ↓ ← ←
+↓ ← . ↑
+→ → → ↑
+
+Score: 3.8766666666666665, Distance: 3.1666666666666665, Length: 71
+========================================
+Generation 100
+Binary Strings:
+0: 1101110000
+1: 0100100001
+2: 1111100001
+3: 1001001001
+4: 0110011111
+5: 0001111101
+6: 0000010111
+7: 1011111110
+8: 0000110010
+Ring Vertices:
+0: (2,1) -> (2,0) -> (1,0) -> (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (3,2) -> (3,1) -> (2,1)
+1: (1,0) -> (2,0) -> (2,1) -> (2,2) -> (1,2) -> (1,1) -> (1,0)
+2: (2,1) -> (2,2) -> (1,2) -> (0,2) -> (0,1) -> (0,0) -> (1,0) -> (2,0) -> (3,0) -> (3,1) -> (2,1)
+3: (0,0) -> (1,0) -> (1,1) -> (1,2) -> (1,3) -> (0,3) -> (0,2) -> (0,1) -> (0,0)
+4: (2,0) -> (3,0) -> (3,1) -> (3,2) -> (3,3) -> (2,3) -> (1,3) -> (0,3) -> (0,2) -> (1,2) -> (2,2) -> (2,1) -> (1,1) -> (1,0) -> (2,0)
+5: (2,1) -> (3,1) -> (3,2) -> (2,2) -> (2,3) -> (1,3) -> (0,3) -> (0,2) -> (0,1) -> (1,1) -> (2,1)
+6: (2,1) -> (3,1) -> (3,2) -> (3,3) -> (2,3) -> (1,3) -> (1,2) -> (2,2) -> (2,1)
+7: (2,0) -> (2,1) -> (1,1) -> (1,0) -> (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (3,3) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+8: (2,1) -> (1,1) -> (1,2) -> (2,2) -> (2,3) -> (3,3) -> (3,2) -> (3,1) -> (2,1)
+Ring Visualizations:
+Visualization of ring 0:
+↓ ← ← .
+↓ . ↑ ←
+→ → → ↑
+. . . .
+
+Visualization of ring 1:
+. → ↓ .
+. ↑ ↓ .
+. ↑ ← .
+. . . .
+
+Visualization of ring 2:
+→ → → ↓
+↑ . ↓ ←
+↑ ← ← .
+. . . .
+
+Visualization of ring 3:
+→ ↓ . .
+↑ ↓ . .
+↑ ↓ . .
+↑ ← . .
+
+Visualization of ring 4:
+. → → ↓
+. ↑ ← ↓
+→ → ↑ ↓
+↑ ← ← ←
+
+Visualization of ring 5:
+. . . .
+→ → → ↓
+↑ . ↓ ←
+↑ ← ← .
+
+Visualization of ring 6:
+. . . .
+. . → ↓
+. → ↑ ↓
+. ↑ ← ←
+
+Visualization of ring 7:
+↓ ← ↓ ←
+↓ ↑ ← ↑
+↓ . . ↑
+→ → → ↑
+
+Visualization of ring 8:
+. . . .
+. ↓ ← ←
+. → ↓ ↑
+. . → ↑
+
+Score: 3.8716666666666666, Distance: 2.9916666666666667, Length: 88
+========================================
+Generation 100
+Binary Strings:
+0: 0000000100
+1: 1110000001
+2: 0110110010
+3: 1111100000
+4: 1011111001
+5: 0000000000
+6: 1111101111
+7: 1000000001
+8: 1001111110
+Ring Vertices:
+0: (2,2) -> (1,2) -> (1,3) -> (2,3) -> (2,2)
+1: (2,1) -> (1,1) -> (0,1) -> (0,0) -> (1,0) -> (2,0) -> (3,0) -> (3,1) -> (2,1)
+2: (2,0) -> (1,0) -> (1,1) -> (1,2) -> (2,2) -> (2,3) -> (3,3) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+3: (2,1) -> (3,1) -> (3,0) -> (2,0) -> (1,0) -> (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (2,1)
+4: (2,0) -> (3,0) -> (3,1) -> (3,2) -> (2,2) -> (1,2) -> (1,3) -> (0,3) -> (0,2) -> (0,1) -> (0,0) -> (1,0) -> (1,1) -> (2,1) -> (2,0)
+5:
+6: (2,1) -> (2,2) -> (3,2) -> (3,3) -> (2,3) -> (1,3) -> (0,3) -> (0,2) -> (0,1) -> (1,1) -> (1,0) -> (2,0) -> (2,1)
+7: (2,0) -> (3,0) -> (3,1) -> (3,2) -> (3,3) -> (2,3) -> (2,2) -> (1,2) -> (1,1) -> (0,1) -> (0,0) -> (1,0) -> (2,0)
+8: (2,1) -> (2,2) -> (1,2) -> (1,1) -> (1,0) -> (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (3,3) -> (3,2) -> (3,1) -> (2,1)
+Ring Visualizations:
+Visualization of ring 0:
+. . . .
+. . . .
+. ↓ ← .
+. → ↑ .
+
+Visualization of ring 1:
+→ → → ↓
+↑ ← ← ←
+. . . .
+. . . .
+
+Visualization of ring 2:
+. ↓ ← ←
+. ↓ . ↑
+. → ↓ ↑
+. . → ↑
+
+Visualization of ring 3:
+↓ ← ← ←
+↓ . → ↑
+→ → ↑ .
+. . . .
+
+Visualization of ring 4:
+→ ↓ → ↓
+↑ → ↑ ↓
+↑ ↓ ← ←
+↑ ← . .
+
+Visualization of ring 5:
+. . . .
+. . . .
+. . . .
+. . . .
+
+Visualization of ring 6:
+. → ↓ .
+→ ↑ ↓ .
+↑ . → ↓
+↑ ← ← ←
+
+Visualization of ring 7:
+→ → → ↓
+↑ ← . ↓
+. ↑ ← ↓
+. . ↑ ←
+
+Visualization of ring 8:
+↓ ← . .
+↓ ↑ ↓ ←
+↓ ↑ ← ↑
+→ → → ↑
+
+Score: 3.888333333333333, Distance: 3.058333333333333, Length: 83
+========================================
+Generation 200
+Binary Strings:
+0: 0000000100
+1: 1110000001
+2: 0110110010
+3: 1111100000
+4: 1011111001
+5: 0000000000
+6: 1111101111
+7: 1000000001
+8: 1001111110
+Ring Vertices:
+0: (2,2) -> (1,2) -> (1,3) -> (2,3) -> (2,2)
+1: (2,1) -> (1,1) -> (0,1) -> (0,0) -> (1,0) -> (2,0) -> (3,0) -> (3,1) -> (2,1)
+2: (2,0) -> (1,0) -> (1,1) -> (1,2) -> (2,2) -> (2,3) -> (3,3) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+3: (2,1) -> (3,1) -> (3,0) -> (2,0) -> (1,0) -> (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (2,1)
+4: (2,0) -> (3,0) -> (3,1) -> (3,2) -> (2,2) -> (1,2) -> (1,3) -> (0,3) -> (0,2) -> (0,1) -> (0,0) -> (1,0) -> (1,1) -> (2,1) -> (2,0)
+5:
+6: (2,1) -> (2,2) -> (3,2) -> (3,3) -> (2,3) -> (1,3) -> (0,3) -> (0,2) -> (0,1) -> (1,1) -> (1,0) -> (2,0) -> (2,1)
+7: (2,0) -> (3,0) -> (3,1) -> (3,2) -> (3,3) -> (2,3) -> (2,2) -> (1,2) -> (1,1) -> (0,1) -> (0,0) -> (1,0) -> (2,0)
+8: (2,1) -> (2,2) -> (1,2) -> (1,1) -> (1,0) -> (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (3,3) -> (3,2) -> (3,1) -> (2,1)
+Ring Visualizations:
+Visualization of ring 0:
+. . . .
+. . . .
+. ↓ ← .
+. → ↑ .
+
+Visualization of ring 1:
+→ → → ↓
+↑ ← ← ←
+. . . .
+. . . .
+
+Visualization of ring 2:
+. ↓ ← ←
+. ↓ . ↑
+. → ↓ ↑
+. . → ↑
+
+Visualization of ring 3:
+↓ ← ← ←
+↓ . → ↑
+→ → ↑ .
+. . . .
+
+Visualization of ring 4:
+→ ↓ → ↓
+↑ → ↑ ↓
+↑ ↓ ← ←
+↑ ← . .
+
+Visualization of ring 5:
+. . . .
+. . . .
+. . . .
+. . . .
+
+Visualization of ring 6:
+. → ↓ .
+→ ↑ ↓ .
+↑ . → ↓
+↑ ← ← ←
+
+Visualization of ring 7:
+→ → → ↓
+↑ ← . ↓
+. ↑ ← ↓
+. . ↑ ←
+
+Visualization of ring 8:
+↓ ← . .
+↓ ↑ ↓ ←
+↓ ↑ ← ↑
+→ → → ↑
+
+Score: 3.888333333333333, Distance: 3.058333333333333, Length: 83
+========================================
+Generation 300
+Binary Strings:
+0: 1101101001
+1: 0000000000
+2: 0110110001
+3: 0101111000
+4: 0000010010
+5: 1001110000
+6: 0001110101
+7: 1110000001
+8: 0000000000
+Ring Vertices:
+0: (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2) -> (1,2) -> (1,3) -> (0,3) -> (0,2) -> (0,1) -> (0,0)
+1:
+2: (2,0) -> (3,0) -> (3,1) -> (3,2) -> (3,3) -> (2,3) -> (2,2) -> (1,2) -> (1,1) -> (1,0) -> (2,0)
+3: (2,1) -> (3,1) -> (3,0) -> (2,0) -> (1,0) -> (1,1) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (1,2) -> (2,2) -> (2,1)
+4: (2,0) -> (1,0) -> (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (2,3) -> (3,3) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+5: (2,1) -> (1,1) -> (1,0) -> (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (3,3) -> (3,2) -> (3,1) -> (2,1)
+6: (2,1) -> (3,1) -> (3,2) -> (2,2) -> (2,3) -> (1,3) -> (0,3) -> (0,2) -> (0,1) -> (1,1) -> (2,1)
+7: (2,0) -> (3,0) -> (3,1) -> (3,2) -> (2,2) -> (2,1) -> (1,1) -> (0,1) -> (0,0) -> (1,0) -> (2,0)
+8:
+Ring Visualizations:
+Visualization of ring 0:
+→ → ↓ .
+↑ . ↓ .
+↑ ↓ ← .
+↑ ← . .
+
+Visualization of ring 1:
+. . . .
+. . . .
+. . . .
+. . . .
+
+Visualization of ring 2:
+. → → ↓
+. ↑ . ↓
+. ↑ ← ↓
+. . ↑ ←
+
+Visualization of ring 3:
+. ↓ ← ←
+↓ ← → ↑
+↓ → ↑ .
+→ ↑ . .
+
+Visualization of ring 4:
+↓ ← ← ←
+↓ . . ↑
+→ → ↓ ↑
+. . → ↑
+
+Visualization of ring 5:
+↓ ← . .
+↓ ↑ ← ←
+↓ . . ↑
+→ → → ↑
+
+Visualization of ring 6:
+. . . .
+→ → → ↓
+↑ . ↓ ←
+↑ ← ← .
+
+Visualization of ring 7:
+→ → → ↓
+↑ ← ← ↓
+. . ↑ ←
+. . . .
+
+Visualization of ring 8:
+. . . .
+. . . .
+. . . .
+. . . .
+
+Score: 3.84, Distance: 3.1, Length: 74
+========================================
+Generation 400
+Binary Strings:
+0: 1101101001
+1: 0000000000
+2: 0110110001
+3: 0101111000
+4: 0000010010
+5: 1001110000
+6: 0001110101
+7: 1110000001
+8: 0000000000
+Ring Vertices:
+0: (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2) -> (1,2) -> (1,3) -> (0,3) -> (0,2) -> (0,1) -> (0,0)
+1:
+2: (2,0) -> (3,0) -> (3,1) -> (3,2) -> (3,3) -> (2,3) -> (2,2) -> (1,2) -> (1,1) -> (1,0) -> (2,0)
+3: (2,1) -> (3,1) -> (3,0) -> (2,0) -> (1,0) -> (1,1) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (1,2) -> (2,2) -> (2,1)
+4: (2,0) -> (1,0) -> (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (2,3) -> (3,3) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+5: (2,1) -> (1,1) -> (1,0) -> (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (3,3) -> (3,2) -> (3,1) -> (2,1)
+6: (2,1) -> (3,1) -> (3,2) -> (2,2) -> (2,3) -> (1,3) -> (0,3) -> (0,2) -> (0,1) -> (1,1) -> (2,1)
+7: (2,0) -> (3,0) -> (3,1) -> (3,2) -> (2,2) -> (2,1) -> (1,1) -> (0,1) -> (0,0) -> (1,0) -> (2,0)
+8:
+Ring Visualizations:
+Visualization of ring 0:
+→ → ↓ .
+↑ . ↓ .
+↑ ↓ ← .
+↑ ← . .
+
+Visualization of ring 1:
+. . . .
+. . . .
+. . . .
+. . . .
+
+Visualization of ring 2:
+. → → ↓
+. ↑ . ↓
+. ↑ ← ↓
+. . ↑ ←
+
+Visualization of ring 3:
+. ↓ ← ←
+↓ ← → ↑
+↓ → ↑ .
+→ ↑ . .
+
+Visualization of ring 4:
+↓ ← ← ←
+↓ . . ↑
+→ → ↓ ↑
+. . → ↑
+
+Visualization of ring 5:
+↓ ← . .
+↓ ↑ ← ←
+↓ . . ↑
+→ → → ↑
+
+Visualization of ring 6:
+. . . .
+→ → → ↓
+↑ . ↓ ←
+↑ ← ← .
+
+Visualization of ring 7:
+→ → → ↓
+↑ ← ← ↓
+. . ↑ ←
+. . . .
+
+Visualization of ring 8:
+. . . .
+. . . .
+. . . .
+. . . .
+
+Score: 3.84, Distance: 3.1, Length: 74
+========================================
+Generation 500
+Binary Strings:
+0: 1110101101
+1: 0000000000
+2: 0110110111
+3: 0000100110
+4: 1001100100
+5: 0110110110
+6: 1001101111
+7: 0001110001
+8: 1001111110
+Ring Vertices:
+0: (2,1) -> (2,2) -> (2,3) -> (1,3) -> (0,3) -> (0,2) -> (1,2) -> (1,1) -> (0,1) -> (0,0) -> (1,0) -> (2,0) -> (3,0) -> (3,1) -> (2,1)
+1:
+2: (2,0) -> (3,0) -> (3,1) -> (3,2) -> (3,3) -> (2,3) -> (1,3) -> (1,2) -> (1,1) -> (2,1) -> (2,0)
+3: (3,2) -> (2,2) -> (2,1) -> (2,0) -> (1,0) -> (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) -> (3,2)
+4: (2,0) -> (1,0) -> (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+5: (2,0) -> (1,0) -> (1,1) -> (1,2) -> (2,2) -> (2,3) -> (3,3) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+6: (3,2) -> (3,3) -> (2,3) -> (1,3) -> (0,3) -> (0,2) -> (0,1) -> (0,0) -> (1,0) -> (1,1) -> (2,1) -> (2,2) -> (3,2)
+7: (2,1) -> (3,1) -> (3,2) -> (2,2) -> (1,2) -> (0,2) -> (0,1) -> (1,1) -> (2,1)
+8: (3,2) -> (2,2) -> (2,1) -> (1,1) -> (1,0) -> (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (3,3) -> (3,2)
+Ring Visualizations:
+Visualization of ring 0:
+→ → → ↓
+↑ ← ↓ ←
+→ ↑ ↓ .
+↑ ← ← .
+
+Visualization of ring 1:
+. . . .
+. . . .
+. . . .
+. . . .
+
+Visualization of ring 2:
+. . → ↓
+. → ↑ ↓
+. ↑ . ↓
+. ↑ ← ←
+
+Visualization of ring 3:
+. ↓ ← .
+. ↓ ↑ .
+. ↓ ↑ ←
+. → → ↑
+
+Visualization of ring 4:
+↓ ← ← ←
+↓ . . ↑
+→ → → ↑
+. . . .
+
+Visualization of ring 5:
+. ↓ ← ←
+. ↓ . ↑
+. → ↓ ↑
+. . → ↑
+
+Visualization of ring 6:
+→ ↓ . .
+↑ → ↓ .
+↑ . → ↓
+↑ ← ← ←
+
+Visualization of ring 7:
+. . . .
+→ → → ↓
+↑ ← ← ←
+. . . .
+
+Visualization of ring 8:
+↓ ← . .
+↓ ↑ ← .
+↓ . ↑ ←
+→ → → ↑
+
+Score: 3.775, Distance: 2.925, Length: 85
+========================================
+Generation 600
+Binary Strings:
+0: 1110101101
+1: 0000000000
+2: 0110110111
+3: 0000100110
+4: 1001100100
+5: 0110110110
+6: 1001101111
+7: 0001110001
+8: 1001111110
+Ring Vertices:
+0: (2,1) -> (2,2) -> (2,3) -> (1,3) -> (0,3) -> (0,2) -> (1,2) -> (1,1) -> (0,1) -> (0,0) -> (1,0) -> (2,0) -> (3,0) -> (3,1) -> (2,1)
+1:
+2: (2,0) -> (3,0) -> (3,1) -> (3,2) -> (3,3) -> (2,3) -> (1,3) -> (1,2) -> (1,1) -> (2,1) -> (2,0)
+3: (3,2) -> (2,2) -> (2,1) -> (2,0) -> (1,0) -> (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) -> (3,2)
+4: (2,0) -> (1,0) -> (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+5: (2,0) -> (1,0) -> (1,1) -> (1,2) -> (2,2) -> (2,3) -> (3,3) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+6: (3,2) -> (3,3) -> (2,3) -> (1,3) -> (0,3) -> (0,2) -> (0,1) -> (0,0) -> (1,0) -> (1,1) -> (2,1) -> (2,2) -> (3,2)
+7: (2,1) -> (3,1) -> (3,2) -> (2,2) -> (1,2) -> (0,2) -> (0,1) -> (1,1) -> (2,1)
+8: (3,2) -> (2,2) -> (2,1) -> (1,1) -> (1,0) -> (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (3,3) -> (3,2)
+Ring Visualizations:
+Visualization of ring 0:
+→ → → ↓
+↑ ← ↓ ←
+→ ↑ ↓ .
+↑ ← ← .
+
+Visualization of ring 1:
+. . . .
+. . . .
+. . . .
+. . . .
+
+Visualization of ring 2:
+. . → ↓
+. → ↑ ↓
+. ↑ . ↓
+. ↑ ← ←
+
+Visualization of ring 3:
+. ↓ ← .
+. ↓ ↑ .
+. ↓ ↑ ←
+. → → ↑
+
+Visualization of ring 4:
+↓ ← ← ←
+↓ . . ↑
+→ → → ↑
+. . . .
+
+Visualization of ring 5:
+. ↓ ← ←
+. ↓ . ↑
+. → ↓ ↑
+. . → ↑
+
+Visualization of ring 6:
+→ ↓ . .
+↑ → ↓ .
+↑ . → ↓
+↑ ← ← ←
+
+Visualization of ring 7:
+. . . .
+→ → → ↓
+↑ ← ← ←
+. . . .
+
+Visualization of ring 8:
+↓ ← . .
+↓ ↑ ← .
+↓ . ↑ ←
+→ → → ↑
+
+Score: 3.775, Distance: 2.925, Length: 85
+========================================
+Generation 700
+Binary Strings:
+0: 1110101101
+1: 0000000000
+2: 0110110111
+3: 0000100110
+4: 1001100100
+5: 0110110110
+6: 1001101111
+7: 0001110001
+8: 1001111110
+Ring Vertices:
+0: (2,1) -> (2,2) -> (2,3) -> (1,3) -> (0,3) -> (0,2) -> (1,2) -> (1,1) -> (0,1) -> (0,0) -> (1,0) -> (2,0) -> (3,0) -> (3,1) -> (2,1)
+1:
+2: (2,0) -> (3,0) -> (3,1) -> (3,2) -> (3,3) -> (2,3) -> (1,3) -> (1,2) -> (1,1) -> (2,1) -> (2,0)
+3: (3,2) -> (2,2) -> (2,1) -> (2,0) -> (1,0) -> (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) -> (3,2)
+4: (2,0) -> (1,0) -> (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+5: (2,0) -> (1,0) -> (1,1) -> (1,2) -> (2,2) -> (2,3) -> (3,3) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+6: (3,2) -> (3,3) -> (2,3) -> (1,3) -> (0,3) -> (0,2) -> (0,1) -> (0,0) -> (1,0) -> (1,1) -> (2,1) -> (2,2) -> (3,2)
+7: (2,1) -> (3,1) -> (3,2) -> (2,2) -> (1,2) -> (0,2) -> (0,1) -> (1,1) -> (2,1)
+8: (3,2) -> (2,2) -> (2,1) -> (1,1) -> (1,0) -> (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (3,3) -> (3,2)
+Ring Visualizations:
+Visualization of ring 0:
+→ → → ↓
+↑ ← ↓ ←
+→ ↑ ↓ .
+↑ ← ← .
+
+Visualization of ring 1:
+. . . .
+. . . .
+. . . .
+. . . .
+
+Visualization of ring 2:
+. . → ↓
+. → ↑ ↓
+. ↑ . ↓
+. ↑ ← ←
+
+Visualization of ring 3:
+. ↓ ← .
+. ↓ ↑ .
+. ↓ ↑ ←
+. → → ↑
+
+Visualization of ring 4:
+↓ ← ← ←
+↓ . . ↑
+→ → → ↑
+. . . .
+
+Visualization of ring 5:
+. ↓ ← ←
+. ↓ . ↑
+. → ↓ ↑
+. . → ↑
+
+Visualization of ring 6:
+→ ↓ . .
+↑ → ↓ .
+↑ . → ↓
+↑ ← ← ←
+
+Visualization of ring 7:
+. . . .
+→ → → ↓
+↑ ← ← ←
+. . . .
+
+Visualization of ring 8:
+↓ ← . .
+↓ ↑ ← .
+↓ . ↑ ←
+→ → → ↑
+
+Score: 3.775, Distance: 2.925, Length: 85
+========================================
+Generation 800
+Binary Strings:
+0: 1110101101
+1: 0000000000
+2: 0110110111
+3: 0000100110
+4: 1001100100
+5: 0110110110
+6: 1001101111
+7: 0001110001
+8: 1001111110
+Ring Vertices:
+0: (2,1) -> (2,2) -> (2,3) -> (1,3) -> (0,3) -> (0,2) -> (1,2) -> (1,1) -> (0,1) -> (0,0) -> (1,0) -> (2,0) -> (3,0) -> (3,1) -> (2,1)
+1:
+2: (2,0) -> (3,0) -> (3,1) -> (3,2) -> (3,3) -> (2,3) -> (1,3) -> (1,2) -> (1,1) -> (2,1) -> (2,0)
+3: (3,2) -> (2,2) -> (2,1) -> (2,0) -> (1,0) -> (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) -> (3,2)
+4: (2,0) -> (1,0) -> (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+5: (2,0) -> (1,0) -> (1,1) -> (1,2) -> (2,2) -> (2,3) -> (3,3) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+6: (3,2) -> (3,3) -> (2,3) -> (1,3) -> (0,3) -> (0,2) -> (0,1) -> (0,0) -> (1,0) -> (1,1) -> (2,1) -> (2,2) -> (3,2)
+7: (2,1) -> (3,1) -> (3,2) -> (2,2) -> (1,2) -> (0,2) -> (0,1) -> (1,1) -> (2,1)
+8: (3,2) -> (2,2) -> (2,1) -> (1,1) -> (1,0) -> (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (3,3) -> (3,2)
+Ring Visualizations:
+Visualization of ring 0:
+→ → → ↓
+↑ ← ↓ ←
+→ ↑ ↓ .
+↑ ← ← .
+
+Visualization of ring 1:
+. . . .
+. . . .
+. . . .
+. . . .
+
+Visualization of ring 2:
+. . → ↓
+. → ↑ ↓
+. ↑ . ↓
+. ↑ ← ←
+
+Visualization of ring 3:
+. ↓ ← .
+. ↓ ↑ .
+. ↓ ↑ ←
+. → → ↑
+
+Visualization of ring 4:
+↓ ← ← ←
+↓ . . ↑
+→ → → ↑
+. . . .
+
+Visualization of ring 5:
+. ↓ ← ←
+. ↓ . ↑
+. → ↓ ↑
+. . → ↑
+
+Visualization of ring 6:
+→ ↓ . .
+↑ → ↓ .
+↑ . → ↓
+↑ ← ← ←
+
+Visualization of ring 7:
+. . . .
+→ → → ↓
+↑ ← ← ←
+. . . .
+
+Visualization of ring 8:
+↓ ← . .
+↓ ↑ ← .
+↓ . ↑ ←
+→ → → ↑
+
+Score: 3.775, Distance: 2.925, Length: 85
+========================================
+Generation 900
+Binary Strings:
+0: 1110101101
+1: 0000000000
+2: 0110110111
+3: 0000100110
+4: 1001100100
+5: 0110110110
+6: 1001101111
+7: 0001110001
+8: 1001111110
+Ring Vertices:
+0: (2,1) -> (2,2) -> (2,3) -> (1,3) -> (0,3) -> (0,2) -> (1,2) -> (1,1) -> (0,1) -> (0,0) -> (1,0) -> (2,0) -> (3,0) -> (3,1) -> (2,1)
+1:
+2: (2,0) -> (3,0) -> (3,1) -> (3,2) -> (3,3) -> (2,3) -> (1,3) -> (1,2) -> (1,1) -> (2,1) -> (2,0)
+3: (3,2) -> (2,2) -> (2,1) -> (2,0) -> (1,0) -> (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) -> (3,2)
+4: (2,0) -> (1,0) -> (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+5: (2,0) -> (1,0) -> (1,1) -> (1,2) -> (2,2) -> (2,3) -> (3,3) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+6: (3,2) -> (3,3) -> (2,3) -> (1,3) -> (0,3) -> (0,2) -> (0,1) -> (0,0) -> (1,0) -> (1,1) -> (2,1) -> (2,2) -> (3,2)
+7: (2,1) -> (3,1) -> (3,2) -> (2,2) -> (1,2) -> (0,2) -> (0,1) -> (1,1) -> (2,1)
+8: (3,2) -> (2,2) -> (2,1) -> (1,1) -> (1,0) -> (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (3,3) -> (3,2)
+Ring Visualizations:
+Visualization of ring 0:
+→ → → ↓
+↑ ← ↓ ←
+→ ↑ ↓ .
+↑ ← ← .
+
+Visualization of ring 1:
+. . . .
+. . . .
+. . . .
+. . . .
+
+Visualization of ring 2:
+. . → ↓
+. → ↑ ↓
+. ↑ . ↓
+. ↑ ← ←
+
+Visualization of ring 3:
+. ↓ ← .
+. ↓ ↑ .
+. ↓ ↑ ←
+. → → ↑
+
+Visualization of ring 4:
+↓ ← ← ←
+↓ . . ↑
+→ → → ↑
+. . . .
+
+Visualization of ring 5:
+. ↓ ← ←
+. ↓ . ↑
+. → ↓ ↑
+. . → ↑
+
+Visualization of ring 6:
+→ ↓ . .
+↑ → ↓ .
+↑ . → ↓
+↑ ← ← ←
+
+Visualization of ring 7:
+. . . .
+→ → → ↓
+↑ ← ← ←
+. . . .
+
+Visualization of ring 8:
+↓ ← . .
+↓ ↑ ← .
+↓ . ↑ ←
+→ → → ↑
+
+Score: 3.775, Distance: 2.925, Length: 85
+========================================
+Generation 1000
+Binary Strings:
+0: 1110101101
+1: 0000000000
+2: 0110110111
+3: 0000100110
+4: 1001100100
+5: 0110110110
+6: 1001101111
+7: 0001110001
+8: 1001111110
+Ring Vertices:
+0: (2,1) -> (2,2) -> (2,3) -> (1,3) -> (0,3) -> (0,2) -> (1,2) -> (1,1) -> (0,1) -> (0,0) -> (1,0) -> (2,0) -> (3,0) -> (3,1) -> (2,1)
+1:
+2: (2,0) -> (3,0) -> (3,1) -> (3,2) -> (3,3) -> (2,3) -> (1,3) -> (1,2) -> (1,1) -> (2,1) -> (2,0)
+3: (3,2) -> (2,2) -> (2,1) -> (2,0) -> (1,0) -> (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) -> (3,2)
+4: (2,0) -> (1,0) -> (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+5: (2,0) -> (1,0) -> (1,1) -> (1,2) -> (2,2) -> (2,3) -> (3,3) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+6: (3,2) -> (3,3) -> (2,3) -> (1,3) -> (0,3) -> (0,2) -> (0,1) -> (0,0) -> (1,0) -> (1,1) -> (2,1) -> (2,2) -> (3,2)
+7: (2,1) -> (3,1) -> (3,2) -> (2,2) -> (1,2) -> (0,2) -> (0,1) -> (1,1) -> (2,1)
+8: (3,2) -> (2,2) -> (2,1) -> (1,1) -> (1,0) -> (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (3,3) -> (3,2)
+Ring Visualizations:
+Visualization of ring 0:
+→ → → ↓
+↑ ← ↓ ←
+→ ↑ ↓ .
+↑ ← ← .
+
+Visualization of ring 1:
+. . . .
+. . . .
+. . . .
+. . . .
+
+Visualization of ring 2:
+. . → ↓
+. → ↑ ↓
+. ↑ . ↓
+. ↑ ← ←
+
+Visualization of ring 3:
+. ↓ ← .
+. ↓ ↑ .
+. ↓ ↑ ←
+. → → ↑
+
+Visualization of ring 4:
+↓ ← ← ←
+↓ . . ↑
+→ → → ↑
+. . . .
+
+Visualization of ring 5:
+. ↓ ← ←
+. ↓ . ↑
+. → ↓ ↑
+. . → ↑
+
+Visualization of ring 6:
+→ ↓ . .
+↑ → ↓ .
+↑ . → ↓
+↑ ← ← ←
+
+Visualization of ring 7:
+. . . .
+→ → → ↓
+↑ ← ← ←
+. . . .
+
+Visualization of ring 8:
+↓ ← . .
+↓ ↑ ← .
+↓ . ↑ ←
+→ → → ↑
+
+Score: 3.775, Distance: 2.925, Length: 85
+========================================
+Generation 100
+Binary Strings:
+0: 0110010110
+1: 0000001000
+2: 1110110111
+3: 1111111101
+4: 0100000000
+5: 0011111000
+6: 1001101110
+7: 1111000000
+8: 0000101111
+Ring Vertices:
+0: (2,0) -> (1,0) -> (1,1) -> (2,1) -> (2,2) -> (1,2) -> (1,3) -> (2,3) -> (3,3) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+1: (1,2) -> (0,2) -> (0,3) -> (1,3) -> (1,2)
+2: (2,0) -> (3,0) -> (3,1) -> (3,2) -> (3,3) -> (2,3) -> (1,3) -> (1,2) -> (1,1) -> (0,1) -> (0,0) -> (1,0) -> (2,0)
+3: (2,0) -> (3,0) -> (3,1) -> (3,2) -> (2,2) -> (2,3) -> (1,3) -> (0,3) -> (0,2) -> (0,1) -> (0,0) -> (1,0) -> (2,0)
+4: (1,1) -> (2,1) -> (2,0) -> (1,0) -> (1,1)
+5: (2,0) -> (2,1) -> (1,1) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (1,2) -> (2,2) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+6: (3,2) -> (2,2) -> (2,1) -> (1,1) -> (1,0) -> (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (3,3) -> (3,2)
+7: (2,1) -> (3,1) -> (3,0) -> (2,0) -> (1,0) -> (0,0) -> (0,1) -> (0,2) -> (1,2) -> (1,1) -> (2,1)
+8: (2,3) -> (1,3) -> (0,3) -> (0,2) -> (1,2) -> (1,1) -> (2,1) -> (2,2) -> (3,2) -> (3,3) -> (2,3)
+Ring Visualizations:
+Visualization of ring 0:
+. ↓ ← ←
+. → ↓ ↑
+. ↓ ← ↑
+. → → ↑
+
+Visualization of ring 1:
+. . . .
+. . . .
+↓ ← . .
+→ ↑ . .
+
+Visualization of ring 2:
+→ → → ↓
+↑ ← . ↓
+. ↑ . ↓
+. ↑ ← ←
+
+Visualization of ring 3:
+→ → → ↓
+↑ . . ↓
+↑ . ↓ ←
+↑ ← ← .
+
+Visualization of ring 4:
+. ↓ ← .
+. → ↑ .
+. . . .
+. . . .
+
+Visualization of ring 5:
+. . ↓ ←
+↓ ← ← ↑
+↓ → → ↑
+→ ↑ . .
+
+Visualization of ring 6:
+↓ ← . .
+↓ ↑ ← .
+↓ . ↑ ←
+→ → → ↑
+
+Visualization of ring 7:
+↓ ← ← ←
+↓ → → ↑
+→ ↑ . .
+. . . .
+
+Visualization of ring 8:
+. . . .
+. → ↓ .
+→ ↑ → ↓
+↑ ← ← ←
+
+Score: 3.8966666666666665, Distance: 3.0166666666666666, Length: 88
+========================================
+Generation 200
+Binary Strings:
+0: 0110110110
+1: 0000000000
+2: 0000011111
+3: 0010000001
+4: 0000010000
+5: 0001111100
+6: 1001101000
+7: 0001000000
+8: 0000110011
+Ring Vertices:
+0: (2,0) -> (1,0) -> (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+1:
+2: (2,1) -> (3,1) -> (3,2) -> (3,3) -> (2,3) -> (1,3) -> (1,2) -> (1,1) -> (0,1) -> (0,0) -> (1,0) -> (2,0) -> (2,1)
+3: (2,1) -> (2,2) -> (2,3) -> (1,3) -> (0,3) -> (0,2) -> (0,1) -> (0,0) -> (1,0) -> (2,0) -> (3,0) -> (3,1) -> (2,1)
+4: (2,2) -> (1,2) -> (1,3) -> (2,3) -> (2,2)
+5: (2,0) -> (2,1) -> (1,1) -> (1,2) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (2,2) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+6: (3,2) -> (2,2) -> (2,1) -> (1,1) -> (1,0) -> (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (3,3) -> (3,2)
+7: (2,1) -> (3,1) -> (3,0) -> (2,0) -> (1,0) -> (0,0) -> (0,1) -> (0,2) -> (1,2) -> (1,1) -> (2,1)
+8: (2,3) -> (1,3) -> (0,3) -> (0,2) -> (1,2) -> (1,1) -> (2,1) -> (2,2) -> (3,2) -> (3,3) -> (2,3)
+Ring Visualizations:
+Visualization of ring 0:
+. ↓ ← ←
+. ↓ . ↑
+. ↓ . ↑
+. → → ↑
+
+Visualization of ring 1:
+. . . .
+. . . .
+. . . .
+. . . .
+
+Visualization of ring 2:
+→ → ↓ .
+↑ ← → ↓
+. ↑ . ↓
+. ↑ ← ←
+
+Visualization of ring 3:
+→ → → ↓
+↑ . ↓ ←
+↑ . ↓ .
+↑ ← ← .
+
+Visualization of ring 4:
+. . . .
+. . . .
+. ↓ ← .
+. → ↑ .
+
+Visualization of ring 5:
+. . ↓ ←
+. ↓ ← ↑
+↓ ← → ↑
+→ → ↑ .
+
+Visualization of ring 6:
+↓ ← . .
+↓ ↑ ← .
+↓ . ↑ ←
+→ → → ↑
+
+Visualization of ring 7:
+↓ ← ← ←
+↓ → → ↑
+→ ↑ . .
+. . . .
+
+Visualization of ring 8:
+. . . .
+. → ↓ .
+→ ↑ → ↓
+↑ ← ← ←
+
+Score: 3.8183333333333334, Distance: 3.0083333333333333, Length: 81
+========================================
+Generation 300
+Binary Strings:
+0: 0110110110
+1: 0000000000
+2: 0000011111
+3: 0010000001
+4: 0000010000
+5: 0001111100
+6: 1001101000
+7: 0001000000
+8: 0000110011
+Ring Vertices:
+0: (2,0) -> (1,0) -> (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+1:
+2: (2,1) -> (3,1) -> (3,2) -> (3,3) -> (2,3) -> (1,3) -> (1,2) -> (1,1) -> (0,1) -> (0,0) -> (1,0) -> (2,0) -> (2,1)
+3: (2,1) -> (2,2) -> (2,3) -> (1,3) -> (0,3) -> (0,2) -> (0,1) -> (0,0) -> (1,0) -> (2,0) -> (3,0) -> (3,1) -> (2,1)
+4: (2,2) -> (1,2) -> (1,3) -> (2,3) -> (2,2)
+5: (2,0) -> (2,1) -> (1,1) -> (1,2) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (2,2) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+6: (3,2) -> (2,2) -> (2,1) -> (1,1) -> (1,0) -> (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (3,3) -> (3,2)
+7: (2,1) -> (3,1) -> (3,0) -> (2,0) -> (1,0) -> (0,0) -> (0,1) -> (0,2) -> (1,2) -> (1,1) -> (2,1)
+8: (2,3) -> (1,3) -> (0,3) -> (0,2) -> (1,2) -> (1,1) -> (2,1) -> (2,2) -> (3,2) -> (3,3) -> (2,3)
+Ring Visualizations:
+Visualization of ring 0:
+. ↓ ← ←
+. ↓ . ↑
+. ↓ . ↑
+. → → ↑
+
+Visualization of ring 1:
+. . . .
+. . . .
+. . . .
+. . . .
+
+Visualization of ring 2:
+→ → ↓ .
+↑ ← → ↓
+. ↑ . ↓
+. ↑ ← ←
+
+Visualization of ring 3:
+→ → → ↓
+↑ . ↓ ←
+↑ . ↓ .
+↑ ← ← .
+
+Visualization of ring 4:
+. . . .
+. . . .
+. ↓ ← .
+. → ↑ .
+
+Visualization of ring 5:
+. . ↓ ←
+. ↓ ← ↑
+↓ ← → ↑
+→ → ↑ .
+
+Visualization of ring 6:
+↓ ← . .
+↓ ↑ ← .
+↓ . ↑ ←
+→ → → ↑
+
+Visualization of ring 7:
+↓ ← ← ←
+↓ → → ↑
+→ ↑ . .
+. . . .
+
+Visualization of ring 8:
+. . . .
+. → ↓ .
+→ ↑ → ↓
+↑ ← ← ←
+
+Score: 3.8183333333333334, Distance: 3.0083333333333333, Length: 81
+========================================
+Generation 400
+Binary Strings:
+0: 0110110110
+1: 0000000000
+2: 0000011111
+3: 0010000001
+4: 0000010000
+5: 0001111100
+6: 1001101000
+7: 0001000000
+8: 0000110011
+Ring Vertices:
+0: (2,0) -> (1,0) -> (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+1:
+2: (2,1) -> (3,1) -> (3,2) -> (3,3) -> (2,3) -> (1,3) -> (1,2) -> (1,1) -> (0,1) -> (0,0) -> (1,0) -> (2,0) -> (2,1)
+3: (2,1) -> (2,2) -> (2,3) -> (1,3) -> (0,3) -> (0,2) -> (0,1) -> (0,0) -> (1,0) -> (2,0) -> (3,0) -> (3,1) -> (2,1)
+4: (2,2) -> (1,2) -> (1,3) -> (2,3) -> (2,2)
+5: (2,0) -> (2,1) -> (1,1) -> (1,2) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (2,2) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+6: (3,2) -> (2,2) -> (2,1) -> (1,1) -> (1,0) -> (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (3,3) -> (3,2)
+7: (2,1) -> (3,1) -> (3,0) -> (2,0) -> (1,0) -> (0,0) -> (0,1) -> (0,2) -> (1,2) -> (1,1) -> (2,1)
+8: (2,3) -> (1,3) -> (0,3) -> (0,2) -> (1,2) -> (1,1) -> (2,1) -> (2,2) -> (3,2) -> (3,3) -> (2,3)
+Ring Visualizations:
+Visualization of ring 0:
+. ↓ ← ←
+. ↓ . ↑
+. ↓ . ↑
+. → → ↑
+
+Visualization of ring 1:
+. . . .
+. . . .
+. . . .
+. . . .
+
+Visualization of ring 2:
+→ → ↓ .
+↑ ← → ↓
+. ↑ . ↓
+. ↑ ← ←
+
+Visualization of ring 3:
+→ → → ↓
+↑ . ↓ ←
+↑ . ↓ .
+↑ ← ← .
+
+Visualization of ring 4:
+. . . .
+. . . .
+. ↓ ← .
+. → ↑ .
+
+Visualization of ring 5:
+. . ↓ ←
+. ↓ ← ↑
+↓ ← → ↑
+→ → ↑ .
+
+Visualization of ring 6:
+↓ ← . .
+↓ ↑ ← .
+↓ . ↑ ←
+→ → → ↑
+
+Visualization of ring 7:
+↓ ← ← ←
+↓ → → ↑
+→ ↑ . .
+. . . .
+
+Visualization of ring 8:
+. . . .
+. → ↓ .
+→ ↑ → ↓
+↑ ← ← ←
+
+Score: 3.8183333333333334, Distance: 3.0083333333333333, Length: 81
+========================================
+Generation 500
+Binary Strings:
+0: 0110110110
+1: 0000001000
+2: 0110110111
+3: 1111101101
+4: 0000000000
+5: 0000110100
+6: 1001111110
+7: 0110100000
+8: 0000101111
+Ring Vertices:
+0: (2,0) -> (1,0) -> (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+1: (1,2) -> (0,2) -> (0,3) -> (1,3) -> (1,2)
+2: (2,0) -> (3,0) -> (3,1) -> (3,2) -> (3,3) -> (2,3) -> (1,3) -> (1,2) -> (1,1) -> (1,0) -> (2,0)
+3: (2,1) -> (2,2) -> (2,3) -> (1,3) -> (0,3) -> (0,2) -> (0,1) -> (0,0) -> (1,0) -> (2,0) -> (3,0) -> (3,1) -> (2,1)
+4:
+5: (2,0) -> (2,1) -> (1,1) -> (1,2) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (2,2) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+6: (3,2) -> (2,2) -> (2,1) -> (1,1) -> (1,0) -> (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (3,3) -> (3,2)
+7: (2,1) -> (3,1) -> (3,0) -> (2,0) -> (1,0) -> (0,0) -> (0,1) -> (0,2) -> (1,2) -> (1,1) -> (2,1)
+8: (2,3) -> (1,3) -> (0,3) -> (0,2) -> (1,2) -> (1,1) -> (2,1) -> (2,2) -> (3,2) -> (3,3) -> (2,3)
+Ring Visualizations:
+Visualization of ring 0:
+. ↓ ← ←
+. ↓ . ↑
+. ↓ . ↑
+. → → ↑
+
+Visualization of ring 1:
+. . . .
+. . . .
+↓ ← . .
+→ ↑ . .
+
+Visualization of ring 2:
+. → → ↓
+. ↑ . ↓
+. ↑ . ↓
+. ↑ ← ←
+
+Visualization of ring 3:
+→ → → ↓
+↑ . ↓ ←
+↑ . ↓ .
+↑ ← ← .
+
+Visualization of ring 4:
+. . . .
+. . . .
+. . . .
+. . . .
+
+Visualization of ring 5:
+. . ↓ ←
+. ↓ ← ↑
+↓ ← → ↑
+→ → ↑ .
+
+Visualization of ring 6:
+↓ ← . .
+↓ ↑ ← .
+↓ . ↑ ←
+→ → → ↑
+
+Visualization of ring 7:
+↓ ← ← ←
+↓ → → ↑
+→ ↑ . .
+. . . .
+
+Visualization of ring 8:
+. . . .
+. → ↓ .
+→ ↑ → ↓
+↑ ← ← ←
+
+Score: 3.815, Distance: 3.025, Length: 79
+========================================
+Generation 600
+Binary Strings:
+0: 0110110110
+1: 0000001000
+2: 0110110111
+3: 1111101101
+4: 0000000000
+5: 0000110100
+6: 1001111110
+7: 0110100000
+8: 0000101111
+Ring Vertices:
+0: (2,0) -> (1,0) -> (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+1: (1,2) -> (0,2) -> (0,3) -> (1,3) -> (1,2)
+2: (2,0) -> (3,0) -> (3,1) -> (3,2) -> (3,3) -> (2,3) -> (1,3) -> (1,2) -> (1,1) -> (1,0) -> (2,0)
+3: (2,1) -> (2,2) -> (2,3) -> (1,3) -> (0,3) -> (0,2) -> (0,1) -> (0,0) -> (1,0) -> (2,0) -> (3,0) -> (3,1) -> (2,1)
+4:
+5: (2,0) -> (2,1) -> (1,1) -> (1,2) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (2,2) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+6: (3,2) -> (2,2) -> (2,1) -> (1,1) -> (1,0) -> (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (3,3) -> (3,2)
+7: (2,1) -> (3,1) -> (3,0) -> (2,0) -> (1,0) -> (0,0) -> (0,1) -> (0,2) -> (1,2) -> (1,1) -> (2,1)
+8: (2,3) -> (1,3) -> (0,3) -> (0,2) -> (1,2) -> (1,1) -> (2,1) -> (2,2) -> (3,2) -> (3,3) -> (2,3)
+Ring Visualizations:
+Visualization of ring 0:
+. ↓ ← ←
+. ↓ . ↑
+. ↓ . ↑
+. → → ↑
+
+Visualization of ring 1:
+. . . .
+. . . .
+↓ ← . .
+→ ↑ . .
+
+Visualization of ring 2:
+. → → ↓
+. ↑ . ↓
+. ↑ . ↓
+. ↑ ← ←
+
+Visualization of ring 3:
+→ → → ↓
+↑ . ↓ ←
+↑ . ↓ .
+↑ ← ← .
+
+Visualization of ring 4:
+. . . .
+. . . .
+. . . .
+. . . .
+
+Visualization of ring 5:
+. . ↓ ←
+. ↓ ← ↑
+↓ ← → ↑
+→ → ↑ .
+
+Visualization of ring 6:
+↓ ← . .
+↓ ↑ ← .
+↓ . ↑ ←
+→ → → ↑
+
+Visualization of ring 7:
+↓ ← ← ←
+↓ → → ↑
+→ ↑ . .
+. . . .
+
+Visualization of ring 8:
+. . . .
+. → ↓ .
+→ ↑ → ↓
+↑ ← ← ←
+
+Score: 3.815, Distance: 3.025, Length: 79
+========================================
+Generation 700
+Binary Strings:
+0: 0110110110
+1: 0000001000
+2: 0110110111
+3: 1111101101
+4: 0000000000
+5: 0000110100
+6: 1001111110
+7: 0110100000
+8: 0000101111
+Ring Vertices:
+0: (2,0) -> (1,0) -> (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+1: (1,2) -> (0,2) -> (0,3) -> (1,3) -> (1,2)
+2: (2,0) -> (3,0) -> (3,1) -> (3,2) -> (3,3) -> (2,3) -> (1,3) -> (1,2) -> (1,1) -> (1,0) -> (2,0)
+3: (2,1) -> (2,2) -> (2,3) -> (1,3) -> (0,3) -> (0,2) -> (0,1) -> (0,0) -> (1,0) -> (2,0) -> (3,0) -> (3,1) -> (2,1)
+4:
+5: (2,0) -> (2,1) -> (1,1) -> (1,2) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (2,2) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+6: (3,2) -> (2,2) -> (2,1) -> (1,1) -> (1,0) -> (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (3,3) -> (3,2)
+7: (2,1) -> (3,1) -> (3,0) -> (2,0) -> (1,0) -> (0,0) -> (0,1) -> (0,2) -> (1,2) -> (1,1) -> (2,1)
+8: (2,3) -> (1,3) -> (0,3) -> (0,2) -> (1,2) -> (1,1) -> (2,1) -> (2,2) -> (3,2) -> (3,3) -> (2,3)
+Ring Visualizations:
+Visualization of ring 0:
+. ↓ ← ←
+. ↓ . ↑
+. ↓ . ↑
+. → → ↑
+
+Visualization of ring 1:
+. . . .
+. . . .
+↓ ← . .
+→ ↑ . .
+
+Visualization of ring 2:
+. → → ↓
+. ↑ . ↓
+. ↑ . ↓
+. ↑ ← ←
+
+Visualization of ring 3:
+→ → → ↓
+↑ . ↓ ←
+↑ . ↓ .
+↑ ← ← .
+
+Visualization of ring 4:
+. . . .
+. . . .
+. . . .
+. . . .
+
+Visualization of ring 5:
+. . ↓ ←
+. ↓ ← ↑
+↓ ← → ↑
+→ → ↑ .
+
+Visualization of ring 6:
+↓ ← . .
+↓ ↑ ← .
+↓ . ↑ ←
+→ → → ↑
+
+Visualization of ring 7:
+↓ ← ← ←
+↓ → → ↑
+→ ↑ . .
+. . . .
+
+Visualization of ring 8:
+. . . .
+. → ↓ .
+→ ↑ → ↓
+↑ ← ← ←
+
+Score: 3.815, Distance: 3.025, Length: 79
+========================================
+Generation 800
+Binary Strings:
+0: 0110110110
+1: 0000001000
+2: 0110110111
+3: 1111101101
+4: 0000000000
+5: 0000110100
+6: 1001111110
+7: 0110100000
+8: 0000101111
+Ring Vertices:
+0: (2,0) -> (1,0) -> (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+1: (1,2) -> (0,2) -> (0,3) -> (1,3) -> (1,2)
+2: (2,0) -> (3,0) -> (3,1) -> (3,2) -> (3,3) -> (2,3) -> (1,3) -> (1,2) -> (1,1) -> (1,0) -> (2,0)
+3: (2,1) -> (2,2) -> (2,3) -> (1,3) -> (0,3) -> (0,2) -> (0,1) -> (0,0) -> (1,0) -> (2,0) -> (3,0) -> (3,1) -> (2,1)
+4:
+5: (2,0) -> (2,1) -> (1,1) -> (1,2) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (2,2) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+6: (3,2) -> (2,2) -> (2,1) -> (1,1) -> (1,0) -> (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (3,3) -> (3,2)
+7: (2,1) -> (3,1) -> (3,0) -> (2,0) -> (1,0) -> (0,0) -> (0,1) -> (0,2) -> (1,2) -> (1,1) -> (2,1)
+8: (2,3) -> (1,3) -> (0,3) -> (0,2) -> (1,2) -> (1,1) -> (2,1) -> (2,2) -> (3,2) -> (3,3) -> (2,3)
+Ring Visualizations:
+Visualization of ring 0:
+. ↓ ← ←
+. ↓ . ↑
+. ↓ . ↑
+. → → ↑
+
+Visualization of ring 1:
+. . . .
+. . . .
+↓ ← . .
+→ ↑ . .
+
+Visualization of ring 2:
+. → → ↓
+. ↑ . ↓
+. ↑ . ↓
+. ↑ ← ←
+
+Visualization of ring 3:
+→ → → ↓
+↑ . ↓ ←
+↑ . ↓ .
+↑ ← ← .
+
+Visualization of ring 4:
+. . . .
+. . . .
+. . . .
+. . . .
+
+Visualization of ring 5:
+. . ↓ ←
+. ↓ ← ↑
+↓ ← → ↑
+→ → ↑ .
+
+Visualization of ring 6:
+↓ ← . .
+↓ ↑ ← .
+↓ . ↑ ←
+→ → → ↑
+
+Visualization of ring 7:
+↓ ← ← ←
+↓ → → ↑
+→ ↑ . .
+. . . .
+
+Visualization of ring 8:
+. . . .
+. → ↓ .
+→ ↑ → ↓
+↑ ← ← ←
+
+Score: 3.815, Distance: 3.025, Length: 79
+========================================
+Generation 900
+Binary Strings:
+0: 0110110110
+1: 0000001000
+2: 0110110111
+3: 1111101101
+4: 0000000000
+5: 0000110100
+6: 1001111110
+7: 0110100000
+8: 0000101111
+Ring Vertices:
+0: (2,0) -> (1,0) -> (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+1: (1,2) -> (0,2) -> (0,3) -> (1,3) -> (1,2)
+2: (2,0) -> (3,0) -> (3,1) -> (3,2) -> (3,3) -> (2,3) -> (1,3) -> (1,2) -> (1,1) -> (1,0) -> (2,0)
+3: (2,1) -> (2,2) -> (2,3) -> (1,3) -> (0,3) -> (0,2) -> (0,1) -> (0,0) -> (1,0) -> (2,0) -> (3,0) -> (3,1) -> (2,1)
+4:
+5: (2,0) -> (2,1) -> (1,1) -> (1,2) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (2,2) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+6: (3,2) -> (2,2) -> (2,1) -> (1,1) -> (1,0) -> (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (3,3) -> (3,2)
+7: (2,1) -> (3,1) -> (3,0) -> (2,0) -> (1,0) -> (0,0) -> (0,1) -> (0,2) -> (1,2) -> (1,1) -> (2,1)
+8: (2,3) -> (1,3) -> (0,3) -> (0,2) -> (1,2) -> (1,1) -> (2,1) -> (2,2) -> (3,2) -> (3,3) -> (2,3)
+Ring Visualizations:
+Visualization of ring 0:
+. ↓ ← ←
+. ↓ . ↑
+. ↓ . ↑
+. → → ↑
+
+Visualization of ring 1:
+. . . .
+. . . .
+↓ ← . .
+→ ↑ . .
+
+Visualization of ring 2:
+. → → ↓
+. ↑ . ↓
+. ↑ . ↓
+. ↑ ← ←
+
+Visualization of ring 3:
+→ → → ↓
+↑ . ↓ ←
+↑ . ↓ .
+↑ ← ← .
+
+Visualization of ring 4:
+. . . .
+. . . .
+. . . .
+. . . .
+
+Visualization of ring 5:
+. . ↓ ←
+. ↓ ← ↑
+↓ ← → ↑
+→ → ↑ .
+
+Visualization of ring 6:
+↓ ← . .
+↓ ↑ ← .
+↓ . ↑ ←
+→ → → ↑
+
+Visualization of ring 7:
+↓ ← ← ←
+↓ → → ↑
+→ ↑ . .
+. . . .
+
+Visualization of ring 8:
+. . . .
+. → ↓ .
+→ ↑ → ↓
+↑ ← ← ←
+
+Score: 3.815, Distance: 3.025, Length: 79
+========================================
+Generation 1000
+Binary Strings:
+0: 0110110110
+1: 0000001000
+2: 0110110111
+3: 1111101101
+4: 0000000000
+5: 0000110100
+6: 1001111110
+7: 0110100000
+8: 0000101111
+Ring Vertices:
+0: (2,0) -> (1,0) -> (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+1: (1,2) -> (0,2) -> (0,3) -> (1,3) -> (1,2)
+2: (2,0) -> (3,0) -> (3,1) -> (3,2) -> (3,3) -> (2,3) -> (1,3) -> (1,2) -> (1,1) -> (1,0) -> (2,0)
+3: (2,1) -> (2,2) -> (2,3) -> (1,3) -> (0,3) -> (0,2) -> (0,1) -> (0,0) -> (1,0) -> (2,0) -> (3,0) -> (3,1) -> (2,1)
+4:
+5: (2,0) -> (2,1) -> (1,1) -> (1,2) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (2,2) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+6: (3,2) -> (2,2) -> (2,1) -> (1,1) -> (1,0) -> (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (3,3) -> (3,2)
+7: (2,1) -> (3,1) -> (3,0) -> (2,0) -> (1,0) -> (0,0) -> (0,1) -> (0,2) -> (1,2) -> (1,1) -> (2,1)
+8: (2,3) -> (1,3) -> (0,3) -> (0,2) -> (1,2) -> (1,1) -> (2,1) -> (2,2) -> (3,2) -> (3,3) -> (2,3)
+Ring Visualizations:
+Visualization of ring 0:
+. ↓ ← ←
+. ↓ . ↑
+. ↓ . ↑
+. → → ↑
+
+Visualization of ring 1:
+. . . .
+. . . .
+↓ ← . .
+→ ↑ . .
+
+Visualization of ring 2:
+. → → ↓
+. ↑ . ↓
+. ↑ . ↓
+. ↑ ← ←
+
+Visualization of ring 3:
+→ → → ↓
+↑ . ↓ ←
+↑ . ↓ .
+↑ ← ← .
+
+Visualization of ring 4:
+. . . .
+. . . .
+. . . .
+. . . .
+
+Visualization of ring 5:
+. . ↓ ←
+. ↓ ← ↑
+↓ ← → ↑
+→ → ↑ .
+
+Visualization of ring 6:
+↓ ← . .
+↓ ↑ ← .
+↓ . ↑ ←
+→ → → ↑
+
+Visualization of ring 7:
+↓ ← ← ←
+↓ → → ↑
+→ ↑ . .
+. . . .
+
+Visualization of ring 8:
+. . . .
+. → ↓ .
+→ ↑ → ↓
+↑ ← ← ←
+
+Score: 3.815, Distance: 3.025, Length: 79
+========================================
+Generation 100
+Binary Strings:
+0: 00000000000000000010000100
+1: 00000000000000000010000001
+2: 11111100101001101010111100
+3: 00000000110011101101010111
+4: 00000000010001100000000001
+5: 00000000000000010000110000
+6: 00000100001000000000000000
+7: 01100011000110000110001111
+8: 11100101001100011000110000
+9: 00000011000011100000000001
+10: 01100000000000000000000000
+11: 00000000000000000001000010
+12: 01011011011101111101001110
+13: 00000000000000000100001000
+14: 11111101100001001111110011
+15: 00000001001110011000010000
+16: 00011011111111010100000000
+17: 00000000100000000000000000
+18: 00000100001000011111010011
+19: 01100011111100100111001110
+20: 00000000000000000000000101
+21: 00000000010001100001000011
+22: 00010111101111000000000001
+Ring Vertices:
+0: (3,4) -> (3,5) -> (4,5) -> (4,4) -> (4,3) -> (3,3) -> (3,4)
+1: (4,3) -> (4,4) -> (3,4) -> (3,3) -> (4,3)
+2: (2,1) -> (1,1) -> (1,2) -> (1,3) -> (1,4) -> (0,4) -> (0,5) -> (1,5) -> (2,5) -> (3,5) -> (4,5) -> (4,4) -> (4,3) -> (5,3) -> (5,2) -> (4,2) -> (4,1) -> (5,1) -> (5,0) -> (4,0) -> (3,0) -> (2,0) -> (1,0) -> (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (2,4) -> (3,4) -> (3,3) -> (3,2) -> (3,1) -> (2,1)
+3: (2,2) -> (3,2) -> (3,1) -> (4,1) -> (5,1) -> (5,2) -> (5,3) -> (5,4) -> (5,5) -> (4,5) -> (3,5) -> (3,4) -> (2,4) -> (2,5) -> (1,5) -> (1,4) -> (1,3) -> (2,3) -> (2,2)
+4: (5,2) -> (5,3) -> (4,3) -> (3,3) -> (3,2) -> (4,2) -> (4,1) -> (5,1) -> (5,2)
+5: (2,4) -> (1,4) -> (1,3) -> (0,3) -> (0,4) -> (0,5) -> (1,5) -> (2,5) -> (2,4)
+6: (0,1) -> (0,2) -> (0,3) -> (1,3) -> (1,2) -> (1,1) -> (0,1)
+7: (2,0) -> (3,0) -> (3,1) -> (3,2) -> (3,3) -> (4,3) -> (4,4) -> (5,4) -> (5,5) -> (4,5) -> (3,5) -> (2,5) -> (2,4) -> (2,3) -> (1,3) -> (1,2) -> (1,1) -> (1,0) -> (2,0)
+8: (2,0) -> (1,0) -> (0,0) -> (0,1) -> (0,2) -> (0,3) -> (0,4) -> (0,5) -> (1,5) -> (2,5) -> (2,4) -> (2,3) -> (2,2) -> (1,2) -> (1,1) -> (2,1) -> (2,2) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+9: (2,1) -> (3,1) -> (3,2) -> (4,2) -> (5,2) -> (5,3) -> (4,3) -> (3,3) -> (2,3) -> (2,2) -> (1,2) -> (1,1) -> (2,1)
+10: (2,1) -> (3,1) -> (3,0) -> (2,0) -> (1,0) -> (1,1) -> (2,1)
+11: (4,4) -> (4,5) -> (5,5) -> (5,4) -> (5,3) -> (4,3) -> (4,4)
+12: (2,1) -> (2,0) -> (1,0) -> (1,1) -> (1,2) -> (0,2) -> (0,3) -> (0,4) -> (1,4) -> (2,4) -> (2,5) -> (3,5) -> (4,5) -> (5,5) -> (5,4) -> (5,3) -> (5,2) -> (5,1) -> (5,0) -> (4,0) -> (3,0) -> (3,1) -> (2,1)
+13: (3,4) -> (3,3) -> (2,3) -> (2,4) -> (2,5) -> (3,5) -> (3,4)
+14: (5,0) -> (5,1) -> (4,1) -> (4,2) -> (4,3) -> (5,3) -> (5,4) -> (5,5) -> (4,5) -> (4,4) -> (3,4) -> (2,4) -> (2,5) -> (1,5) -> (0,5) -> (0,4) -> (1,4) -> (1,3) -> (2,3) -> (3,3) -> (3,2) -> (2,2) -> (2,1) -> (1,1) -> (1,2) -> (0,2) -> (0,1) -> (0,0) -> (1,0) -> (2,0) -> (3,0) -> (4,0) -> (5,0)
+15: (2,1) -> (2,2) -> (1,2) -> (0,2) -> (0,3) -> (0,4) -> (1,4) -> (1,5) -> (2,5) -> (2,4) -> (2,3) -> (3,3) -> (3,2) -> (3,1) -> (2,1)
+16: (2,1) -> (1,1) -> (1,2) -> (0,2) -> (0,3) -> (0,4) -> (1,4) -> (1,3) -> (2,3) -> (2,4) -> (3,4) -> (3,3) -> (4,3) -> (4,2) -> (5,2) -> (5,1) -> (5,0) -> (4,0) -> (3,0) -> (3,1) -> (2,1)
+17: (3,1) -> (3,2) -> (4,2) -> (4,1) -> (3,1)
+18: (2,4) -> (2,5) -> (1,5) -> (1,4) -> (0,4) -> (0,3) -> (0,2) -> (0,1) -> (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) -> (4,3) -> (5,3) -> (5,4) -> (5,5) -> (4,5) -> (4,4) -> (3,4) -> (2,4)
+19: (2,2) -> (2,3) -> (3,3) -> (4,3) -> (4,2) -> (3,2) -> (2,2)
+20: (4,4) -> (4,5) -> (3,5) -> (3,4) -> (4,4)
+21: (5,2) -> (5,3) -> (5,4) -> (5,5) -> (4,5) -> (4,4) -> (4,3) -> (3,3) -> (3,2) -> (4,2) -> (4,1) -> (5,1) -> (5,2)
+22: (4,0) -> (4,1) -> (4,2) -> (4,3) -> (3,3) -> (2,3) -> (1,3) -> (0,3) -> (0,2) -> (0,1) -> (1,1) -> (2,1) -> (3,1) -> (3,0) -> (4,0)
+Ring Visualizations:
+Visualization of ring 0:
+. . . . . .
+. . . . . .
+. . . . . .
+. . . ↓ ← .
+. . . ↓ ↑ .
+. . . → ↑ .
+
+Visualization of ring 1:
+. . . . . .
+. . . . . .
+. . . . . .
+. . . → ↓ .
+. . . ↑ ← .
+. . . . . .
+
+Visualization of ring 2:
+↓ ← ← ← ← ←
+↓ ↓ ← ← → ↑
+↓ ↓ . ↑ ↑ ←
+→ → ↓ ↑ → ↑
+↓ ← → ↑ ↑ .
+→ → → → ↑ .
+
+Visualization of ring 3:
+. . . . . .
+. . . → → ↓
+. . → ↑ . ↓
+. → ↑ . . ↓
+. ↑ ↓ ← . ↓
+. ↑ ← ↑ ← ←
+
+Visualization of ring 4:
+. . . . . .
+. . . . → ↓
+. . . → ↑ ↓
+. . . ↑ ← ←
+. . . . . .
+. . . . . .
+
+Visualization of ring 5:
+. . . . . .
+. . . . . .
+. . . . . .
+↓ ← . . . .
+↓ ↑ ← . . .
+→ → ↑ . . .
+
+Visualization of ring 6:
+. . . . . .
+↓ ← . . . .
+↓ ↑ . . . .
+→ ↑ . . . .
+. . . . . .
+. . . . . .
+
+Visualization of ring 7:
+. → → ↓ . .
+. ↑ . ↓ . .
+. ↑ . ↓ . .
+. ↑ ← → ↓ .
+. . ↑ . → ↓
+. . ↑ ← ← ←
+
+Visualization of ring 8:
+↓ ← ← ← . .
+↓ → ↓ ↑ . .
+↓ ↑ → ↑ . .
+↓ . ↑ . . .
+↓ . ↑ . . .
+→ → ↑ . . .
+
+Visualization of ring 9:
+. . . . . .
+. → → ↓ . .
+. ↑ ← → → ↓
+. . ↑ ← ← ←
+. . . . . .
+. . . . . .
+
+Visualization of ring 10:
+. ↓ ← ← . .
+. → → ↑ . .
+. . . . . .
+. . . . . .
+. . . . . .
+. . . . . .
+
+Visualization of ring 11:
+. . . . . .
+. . . . . .
+. . . . . .
+. . . . ↓ ←
+. . . . ↓ ↑
+. . . . → ↑
+
+Visualization of ring 12:
+. ↓ ← ↓ ← ←
+. ↓ ↑ ← . ↑
+↓ ← . . . ↑
+↓ . . . . ↑
+→ → ↓ . . ↑
+. . → → → ↑
+
+Visualization of ring 13:
+. . . . . .
+. . . . . .
+. . . . . .
+. . ↓ ← . .
+. . ↓ ↑ . .
+. . → ↑ . .
+
+Visualization of ring 14:
+→ → → → → ↓
+↑ ↓ ← . ↓ ←
+↑ ← ↑ ← ↓ .
+. → → ↑ → ↓
+→ ↑ ↓ ← ← ↓
+↑ ← ← . ↑ ←
+
+Visualization of ring 15:
+. . . . . .
+. . ↓ ← . .
+↓ ← ← ↑ . .
+↓ . → ↑ . .
+→ ↓ ↑ . . .
+. → ↑ . . .
+
+Visualization of ring 16:
+. . . ↓ ← ←
+. ↓ ← ← . ↑
+↓ ← . . → ↑
+↓ → ↓ → ↑ .
+→ ↑ → ↑ . .
+. . . . . .
+
+Visualization of ring 17:
+. . . . . .
+. . . ↓ ← .
+. . . → ↑ .
+. . . . . .
+. . . . . .
+. . . . . .
+
+Visualization of ring 18:
+. . . . . .
+→ ↓ . . . .
+↑ ↓ . . . .
+↑ → → → → ↓
+↑ ← ↓ ← ← ↓
+. ↑ ← . ↑ ←
+
+Visualization of ring 19:
+. . . . . .
+. . . . . .
+. . ↓ ← ← .
+. . → → ↑ .
+. . . . . .
+. . . . . .
+
+Visualization of ring 20:
+. . . . . .
+. . . . . .
+. . . . . .
+. . . . . .
+. . . → ↓ .
+. . . ↑ ← .
+
+Visualization of ring 21:
+. . . . . .
+. . . . → ↓
+. . . → ↑ ↓
+. . . ↑ ← ↓
+. . . . ↑ ↓
+. . . . ↑ ←
+
+Visualization of ring 22:
+. . . → ↓ .
+→ → → ↑ ↓ .
+↑ . . . ↓ .
+↑ ← ← ← ← .
+. . . . . .
+. . . . . .
+
+Score: 8.901587301587302, Distance: 5.901587301587302, Length: 300
+========================================
+Generation 200
+Binary Strings:
+0: 00100001001110001000000000
+1: 00000000000011000000000001
+2: 01100111000111001010111100
+3: 00000000010011101101111111
+4: 00000000000000011000000001
+5: 00100000000000000000000000
+6: 00000000001000011100100000
+7: 00110011011110100101001111
+8: 11111100001100011111110000
+9: 10100111001111111000110001
+10: 11001011110011100001000000
+11: 00000000010000100000000000
+12: 11000110000100011101001110
+13: 00011000110011001111110010
+14: 11111100011110001110111111
+15: 00000100001000011000010000
+16: 00000000001100011100010000
+17: 00000000000010000110000110
+18: 10011100101001011111011011
+19: 01110010111110100011001100
+20: 10000110000000000000000001
+21: 00000000100001100001001111
+22: 00000110001000000000000001
+Ring Vertices:
+0: (2,0) -> (2,1) -> (2,2) -> (1,2) -> (0,2) -> (0,3) -> (1,3) -> (1,4) -> (2,4) -> (2,3) -> (3,3) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+1: (3,3) -> (2,3) -> (2,2) -> (3,2) -> (4,2) -> (4,3) -> (3,3)
+2: (0,2) -> (1,2) -> (1,3) -> (1,4) -> (0,4) -> (0,5) -> (1,5) -> (2,5) -> (3,5) -> (4,5) -> (4,4) -> (4,3) -> (4,2) -> (3,2) -> (3,1) -> (3,0) -> (2,0) -> (1,0) -> (1,1) -> (0,1) -> (0,2)
+3: (2,2) -> (3,2) -> (4,2) -> (4,1) -> (5,1) -> (5,2) -> (5,3) -> (5,4) -> (5,5) -> (4,5) -> (3,5) -> (2,5) -> (1,5) -> (0,5) -> (0,4) -> (1,4) -> (1,3) -> (2,3) -> (2,2)
+4: (0,3) -> (1,3) -> (2,3) -> (2,4) -> (1,4) -> (0,4) -> (0,3)
+5: (2,1) -> (3,1) -> (3,0) -> (2,0) -> (2,1)
+6: (2,4) -> (3,4) -> (3,3) -> (2,3) -> (1,3) -> (1,2) -> (0,2) -> (0,3) -> (0,4) -> (0,5) -> (1,5) -> (1,4) -> (2,4)
+7: (0,2) -> (1,2) -> (1,1) -> (2,1) -> (2,0) -> (3,0) -> (4,0) -> (4,1) -> (5,1) -> (5,2) -> (5,3) -> (5,4) -> (5,5) -> (4,5) -> (3,5) -> (2,5) -> (2,4) -> (2,3) -> (1,3) -> (0,3) -> (0,2)
+8: (2,1) -> (3,1) -> (4,1) -> (5,1) -> (5,0) -> (4,0) -> (3,0) -> (2,0) -> (1,0) -> (0,0) -> (0,1) -> (0,2) -> (0,3) -> (0,4) -> (0,5) -> (1,5) -> (2,5) -> (2,4) -> (3,4) -> (4,4) -> (5,4) -> (5,3) -> (4,3) -> (3,3) -> (2,3) -> (2,2) -> (1,2) -> (1,1) -> (2,1)
+9: (1,1) -> (2,1) -> (2,0) -> (3,0) -> (3,1) -> (3,2) -> (4,2) -> (5,2) -> (5,3) -> (4,3) -> (3,3) -> (2,3) -> (2,4) -> (2,5) -> (1,5) -> (0,5) -> (0,4) -> (0,3) -> (0,2) -> (0,1) -> (0,0) -> (1,0) -> (1,1)
+10: (4,0) -> (4,1) -> (3,1) -> (2,1) -> (2,0) -> (1,0) -> (0,0) -> (0,1) -> (1,1) -> (1,2) -> (2,2) -> (2,3) -> (3,3) -> (4,3) -> (4,4) -> (5,4) -> (5,3) -> (5,2) -> (5,1) -> (5,0) -> (4,0)
+11: (5,2) -> (5,1) -> (4,1) -> (4,2) -> (4,3) -> (5,3) -> (5,2)
+12: (0,2) -> (1,2) -> (1,3) -> (0,3) -> (0,4) -> (1,4) -> (2,4) -> (2,5) -> (3,5) -> (4,5) -> (5,5) -> (5,4) -> (5,3) -> (4,3) -> (4,4) -> (3,4) -> (3,3) -> (2,3) -> (2,2) -> (2,1) -> (2,0) -> (1,0) -> (0,0) -> (0,1) -> (0,2)
+13: (5,0) -> (4,0) -> (3,0) -> (3,1) -> (3,2) -> (2,2) -> (2,3) -> (1,3) -> (1,4) -> (0,4) -> (0,5) -> (1,5) -> (2,5) -> (2,4) -> (3,4) -> (4,4) -> (4,5) -> (5,5) -> (5,4) -> (5,3) -> (4,3) -> (4,2) -> (5,2) -> (5,1) -> (5,0)
+14: (2,1) -> (1,1) -> (1,2) -> (2,2) -> (3,2) -> (3,3) -> (4,3) -> (4,4) -> (5,4) -> (5,5) -> (4,5) -> (3,5) -> (2,5) -> (1,5) -> (0,5) -> (0,4) -> (1,4) -> (1,3) -> (0,3) -> (0,2) -> (0,1) -> (0,0) -> (1,0) -> (2,0) -> (3,0) -> (4,0) -> (5,0) -> (5,1) -> (5,2) -> (4,2) -> (4,1) -> (3,1) -> (2,1)
+15: (1,4) -> (1,5) -> (2,5) -> (2,4) -> (2,3) -> (1,3) -> (1,2) -> (1,1) -> (0,1) -> (0,2) -> (0,3) -> (0,4) -> (1,4)
+16: (2,4) -> (3,4) -> (3,3) -> (2,3) -> (2,2) -> (1,2) -> (0,2) -> (0,3) -> (0,4) -> (1,4) -> (1,5) -> (2,5) -> (2,4)
+17: (2,4) -> (3,4) -> (3,5) -> (4,5) -> (5,5) -> (5,4) -> (4,4) -> (4,3) -> (3,3) -> (3,2) -> (2,2) -> (2,3) -> (2,4)
+18: (5,0) -> (5,1) -> (4,1) -> (4,2) -> (4,3) -> (5,3) -> (5,4) -> (5,5) -> (4,5) -> (4,4) -> (3,4) -> (3,5) -> (2,5) -> (1,5) -> (1,4) -> (0,4) -> (0,3) -> (0,2) -> (0,1) -> (0,0) -> (1,0) -> (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) -> (3,2) -> (3,1) -> (3,0) -> (4,0) -> (5,0)
+19: (2,1) -> (2,2) -> (3,2) -> (3,1) -> (2,1)
+20: (0,0) -> (1,0) -> (1,1) -> (2,1) -> (2,2) -> (1,2) -> (0,2) -> (0,1) -> (0,0)
+21: (5,2) -> (5,3) -> (5,4) -> (5,5) -> (4,5) -> (3,5) -> (2,5) -> (2,4) -> (3,4) -> (4,4) -> (4,3) -> (3,3) -> (3,2) -> (3,1) -> (4,1) -> (4,2) -> (5,2)
+22: (0,1) -> (1,1) -> (2,1) -> (2,2) -> (1,2) -> (1,3) -> (0,3) -> (0,2) -> (0,1)
+Ring Visualizations:
+Visualization of ring 0:
+. . ↓ ← . .
+. . ↓ ↑ . .
+↓ ← ← ↑ . .
+→ ↓ → ↑ . .
+. → ↑ . . .
+. . . . . .
+
+Visualization of ring 1:
+. . . . . .
+. . . . . .
+. . → → ↓ .
+. . ↑ ← ← .
+. . . . . .
+. . . . . .
+
+Visualization of ring 2:
+. ↓ ← ← . .
+↓ ← . ↑ . .
+→ ↓ . ↑ ← .
+. ↓ . . ↑ .
+↓ ← . . ↑ .
+→ → → → ↑ .
+
+Visualization of ring 3:
+. . . . . .
+. . . . → ↓
+. . → → ↑ ↓
+. → ↑ . . ↓
+→ ↑ . . . ↓
+↑ ← ← ← ← ←
+
+Visualization of ring 4:
+. . . . . .
+. . . . . .
+. . . . . .
+→ → ↓ . . .
+↑ ← ← . . .
+. . . . . .
+
+Visualization of ring 5:
+. . ↓ ← . .
+. . → ↑ . .
+. . . . . .
+. . . . . .
+. . . . . .
+. . . . . .
+
+Visualization of ring 6:
+. . . . . .
+. . . . . .
+↓ ← . . . .
+↓ ↑ ← ← . .
+↓ → → ↑ . .
+→ ↑ . . . .
+
+Visualization of ring 7:
+. . → → ↓ .
+. → ↑ . → ↓
+→ ↑ . . . ↓
+↑ ← ← . . ↓
+. . ↑ . . ↓
+. . ↑ ← ← ←
+
+Visualization of ring 8:
+↓ ← ← ← ← ←
+↓ → → → → ↑
+↓ ↑ ← . . .
+↓ . ↑ ← ← ←
+↓ . → → → ↑
+→ → ↑ . . .
+
+Visualization of ring 9:
+→ ↓ → ↓ . .
+↑ → ↑ ↓ . .
+↑ . . → → ↓
+↑ . ↓ ← ← ←
+↑ . ↓ . . .
+↑ ← ← . . .
+
+Visualization of ring 10:
+↓ ← ← . ↓ ←
+→ ↓ ↑ ← ← ↑
+. → ↓ . . ↑
+. . → → ↓ ↑
+. . . . → ↑
+. . . . . .
+
+Visualization of ring 11:
+. . . . . .
+. . . . ↓ ←
+. . . . ↓ ↑
+. . . . → ↑
+. . . . . .
+. . . . . .
+
+Visualization of ring 12:
+↓ ← ← . . .
+↓ . ↑ . . .
+→ ↓ ↑ . . .
+↓ ← ↑ ← ↓ ←
+→ → ↓ ↑ ← ↑
+. . → → → ↑
+
+Visualization of ring 13:
+. . . ↓ ← ←
+. . . ↓ . ↑
+. . ↓ ← → ↑
+. ↓ ← . ↑ ←
+↓ ← → → ↓ ↑
+→ → ↑ . → ↑
+
+Visualization of ring 14:
+→ → → → → ↓
+↑ ↓ ← ← ← ↓
+↑ → → ↓ ↑ ←
+↑ ← . → ↓ .
+→ ↑ . . → ↓
+↑ ← ← ← ← ←
+
+Visualization of ring 15:
+. . . . . .
+↓ ← . . . .
+↓ ↑ . . . .
+↓ ↑ ← . . .
+→ ↓ ↑ . . .
+. → ↑ . . .
+
+Visualization of ring 16:
+. . . . . .
+. . . . . .
+↓ ← ← . . .
+↓ . ↑ ← . .
+→ ↓ → ↑ . .
+. → ↑ . . .
+
+Visualization of ring 17:
+. . . . . .
+. . . . . .
+. . ↓ ← . .
+. . ↓ ↑ ← .
+. . → ↓ ↑ ←
+. . . → → ↑
+
+Visualization of ring 18:
+→ ↓ . → → ↓
+↑ ↓ . ↑ ↓ ←
+↑ ↓ . ↑ ↓ .
+↑ → → ↑ → ↓
+↑ ← . ↓ ← ↓
+. ↑ ← ← ↑ ←
+
+Visualization of ring 19:
+. . . . . .
+. . ↓ ← . .
+. . → ↑ . .
+. . . . . .
+. . . . . .
+. . . . . .
+
+Visualization of ring 20:
+→ ↓ . . . .
+↑ → ↓ . . .
+↑ ← ← . . .
+. . . . . .
+. . . . . .
+. . . . . .
+
+Visualization of ring 21:
+. . . . . .
+. . . → ↓ .
+. . . ↑ → ↓
+. . . ↑ ← ↓
+. . → → ↑ ↓
+. . ↑ ← ← ←
+
+Visualization of ring 22:
+. . . . . .
+→ → ↓ . . .
+↑ ↓ ← . . .
+↑ ← . . . .
+. . . . . .
+. . . . . .
+
+Score: 8.724444444444444, Distance: 5.144444444444445, Length: 358
+========================================
+Generation 300
+Binary Strings:
+0: 01100011001111001000000000
+1: 00000000010011100010000001
+2: 00100011000111001110111100
+3: 10000000000000000000000001
+4: 00000000100000000000000001
+5: 00000000000000000000000000
+6: 00000000001100011100101000
+7: 10000110001110000101001111
+8: 11111100001000000000000000
+9: 00100011000110001100010001
+10: 11000111000011000100000000
+11: 00000000000000000000010000
+12: 10000100001000010000000000
+13: 00011001100011011110110000
+14: 11111110011110011111011001
+15: 00000100001000011000110000
+16: 00000011000100011000010000
+17: 00000000000010000110000110
+18: 01011110111011110111111111
+19: 01110011011111110011000000
+20: 10000110001000000000000001
+21: 00000000100001100011001111
+22: 00000000010000000000000001
+Ring Vertices:
+0: (2,0) -> (1,0) -> (1,1) -> (1,2) -> (0,2) -> (0,3) -> (1,3) -> (1,4) -> (2,4) -> (2,3) -> (3,3) -> (4,3) -> (4,2) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+1: (5,2) -> (5,3) -> (4,3) -> (4,4) -> (3,4) -> (3,3) -> (2,3) -> (2,2) -> (3,2) -> (4,2) -> (4,1) -> (5,1) -> (5,2)
+2: (2,0) -> (2,1) -> (1,1) -> (1,2) -> (1,3) -> (1,4) -> (0,4) -> (0,5) -> (1,5) -> (2,5) -> (3,5) -> (4,5) -> (4,4) -> (4,3) -> (4,2) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+3: (0,0) -> (1,0) -> (1,1) -> (0,1) -> (0,0)
+4: (3,1) -> (4,1) -> (4,2) -> (3,2) -> (3,1)
+5:
+6: (2,4) -> (3,4) -> (3,3) -> (2,3) -> (1,3) -> (1,2) -> (0,2) -> (0,3) -> (0,4) -> (0,5) -> (1,5) -> (1,4) -> (2,4)
+7: (0,2) -> (1,2) -> (1,1) -> (2,1) -> (2,0) -> (3,0) -> (4,0) -> (4,1) -> (5,1) -> (5,2) -> (5,3) -> (5,4) -> (5,5) -> (4,5) -> (3,5) -> (2,5) -> (2,4) -> (2,3) -> (1,3) -> (0,3) -> (0,2)
+8: (2,1) -> (3,1) -> (4,1) -> (5,1) -> (5,0) -> (4,0) -> (3,0) -> (2,0) -> (1,0) -> (0,0) -> (0,1) -> (0,2) -> (0,3) -> (0,4) -> (0,5) -> (1,5) -> (2,5) -> (2,4) -> (3,4) -> (4,4) -> (5,4) -> (5,3) -> (4,3) -> (3,3) -> (2,3) -> (2,2) -> (1,2) -> (1,1) -> (2,1)
+9: (1,1) -> (2,1) -> (2,0) -> (3,0) -> (3,1) -> (3,2) -> (4,2) -> (5,2) -> (5,3) -> (4,3) -> (3,3) -> (2,3) -> (2,4) -> (2,5) -> (1,5) -> (0,5) -> (0,4) -> (0,3) -> (0,2) -> (0,1) -> (0,0) -> (1,0) -> (1,1)
+10: (4,0) -> (4,1) -> (3,1) -> (2,1) -> (2,0) -> (1,0) -> (0,0) -> (0,1) -> (1,1) -> (1,2) -> (2,2) -> (2,3) -> (3,3) -> (4,3) -> (4,4) -> (5,4) -> (5,3) -> (5,2) -> (5,1) -> (5,0) -> (4,0)
+11: (5,2) -> (5,1) -> (4,1) -> (4,2) -> (4,3) -> (5,3) -> (5,2)
+12: (0,2) -> (1,2) -> (1,3) -> (0,3) -> (0,4) -> (1,4) -> (2,4) -> (2,5) -> (3,5) -> (4,5) -> (5,5) -> (5,4) -> (5,3) -> (4,3) -> (4,4) -> (3,4) -> (3,3) -> (2,3) -> (2,2) -> (2,1) -> (2,0) -> (1,0) -> (0,0) -> (0,1) -> (0,2)
+13: (5,0) -> (4,0) -> (3,0) -> (3,1) -> (3,2) -> (2,2) -> (2,3) -> (1,3) -> (1,4) -> (0,4) -> (0,5) -> (1,5) -> (2,5) -> (2,4) -> (3,4) -> (4,4) -> (4,5) -> (5,5) -> (5,4) -> (5,3) -> (4,3) -> (4,2) -> (5,2) -> (5,1) -> (5,0)
+14: (2,1) -> (1,1) -> (1,2) -> (2,2) -> (3,2) -> (3,3) -> (4,3) -> (4,4) -> (5,4) -> (5,5) -> (4,5) -> (3,5) -> (2,5) -> (1,5) -> (0,5) -> (0,4) -> (1,4) -> (1,3) -> (0,3) -> (0,2) -> (0,1) -> (0,0) -> (1,0) -> (2,0) -> (3,0) -> (4,0) -> (5,0) -> (5,1) -> (5,2) -> (4,2) -> (4,1) -> (3,1) -> (2,1)
+15: (1,4) -> (1,5) -> (2,5) -> (2,4) -> (2,3) -> (1,3) -> (1,2) -> (1,1) -> (0,1) -> (0,2) -> (0,3) -> (0,4) -> (1,4)
+16: (2,4) -> (3,4) -> (3,3) -> (2,3) -> (2,2) -> (1,2) -> (0,2) -> (0,3) -> (0,4) -> (1,4) -> (1,5) -> (2,5) -> (2,4)
+17: (2,4) -> (3,4) -> (3,5) -> (4,5) -> (5,5) -> (5,4) -> (4,4) -> (4,3) -> (3,3) -> (3,2) -> (2,2) -> (2,3) -> (2,4)
+18: (5,0) -> (5,1) -> (4,1) -> (4,2) -> (4,3) -> (5,3) -> (5,4) -> (5,5) -> (4,5) -> (4,4) -> (3,4) -> (3,5) -> (2,5) -> (1,5) -> (1,4) -> (0,4) -> (0,3) -> (0,2) -> (0,1) -> (0,0) -> (1,0) -> (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) -> (3,2) -> (3,1) -> (3,0) -> (4,0) -> (5,0)
+19: (2,1) -> (2,2) -> (3,2) -> (3,1) -> (2,1)
+20: (0,0) -> (1,0) -> (1,1) -> (2,1) -> (2,2) -> (1,2) -> (0,2) -> (0,1) -> (0,0)
+21: (5,2) -> (5,3) -> (5,4) -> (5,5) -> (4,5) -> (3,5) -> (2,5) -> (2,4) -> (3,4) -> (4,4) -> (4,3) -> (3,3) -> (3,2) -> (3,1) -> (4,1) -> (4,2) -> (5,2)
+22: (0,1) -> (1,1) -> (2,1) -> (2,2) -> (1,2) -> (1,3) -> (0,3) -> (0,2) -> (0,1)
+Ring Visualizations:
+Visualization of ring 0:
+. ↓ ← ← . .
+. ↓ . ↑ . .
+↓ ← . ↑ ← .
+→ ↓ → → ↑ .
+. → ↑ . . .
+. . . . . .
+
+Visualization of ring 1:
+. . . . . .
+. . . . → ↓
+. . → → ↑ ↓
+. . ↑ ← ↓ ←
+. . . ↑ ← .
+. . . . . .
+
+Visualization of ring 2:
+. . ↓ ← . .
+. ↓ ← ↑ . .
+. ↓ . ↑ ← .
+. ↓ . . ↑ .
+↓ ← . . ↑ .
+→ → → → ↑ .
+
+Visualization of ring 3:
+→ ↓ . . . .
+↑ ← . . . .
+. . . . . .
+. . . . . .
+. . . . . .
+. . . . . .
+
+Visualization of ring 4:
+. . . . . .
+. . . → ↓ .
+. . . ↑ ← .
+. . . . . .
+. . . . . .
+. . . . . .
+
+Visualization of ring 5:
+. . . . . .
+. . . . . .
+. . . . . .
+. . . . . .
+. . . . . .
+. . . . . .
+
+Visualization of ring 6:
+. . . . . .
+. . . . . .
+↓ ← . . . .
+↓ ↑ ← ← . .
+↓ → → ↑ . .
+→ ↑ . . . .
+
+Visualization of ring 7:
+. . → → ↓ .
+. → ↑ . → ↓
+→ ↑ . . . ↓
+↑ ← ← . . ↓
+. . ↑ . . ↓
+. . ↑ ← ← ←
+
+Visualization of ring 8:
+↓ ← ← ← ← ←
+↓ → → → → ↑
+↓ ↑ ← . . .
+↓ . ↑ ← ← ←
+↓ . → → → ↑
+→ → ↑ . . .
+
+Visualization of ring 9:
+→ ↓ → ↓ . .
+↑ → ↑ ↓ . .
+↑ . . → → ↓
+↑ . ↓ ← ← ←
+↑ . ↓ . . .
+↑ ← ← . . .
+
+Visualization of ring 10:
+↓ ← ← . ↓ ←
+→ ↓ ↑ ← ← ↑
+. → ↓ . . ↑
+. . → → ↓ ↑
+. . . . → ↑
+. . . . . .
+
+Visualization of ring 11:
+. . . . . .
+. . . . ↓ ←
+. . . . ↓ ↑
+. . . . → ↑
+. . . . . .
+. . . . . .
+
+Visualization of ring 12:
+↓ ← ← . . .
+↓ . ↑ . . .
+→ ↓ ↑ . . .
+↓ ← ↑ ← ↓ ←
+→ → ↓ ↑ ← ↑
+. . → → → ↑
+
+Visualization of ring 13:
+. . . ↓ ← ←
+. . . ↓ . ↑
+. . ↓ ← → ↑
+. ↓ ← . ↑ ←
+↓ ← → → ↓ ↑
+→ → ↑ . → ↑
+
+Visualization of ring 14:
+→ → → → → ↓
+↑ ↓ ← ← ← ↓
+↑ → → ↓ ↑ ←
+↑ ← . → ↓ .
+→ ↑ . . → ↓
+↑ ← ← ← ← ←
+
+Visualization of ring 15:
+. . . . . .
+↓ ← . . . .
+↓ ↑ . . . .
+↓ ↑ ← . . .
+→ ↓ ↑ . . .
+. → ↑ . . .
+
+Visualization of ring 16:
+. . . . . .
+. . . . . .
+↓ ← ← . . .
+↓ . ↑ ← . .
+→ ↓ → ↑ . .
+. → ↑ . . .
+
+Visualization of ring 17:
+. . . . . .
+. . . . . .
+. . ↓ ← . .
+. . ↓ ↑ ← .
+. . → ↓ ↑ ←
+. . . → → ↑
+
+Visualization of ring 18:
+→ ↓ . → → ↓
+↑ ↓ . ↑ ↓ ←
+↑ ↓ . ↑ ↓ .
+↑ → → ↑ → ↓
+↑ ← . ↓ ← ↓
+. ↑ ← ← ↑ ←
+
+Visualization of ring 19:
+. . . . . .
+. . ↓ ← . .
+. . → ↑ . .
+. . . . . .
+. . . . . .
+. . . . . .
+
+Visualization of ring 20:
+→ ↓ . . . .
+↑ → ↓ . . .
+↑ ← ← . . .
+. . . . . .
+. . . . . .
+. . . . . .
+
+Visualization of ring 21:
+. . . . . .
+. . . → ↓ .
+. . . ↑ → ↓
+. . . ↑ ← ↓
+. . → → ↑ ↓
+. . ↑ ← ← ←
+
+Visualization of ring 22:
+. . . . . .
+→ → ↓ . . .
+↑ ↓ ← . . .
+↑ ← . . . .
+. . . . . .
+. . . . . .
+
+Score: 8.61888888888889, Distance: 5.188888888888889, Length: 343
+========================================
+Generation 400
+Binary Strings:
+0: 01100011001111001000000000
+1: 00000000010011100010000001
+2: 00100011000111001110111100
+3: 10000000000000000000000001
+4: 00000000100000000000000001
+5: 00000000000000000000000000
+6: 00000000001100011100101000
+7: 10000110001110000101001111
+8: 11111100001000000000000000
+9: 00100011000110001100010001
+10: 11000111000011000100000000
+11: 00000000000000000000010000
+12: 10000100001000010000000000
+13: 00011001100011011110110000
+14: 11111110011110011111011001
+15: 00000100001000011000110000
+16: 00000011000100011000010000
+17: 00000000000010000110000110
+18: 01011110111011110111111111
+19: 01110011011111110011000000
+20: 10000110001000000000000001
+21: 00000000100001100011001111
+22: 00000000010000000000000001
+Ring Vertices:
+0: (2,0) -> (1,0) -> (1,1) -> (1,2) -> (0,2) -> (0,3) -> (1,3) -> (1,4) -> (2,4) -> (2,3) -> (3,3) -> (4,3) -> (4,2) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+1: (5,2) -> (5,3) -> (4,3) -> (4,4) -> (3,4) -> (3,3) -> (2,3) -> (2,2) -> (3,2) -> (4,2) -> (4,1) -> (5,1) -> (5,2)
+2: (2,0) -> (2,1) -> (1,1) -> (1,2) -> (1,3) -> (1,4) -> (0,4) -> (0,5) -> (1,5) -> (2,5) -> (3,5) -> (4,5) -> (4,4) -> (4,3) -> (4,2) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+3: (0,0) -> (1,0) -> (1,1) -> (0,1) -> (0,0)
+4: (3,1) -> (4,1) -> (4,2) -> (3,2) -> (3,1)
+5:
+6: (2,4) -> (3,4) -> (3,3) -> (2,3) -> (1,3) -> (1,2) -> (0,2) -> (0,3) -> (0,4) -> (0,5) -> (1,5) -> (1,4) -> (2,4)
+7: (0,2) -> (1,2) -> (1,1) -> (2,1) -> (2,0) -> (3,0) -> (4,0) -> (4,1) -> (5,1) -> (5,2) -> (5,3) -> (5,4) -> (5,5) -> (4,5) -> (3,5) -> (2,5) -> (2,4) -> (2,3) -> (1,3) -> (0,3) -> (0,2)
+8: (2,1) -> (3,1) -> (4,1) -> (5,1) -> (5,0) -> (4,0) -> (3,0) -> (2,0) -> (1,0) -> (0,0) -> (0,1) -> (0,2) -> (0,3) -> (0,4) -> (0,5) -> (1,5) -> (2,5) -> (2,4) -> (3,4) -> (4,4) -> (5,4) -> (5,3) -> (4,3) -> (3,3) -> (2,3) -> (2,2) -> (1,2) -> (1,1) -> (2,1)
+9: (1,1) -> (2,1) -> (2,0) -> (3,0) -> (3,1) -> (3,2) -> (4,2) -> (5,2) -> (5,3) -> (4,3) -> (3,3) -> (2,3) -> (2,4) -> (2,5) -> (1,5) -> (0,5) -> (0,4) -> (0,3) -> (0,2) -> (0,1) -> (0,0) -> (1,0) -> (1,1)
+10: (4,0) -> (4,1) -> (3,1) -> (2,1) -> (2,0) -> (1,0) -> (0,0) -> (0,1) -> (1,1) -> (1,2) -> (2,2) -> (2,3) -> (3,3) -> (4,3) -> (4,4) -> (5,4) -> (5,3) -> (5,2) -> (5,1) -> (5,0) -> (4,0)
+11: (5,2) -> (5,1) -> (4,1) -> (4,2) -> (4,3) -> (5,3) -> (5,2)
+12: (0,2) -> (1,2) -> (1,3) -> (0,3) -> (0,4) -> (1,4) -> (2,4) -> (2,5) -> (3,5) -> (4,5) -> (5,5) -> (5,4) -> (5,3) -> (4,3) -> (4,4) -> (3,4) -> (3,3) -> (2,3) -> (2,2) -> (2,1) -> (2,0) -> (1,0) -> (0,0) -> (0,1) -> (0,2)
+13: (5,0) -> (4,0) -> (3,0) -> (3,1) -> (3,2) -> (2,2) -> (2,3) -> (1,3) -> (1,4) -> (0,4) -> (0,5) -> (1,5) -> (2,5) -> (2,4) -> (3,4) -> (4,4) -> (4,5) -> (5,5) -> (5,4) -> (5,3) -> (4,3) -> (4,2) -> (5,2) -> (5,1) -> (5,0)
+14: (2,1) -> (1,1) -> (1,2) -> (2,2) -> (3,2) -> (3,3) -> (4,3) -> (4,4) -> (5,4) -> (5,5) -> (4,5) -> (3,5) -> (2,5) -> (1,5) -> (0,5) -> (0,4) -> (1,4) -> (1,3) -> (0,3) -> (0,2) -> (0,1) -> (0,0) -> (1,0) -> (2,0) -> (3,0) -> (4,0) -> (5,0) -> (5,1) -> (5,2) -> (4,2) -> (4,1) -> (3,1) -> (2,1)
+15: (1,4) -> (1,5) -> (2,5) -> (2,4) -> (2,3) -> (1,3) -> (1,2) -> (1,1) -> (0,1) -> (0,2) -> (0,3) -> (0,4) -> (1,4)
+16: (2,4) -> (3,4) -> (3,3) -> (2,3) -> (2,2) -> (1,2) -> (0,2) -> (0,3) -> (0,4) -> (1,4) -> (1,5) -> (2,5) -> (2,4)
+17: (2,4) -> (3,4) -> (3,5) -> (4,5) -> (5,5) -> (5,4) -> (4,4) -> (4,3) -> (3,3) -> (3,2) -> (2,2) -> (2,3) -> (2,4)
+18: (5,0) -> (5,1) -> (4,1) -> (4,2) -> (4,3) -> (5,3) -> (5,4) -> (5,5) -> (4,5) -> (4,4) -> (3,4) -> (3,5) -> (2,5) -> (1,5) -> (1,4) -> (0,4) -> (0,3) -> (0,2) -> (0,1) -> (0,0) -> (1,0) -> (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) -> (3,2) -> (3,1) -> (3,0) -> (4,0) -> (5,0)
+19: (2,1) -> (2,2) -> (3,2) -> (3,1) -> (2,1)
+20: (0,0) -> (1,0) -> (1,1) -> (2,1) -> (2,2) -> (1,2) -> (0,2) -> (0,1) -> (0,0)
+21: (5,2) -> (5,3) -> (5,4) -> (5,5) -> (4,5) -> (3,5) -> (2,5) -> (2,4) -> (3,4) -> (4,4) -> (4,3) -> (3,3) -> (3,2) -> (3,1) -> (4,1) -> (4,2) -> (5,2)
+22: (0,1) -> (1,1) -> (2,1) -> (2,2) -> (1,2) -> (1,3) -> (0,3) -> (0,2) -> (0,1)
+Ring Visualizations:
+Visualization of ring 0:
+. ↓ ← ← . .
+. ↓ . ↑ . .
+↓ ← . ↑ ← .
+→ ↓ → → ↑ .
+. → ↑ . . .
+. . . . . .
+
+Visualization of ring 1:
+. . . . . .
+. . . . → ↓
+. . → → ↑ ↓
+. . ↑ ← ↓ ←
+. . . ↑ ← .
+. . . . . .
+
+Visualization of ring 2:
+. . ↓ ← . .
+. ↓ ← ↑ . .
+. ↓ . ↑ ← .
+. ↓ . . ↑ .
+↓ ← . . ↑ .
+→ → → → ↑ .
+
+Visualization of ring 3:
+→ ↓ . . . .
+↑ ← . . . .
+. . . . . .
+. . . . . .
+. . . . . .
+. . . . . .
+
+Visualization of ring 4:
+. . . . . .
+. . . → ↓ .
+. . . ↑ ← .
+. . . . . .
+. . . . . .
+. . . . . .
+
+Visualization of ring 5:
+. . . . . .
+. . . . . .
+. . . . . .
+. . . . . .
+. . . . . .
+. . . . . .
+
+Visualization of ring 6:
+. . . . . .
+. . . . . .
+↓ ← . . . .
+↓ ↑ ← ← . .
+↓ → → ↑ . .
+→ ↑ . . . .
+
+Visualization of ring 7:
+. . → → ↓ .
+. → ↑ . → ↓
+→ ↑ . . . ↓
+↑ ← ← . . ↓
+. . ↑ . . ↓
+. . ↑ ← ← ←
+
+Visualization of ring 8:
+↓ ← ← ← ← ←
+↓ → → → → ↑
+↓ ↑ ← . . .
+↓ . ↑ ← ← ←
+↓ . → → → ↑
+→ → ↑ . . .
+
+Visualization of ring 9:
+→ ↓ → ↓ . .
+↑ → ↑ ↓ . .
+↑ . . → → ↓
+↑ . ↓ ← ← ←
+↑ . ↓ . . .
+↑ ← ← . . .
+
+Visualization of ring 10:
+↓ ← ← . ↓ ←
+→ ↓ ↑ ← ← ↑
+. → ↓ . . ↑
+. . → → ↓ ↑
+. . . . → ↑
+. . . . . .
+
+Visualization of ring 11:
+. . . . . .
+. . . . ↓ ←
+. . . . ↓ ↑
+. . . . → ↑
+. . . . . .
+. . . . . .
+
+Visualization of ring 12:
+↓ ← ← . . .
+↓ . ↑ . . .
+→ ↓ ↑ . . .
+↓ ← ↑ ← ↓ ←
+→ → ↓ ↑ ← ↑
+. . → → → ↑
+
+Visualization of ring 13:
+. . . ↓ ← ←
+. . . ↓ . ↑
+. . ↓ ← → ↑
+. ↓ ← . ↑ ←
+↓ ← → → ↓ ↑
+→ → ↑ . → ↑
+
+Visualization of ring 14:
+→ → → → → ↓
+↑ ↓ ← ← ← ↓
+↑ → → ↓ ↑ ←
+↑ ← . → ↓ .
+→ ↑ . . → ↓
+↑ ← ← ← ← ←
+
+Visualization of ring 15:
+. . . . . .
+↓ ← . . . .
+↓ ↑ . . . .
+↓ ↑ ← . . .
+→ ↓ ↑ . . .
+. → ↑ . . .
+
+Visualization of ring 16:
+. . . . . .
+. . . . . .
+↓ ← ← . . .
+↓ . ↑ ← . .
+→ ↓ → ↑ . .
+. → ↑ . . .
+
+Visualization of ring 17:
+. . . . . .
+. . . . . .
+. . ↓ ← . .
+. . ↓ ↑ ← .
+. . → ↓ ↑ ←
+. . . → → ↑
+
+Visualization of ring 18:
+→ ↓ . → → ↓
+↑ ↓ . ↑ ↓ ←
+↑ ↓ . ↑ ↓ .
+↑ → → ↑ → ↓
+↑ ← . ↓ ← ↓
+. ↑ ← ← ↑ ←
+
+Visualization of ring 19:
+. . . . . .
+. . ↓ ← . .
+. . → ↑ . .
+. . . . . .
+. . . . . .
+. . . . . .
+
+Visualization of ring 20:
+→ ↓ . . . .
+↑ → ↓ . . .
+↑ ← ← . . .
+. . . . . .
+. . . . . .
+. . . . . .
+
+Visualization of ring 21:
+. . . . . .
+. . . → ↓ .
+. . . ↑ → ↓
+. . . ↑ ← ↓
+. . → → ↑ ↓
+. . ↑ ← ← ←
+
+Visualization of ring 22:
+. . . . . .
+→ → ↓ . . .
+↑ ↓ ← . . .
+↑ ← . . . .
+. . . . . .
+. . . . . .
+
+Score: 8.61888888888889, Distance: 5.188888888888889, Length: 343
+========================================
+Generation 500
+Binary Strings:
+0: 01100011001111001000000000
+1: 00000000010011100010000001
+2: 00100011000111001110111100
+3: 10000000000000000000000001
+4: 00000000100000000000000001
+5: 00000000000000000000000000
+6: 00000000001100011100101000
+7: 10000110001110000101001111
+8: 11111100001000000000000000
+9: 00100011000110001100010001
+10: 11000111000011000100000000
+11: 00000000000000000000010000
+12: 10000100001000010000000000
+13: 00011001100011011110110000
+14: 11111110011110011111011001
+15: 00000100001000011000110000
+16: 00000011000100011000010000
+17: 00000000000010000110000110
+18: 01011110111011110111111111
+19: 01110011011111110011000000
+20: 10000110001000000000000001
+21: 00000000100001100011001111
+22: 00000000010000000000000001
+Ring Vertices:
+0: (2,0) -> (1,0) -> (1,1) -> (1,2) -> (0,2) -> (0,3) -> (1,3) -> (1,4) -> (2,4) -> (2,3) -> (3,3) -> (4,3) -> (4,2) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+1: (5,2) -> (5,3) -> (4,3) -> (4,4) -> (3,4) -> (3,3) -> (2,3) -> (2,2) -> (3,2) -> (4,2) -> (4,1) -> (5,1) -> (5,2)
+2: (2,0) -> (2,1) -> (1,1) -> (1,2) -> (1,3) -> (1,4) -> (0,4) -> (0,5) -> (1,5) -> (2,5) -> (3,5) -> (4,5) -> (4,4) -> (4,3) -> (4,2) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+3: (0,0) -> (1,0) -> (1,1) -> (0,1) -> (0,0)
+4: (3,1) -> (4,1) -> (4,2) -> (3,2) -> (3,1)
+5:
+6: (2,4) -> (3,4) -> (3,3) -> (2,3) -> (1,3) -> (1,2) -> (0,2) -> (0,3) -> (0,4) -> (0,5) -> (1,5) -> (1,4) -> (2,4)
+7: (0,2) -> (1,2) -> (1,1) -> (2,1) -> (2,0) -> (3,0) -> (4,0) -> (4,1) -> (5,1) -> (5,2) -> (5,3) -> (5,4) -> (5,5) -> (4,5) -> (3,5) -> (2,5) -> (2,4) -> (2,3) -> (1,3) -> (0,3) -> (0,2)
+8: (2,1) -> (3,1) -> (4,1) -> (5,1) -> (5,0) -> (4,0) -> (3,0) -> (2,0) -> (1,0) -> (0,0) -> (0,1) -> (0,2) -> (0,3) -> (0,4) -> (0,5) -> (1,5) -> (2,5) -> (2,4) -> (3,4) -> (4,4) -> (5,4) -> (5,3) -> (4,3) -> (3,3) -> (2,3) -> (2,2) -> (1,2) -> (1,1) -> (2,1)
+9: (1,1) -> (2,1) -> (2,0) -> (3,0) -> (3,1) -> (3,2) -> (4,2) -> (5,2) -> (5,3) -> (4,3) -> (3,3) -> (2,3) -> (2,4) -> (2,5) -> (1,5) -> (0,5) -> (0,4) -> (0,3) -> (0,2) -> (0,1) -> (0,0) -> (1,0) -> (1,1)
+10: (4,0) -> (4,1) -> (3,1) -> (2,1) -> (2,0) -> (1,0) -> (0,0) -> (0,1) -> (1,1) -> (1,2) -> (2,2) -> (2,3) -> (3,3) -> (4,3) -> (4,4) -> (5,4) -> (5,3) -> (5,2) -> (5,1) -> (5,0) -> (4,0)
+11: (5,2) -> (5,1) -> (4,1) -> (4,2) -> (4,3) -> (5,3) -> (5,2)
+12: (0,2) -> (1,2) -> (1,3) -> (0,3) -> (0,4) -> (1,4) -> (2,4) -> (2,5) -> (3,5) -> (4,5) -> (5,5) -> (5,4) -> (5,3) -> (4,3) -> (4,4) -> (3,4) -> (3,3) -> (2,3) -> (2,2) -> (2,1) -> (2,0) -> (1,0) -> (0,0) -> (0,1) -> (0,2)
+13: (5,0) -> (4,0) -> (3,0) -> (3,1) -> (3,2) -> (2,2) -> (2,3) -> (1,3) -> (1,4) -> (0,4) -> (0,5) -> (1,5) -> (2,5) -> (2,4) -> (3,4) -> (4,4) -> (4,5) -> (5,5) -> (5,4) -> (5,3) -> (4,3) -> (4,2) -> (5,2) -> (5,1) -> (5,0)
+14: (2,1) -> (1,1) -> (1,2) -> (2,2) -> (3,2) -> (3,3) -> (4,3) -> (4,4) -> (5,4) -> (5,5) -> (4,5) -> (3,5) -> (2,5) -> (1,5) -> (0,5) -> (0,4) -> (1,4) -> (1,3) -> (0,3) -> (0,2) -> (0,1) -> (0,0) -> (1,0) -> (2,0) -> (3,0) -> (4,0) -> (5,0) -> (5,1) -> (5,2) -> (4,2) -> (4,1) -> (3,1) -> (2,1)
+15: (1,4) -> (1,5) -> (2,5) -> (2,4) -> (2,3) -> (1,3) -> (1,2) -> (1,1) -> (0,1) -> (0,2) -> (0,3) -> (0,4) -> (1,4)
+16: (2,4) -> (3,4) -> (3,3) -> (2,3) -> (2,2) -> (1,2) -> (0,2) -> (0,3) -> (0,4) -> (1,4) -> (1,5) -> (2,5) -> (2,4)
+17: (2,4) -> (3,4) -> (3,5) -> (4,5) -> (5,5) -> (5,4) -> (4,4) -> (4,3) -> (3,3) -> (3,2) -> (2,2) -> (2,3) -> (2,4)
+18: (5,0) -> (5,1) -> (4,1) -> (4,2) -> (4,3) -> (5,3) -> (5,4) -> (5,5) -> (4,5) -> (4,4) -> (3,4) -> (3,5) -> (2,5) -> (1,5) -> (1,4) -> (0,4) -> (0,3) -> (0,2) -> (0,1) -> (0,0) -> (1,0) -> (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) -> (3,2) -> (3,1) -> (3,0) -> (4,0) -> (5,0)
+19: (2,1) -> (2,2) -> (3,2) -> (3,1) -> (2,1)
+20: (0,0) -> (1,0) -> (1,1) -> (2,1) -> (2,2) -> (1,2) -> (0,2) -> (0,1) -> (0,0)
+21: (5,2) -> (5,3) -> (5,4) -> (5,5) -> (4,5) -> (3,5) -> (2,5) -> (2,4) -> (3,4) -> (4,4) -> (4,3) -> (3,3) -> (3,2) -> (3,1) -> (4,1) -> (4,2) -> (5,2)
+22: (0,1) -> (1,1) -> (2,1) -> (2,2) -> (1,2) -> (1,3) -> (0,3) -> (0,2) -> (0,1)
+Ring Visualizations:
+Visualization of ring 0:
+. ↓ ← ← . .
+. ↓ . ↑ . .
+↓ ← . ↑ ← .
+→ ↓ → → ↑ .
+. → ↑ . . .
+. . . . . .
+
+Visualization of ring 1:
+. . . . . .
+. . . . → ↓
+. . → → ↑ ↓
+. . ↑ ← ↓ ←
+. . . ↑ ← .
+. . . . . .
+
+Visualization of ring 2:
+. . ↓ ← . .
+. ↓ ← ↑ . .
+. ↓ . ↑ ← .
+. ↓ . . ↑ .
+↓ ← . . ↑ .
+→ → → → ↑ .
+
+Visualization of ring 3:
+→ ↓ . . . .
+↑ ← . . . .
+. . . . . .
+. . . . . .
+. . . . . .
+. . . . . .
+
+Visualization of ring 4:
+. . . . . .
+. . . → ↓ .
+. . . ↑ ← .
+. . . . . .
+. . . . . .
+. . . . . .
+
+Visualization of ring 5:
+. . . . . .
+. . . . . .
+. . . . . .
+. . . . . .
+. . . . . .
+. . . . . .
+
+Visualization of ring 6:
+. . . . . .
+. . . . . .
+↓ ← . . . .
+↓ ↑ ← ← . .
+↓ → → ↑ . .
+→ ↑ . . . .
+
+Visualization of ring 7:
+. . → → ↓ .
+. → ↑ . → ↓
+→ ↑ . . . ↓
+↑ ← ← . . ↓
+. . ↑ . . ↓
+. . ↑ ← ← ←
+
+Visualization of ring 8:
+↓ ← ← ← ← ←
+↓ → → → → ↑
+↓ ↑ ← . . .
+↓ . ↑ ← ← ←
+↓ . → → → ↑
+→ → ↑ . . .
+
+Visualization of ring 9:
+→ ↓ → ↓ . .
+↑ → ↑ ↓ . .
+↑ . . → → ↓
+↑ . ↓ ← ← ←
+↑ . ↓ . . .
+↑ ← ← . . .
+
+Visualization of ring 10:
+↓ ← ← . ↓ ←
+→ ↓ ↑ ← ← ↑
+. → ↓ . . ↑
+. . → → ↓ ↑
+. . . . → ↑
+. . . . . .
+
+Visualization of ring 11:
+. . . . . .
+. . . . ↓ ←
+. . . . ↓ ↑
+. . . . → ↑
+. . . . . .
+. . . . . .
+
+Visualization of ring 12:
+↓ ← ← . . .
+↓ . ↑ . . .
+→ ↓ ↑ . . .
+↓ ← ↑ ← ↓ ←
+→ → ↓ ↑ ← ↑
+. . → → → ↑
+
+Visualization of ring 13:
+. . . ↓ ← ←
+. . . ↓ . ↑
+. . ↓ ← → ↑
+. ↓ ← . ↑ ←
+↓ ← → → ↓ ↑
+→ → ↑ . → ↑
+
+Visualization of ring 14:
+→ → → → → ↓
+↑ ↓ ← ← ← ↓
+↑ → → ↓ ↑ ←
+↑ ← . → ↓ .
+→ ↑ . . → ↓
+↑ ← ← ← ← ←
+
+Visualization of ring 15:
+. . . . . .
+↓ ← . . . .
+↓ ↑ . . . .
+↓ ↑ ← . . .
+→ ↓ ↑ . . .
+. → ↑ . . .
+
+Visualization of ring 16:
+. . . . . .
+. . . . . .
+↓ ← ← . . .
+↓ . ↑ ← . .
+→ ↓ → ↑ . .
+. → ↑ . . .
+
+Visualization of ring 17:
+. . . . . .
+. . . . . .
+. . ↓ ← . .
+. . ↓ ↑ ← .
+. . → ↓ ↑ ←
+. . . → → ↑
+
+Visualization of ring 18:
+→ ↓ . → → ↓
+↑ ↓ . ↑ ↓ ←
+↑ ↓ . ↑ ↓ .
+↑ → → ↑ → ↓
+↑ ← . ↓ ← ↓
+. ↑ ← ← ↑ ←
+
+Visualization of ring 19:
+. . . . . .
+. . ↓ ← . .
+. . → ↑ . .
+. . . . . .
+. . . . . .
+. . . . . .
+
+Visualization of ring 20:
+→ ↓ . . . .
+↑ → ↓ . . .
+↑ ← ← . . .
+. . . . . .
+. . . . . .
+. . . . . .
+
+Visualization of ring 21:
+. . . . . .
+. . . → ↓ .
+. . . ↑ → ↓
+. . . ↑ ← ↓
+. . → → ↑ ↓
+. . ↑ ← ← ←
+
+Visualization of ring 22:
+. . . . . .
+→ → ↓ . . .
+↑ ↓ ← . . .
+↑ ← . . . .
+. . . . . .
+. . . . . .
+
+Score: 8.61888888888889, Distance: 5.188888888888889, Length: 343
+========================================
+Generation 600
+Binary Strings:
+0: 01100011001111001000000000
+1: 00000000010011100010000001
+2: 00100011000111001110111100
+3: 10000000000000000000000001
+4: 00000000100000000000000001
+5: 00000000000000000000000000
+6: 00000000001100011100101000
+7: 10000110001110000101001111
+8: 11111100001000000000000000
+9: 00100011000110001100010001
+10: 11000111000011000100000000
+11: 00000000000000000000010000
+12: 10000100001000010000000000
+13: 00011001100011011110110000
+14: 11111110011110011111011001
+15: 00000100001000011000110000
+16: 00000011000100011000010000
+17: 00000000000010000110000110
+18: 01011110111011110111111111
+19: 01110011011111110011000000
+20: 10000110001000000000000001
+21: 00000000100001100011001111
+22: 00000000010000000000000001
+Ring Vertices:
+0: (2,0) -> (1,0) -> (1,1) -> (1,2) -> (0,2) -> (0,3) -> (1,3) -> (1,4) -> (2,4) -> (2,3) -> (3,3) -> (4,3) -> (4,2) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+1: (5,2) -> (5,3) -> (4,3) -> (4,4) -> (3,4) -> (3,3) -> (2,3) -> (2,2) -> (3,2) -> (4,2) -> (4,1) -> (5,1) -> (5,2)
+2: (2,0) -> (2,1) -> (1,1) -> (1,2) -> (1,3) -> (1,4) -> (0,4) -> (0,5) -> (1,5) -> (2,5) -> (3,5) -> (4,5) -> (4,4) -> (4,3) -> (4,2) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+3: (0,0) -> (1,0) -> (1,1) -> (0,1) -> (0,0)
+4: (3,1) -> (4,1) -> (4,2) -> (3,2) -> (3,1)
+5:
+6: (2,4) -> (3,4) -> (3,3) -> (2,3) -> (1,3) -> (1,2) -> (0,2) -> (0,3) -> (0,4) -> (0,5) -> (1,5) -> (1,4) -> (2,4)
+7: (0,2) -> (1,2) -> (1,1) -> (2,1) -> (2,0) -> (3,0) -> (4,0) -> (4,1) -> (5,1) -> (5,2) -> (5,3) -> (5,4) -> (5,5) -> (4,5) -> (3,5) -> (2,5) -> (2,4) -> (2,3) -> (1,3) -> (0,3) -> (0,2)
+8: (2,1) -> (3,1) -> (4,1) -> (5,1) -> (5,0) -> (4,0) -> (3,0) -> (2,0) -> (1,0) -> (0,0) -> (0,1) -> (0,2) -> (0,3) -> (0,4) -> (0,5) -> (1,5) -> (2,5) -> (2,4) -> (3,4) -> (4,4) -> (5,4) -> (5,3) -> (4,3) -> (3,3) -> (2,3) -> (2,2) -> (1,2) -> (1,1) -> (2,1)
+9: (1,1) -> (2,1) -> (2,0) -> (3,0) -> (3,1) -> (3,2) -> (4,2) -> (5,2) -> (5,3) -> (4,3) -> (3,3) -> (2,3) -> (2,4) -> (2,5) -> (1,5) -> (0,5) -> (0,4) -> (0,3) -> (0,2) -> (0,1) -> (0,0) -> (1,0) -> (1,1)
+10: (4,0) -> (4,1) -> (3,1) -> (2,1) -> (2,0) -> (1,0) -> (0,0) -> (0,1) -> (1,1) -> (1,2) -> (2,2) -> (2,3) -> (3,3) -> (4,3) -> (4,4) -> (5,4) -> (5,3) -> (5,2) -> (5,1) -> (5,0) -> (4,0)
+11: (5,2) -> (5,1) -> (4,1) -> (4,2) -> (4,3) -> (5,3) -> (5,2)
+12: (0,2) -> (1,2) -> (1,3) -> (0,3) -> (0,4) -> (1,4) -> (2,4) -> (2,5) -> (3,5) -> (4,5) -> (5,5) -> (5,4) -> (5,3) -> (4,3) -> (4,4) -> (3,4) -> (3,3) -> (2,3) -> (2,2) -> (2,1) -> (2,0) -> (1,0) -> (0,0) -> (0,1) -> (0,2)
+13: (5,0) -> (4,0) -> (3,0) -> (3,1) -> (3,2) -> (2,2) -> (2,3) -> (1,3) -> (1,4) -> (0,4) -> (0,5) -> (1,5) -> (2,5) -> (2,4) -> (3,4) -> (4,4) -> (4,5) -> (5,5) -> (5,4) -> (5,3) -> (4,3) -> (4,2) -> (5,2) -> (5,1) -> (5,0)
+14: (2,1) -> (1,1) -> (1,2) -> (2,2) -> (3,2) -> (3,3) -> (4,3) -> (4,4) -> (5,4) -> (5,5) -> (4,5) -> (3,5) -> (2,5) -> (1,5) -> (0,5) -> (0,4) -> (1,4) -> (1,3) -> (0,3) -> (0,2) -> (0,1) -> (0,0) -> (1,0) -> (2,0) -> (3,0) -> (4,0) -> (5,0) -> (5,1) -> (5,2) -> (4,2) -> (4,1) -> (3,1) -> (2,1)
+15: (1,4) -> (1,5) -> (2,5) -> (2,4) -> (2,3) -> (1,3) -> (1,2) -> (1,1) -> (0,1) -> (0,2) -> (0,3) -> (0,4) -> (1,4)
+16: (2,4) -> (3,4) -> (3,3) -> (2,3) -> (2,2) -> (1,2) -> (0,2) -> (0,3) -> (0,4) -> (1,4) -> (1,5) -> (2,5) -> (2,4)
+17: (2,4) -> (3,4) -> (3,5) -> (4,5) -> (5,5) -> (5,4) -> (4,4) -> (4,3) -> (3,3) -> (3,2) -> (2,2) -> (2,3) -> (2,4)
+18: (5,0) -> (5,1) -> (4,1) -> (4,2) -> (4,3) -> (5,3) -> (5,4) -> (5,5) -> (4,5) -> (4,4) -> (3,4) -> (3,5) -> (2,5) -> (1,5) -> (1,4) -> (0,4) -> (0,3) -> (0,2) -> (0,1) -> (0,0) -> (1,0) -> (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) -> (3,2) -> (3,1) -> (3,0) -> (4,0) -> (5,0)
+19: (2,1) -> (2,2) -> (3,2) -> (3,1) -> (2,1)
+20: (0,0) -> (1,0) -> (1,1) -> (2,1) -> (2,2) -> (1,2) -> (0,2) -> (0,1) -> (0,0)
+21: (5,2) -> (5,3) -> (5,4) -> (5,5) -> (4,5) -> (3,5) -> (2,5) -> (2,4) -> (3,4) -> (4,4) -> (4,3) -> (3,3) -> (3,2) -> (3,1) -> (4,1) -> (4,2) -> (5,2)
+22: (0,1) -> (1,1) -> (2,1) -> (2,2) -> (1,2) -> (1,3) -> (0,3) -> (0,2) -> (0,1)
+Ring Visualizations:
+Visualization of ring 0:
+. ↓ ← ← . .
+. ↓ . ↑ . .
+↓ ← . ↑ ← .
+→ ↓ → → ↑ .
+. → ↑ . . .
+. . . . . .
+
+Visualization of ring 1:
+. . . . . .
+. . . . → ↓
+. . → → ↑ ↓
+. . ↑ ← ↓ ←
+. . . ↑ ← .
+. . . . . .
+
+Visualization of ring 2:
+. . ↓ ← . .
+. ↓ ← ↑ . .
+. ↓ . ↑ ← .
+. ↓ . . ↑ .
+↓ ← . . ↑ .
+→ → → → ↑ .
+
+Visualization of ring 3:
+→ ↓ . . . .
+↑ ← . . . .
+. . . . . .
+. . . . . .
+. . . . . .
+. . . . . .
+
+Visualization of ring 4:
+. . . . . .
+. . . → ↓ .
+. . . ↑ ← .
+. . . . . .
+. . . . . .
+. . . . . .
+
+Visualization of ring 5:
+. . . . . .
+. . . . . .
+. . . . . .
+. . . . . .
+. . . . . .
+. . . . . .
+
+Visualization of ring 6:
+. . . . . .
+. . . . . .
+↓ ← . . . .
+↓ ↑ ← ← . .
+↓ → → ↑ . .
+→ ↑ . . . .
+
+Visualization of ring 7:
+. . → → ↓ .
+. → ↑ . → ↓
+→ ↑ . . . ↓
+↑ ← ← . . ↓
+. . ↑ . . ↓
+. . ↑ ← ← ←
+
+Visualization of ring 8:
+↓ ← ← ← ← ←
+↓ → → → → ↑
+↓ ↑ ← . . .
+↓ . ↑ ← ← ←
+↓ . → → → ↑
+→ → ↑ . . .
+
+Visualization of ring 9:
+→ ↓ → ↓ . .
+↑ → ↑ ↓ . .
+↑ . . → → ↓
+↑ . ↓ ← ← ←
+↑ . ↓ . . .
+↑ ← ← . . .
+
+Visualization of ring 10:
+↓ ← ← . ↓ ←
+→ ↓ ↑ ← ← ↑
+. → ↓ . . ↑
+. . → → ↓ ↑
+. . . . → ↑
+. . . . . .
+
+Visualization of ring 11:
+. . . . . .
+. . . . ↓ ←
+. . . . ↓ ↑
+. . . . → ↑
+. . . . . .
+. . . . . .
+
+Visualization of ring 12:
+↓ ← ← . . .
+↓ . ↑ . . .
+→ ↓ ↑ . . .
+↓ ← ↑ ← ↓ ←
+→ → ↓ ↑ ← ↑
+. . → → → ↑
+
+Visualization of ring 13:
+. . . ↓ ← ←
+. . . ↓ . ↑
+. . ↓ ← → ↑
+. ↓ ← . ↑ ←
+↓ ← → → ↓ ↑
+→ → ↑ . → ↑
+
+Visualization of ring 14:
+→ → → → → ↓
+↑ ↓ ← ← ← ↓
+↑ → → ↓ ↑ ←
+↑ ← . → ↓ .
+→ ↑ . . → ↓
+↑ ← ← ← ← ←
+
+Visualization of ring 15:
+. . . . . .
+↓ ← . . . .
+↓ ↑ . . . .
+↓ ↑ ← . . .
+→ ↓ ↑ . . .
+. → ↑ . . .
+
+Visualization of ring 16:
+. . . . . .
+. . . . . .
+↓ ← ← . . .
+↓ . ↑ ← . .
+→ ↓ → ↑ . .
+. → ↑ . . .
+
+Visualization of ring 17:
+. . . . . .
+. . . . . .
+. . ↓ ← . .
+. . ↓ ↑ ← .
+. . → ↓ ↑ ←
+. . . → → ↑
+
+Visualization of ring 18:
+→ ↓ . → → ↓
+↑ ↓ . ↑ ↓ ←
+↑ ↓ . ↑ ↓ .
+↑ → → ↑ → ↓
+↑ ← . ↓ ← ↓
+. ↑ ← ← ↑ ←
+
+Visualization of ring 19:
+. . . . . .
+. . ↓ ← . .
+. . → ↑ . .
+. . . . . .
+. . . . . .
+. . . . . .
+
+Visualization of ring 20:
+→ ↓ . . . .
+↑ → ↓ . . .
+↑ ← ← . . .
+. . . . . .
+. . . . . .
+. . . . . .
+
+Visualization of ring 21:
+. . . . . .
+. . . → ↓ .
+. . . ↑ → ↓
+. . . ↑ ← ↓
+. . → → ↑ ↓
+. . ↑ ← ← ←
+
+Visualization of ring 22:
+. . . . . .
+→ → ↓ . . .
+↑ ↓ ← . . .
+↑ ← . . . .
+. . . . . .
+. . . . . .
+
+Score: 8.61888888888889, Distance: 5.188888888888889, Length: 343
+========================================
+Generation 700
+Binary Strings:
+0: 01100011001111001000000000
+1: 00000000010011100010000001
+2: 00100011000111001110111100
+3: 10000000000000000000000001
+4: 00000000100000000000000001
+5: 00000000000000000000000000
+6: 00000000001100011100101000
+7: 10000110001110000101001111
+8: 11111100001000000000000000
+9: 00100011000110001100010001
+10: 11000111000011000100000000
+11: 00000000000000000000010000
+12: 10000100001000010000000000
+13: 00011001100011011110110000
+14: 11111110011110011111011001
+15: 00000100001000011000110000
+16: 00000011000100011000010000
+17: 00000000000010000110000110
+18: 01011110111011110111111111
+19: 01110011011111110011000000
+20: 10000110001000000000000001
+21: 00000000100001100011001111
+22: 00000000010000000000000001
+Ring Vertices:
+0: (2,0) -> (1,0) -> (1,1) -> (1,2) -> (0,2) -> (0,3) -> (1,3) -> (1,4) -> (2,4) -> (2,3) -> (3,3) -> (4,3) -> (4,2) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+1: (5,2) -> (5,3) -> (4,3) -> (4,4) -> (3,4) -> (3,3) -> (2,3) -> (2,2) -> (3,2) -> (4,2) -> (4,1) -> (5,1) -> (5,2)
+2: (2,0) -> (2,1) -> (1,1) -> (1,2) -> (1,3) -> (1,4) -> (0,4) -> (0,5) -> (1,5) -> (2,5) -> (3,5) -> (4,5) -> (4,4) -> (4,3) -> (4,2) -> (3,2) -> (3,1) -> (3,0) -> (2,0)
+3: (0,0) -> (1,0) -> (1,1) -> (0,1) -> (0,0)
+4: (3,1) -> (4,1) -> (4,2) -> (3,2) -> (3,1)
+5:
+6: (2,4) -> (3,4) -> (3,3) -> (2,3) -> (1,3) -> (1,2) -> (0,2) -> (0,3) -> (0,4) -> (0,5) -> (1,5) -> (1,4) -> (2,4)
+7: (0,2) -> (1,2) -> (1,1) -> (2,1) -> (2,0) -> (3,0) -> (4,0) -> (4,1) -> (5,1) -> (5,2) -> (5,3) -> (5,4) -> (5,5) -> (4,5) -> (3,5) -> (2,5) -> (2,4) -> (2,3) -> (1,3) -> (0,3) -> (0,2)
+8: (2,1) -> (3,1) -> (4,1) -> (5,1) -> (5,0) -> (4,0) -> (3,0) -> (2,0) -> (1,0) -> (0,0) -> (0,1) -> (0,2) -> (0,3) -> (0,4) -> (0,5) -> (1,5) -> (2,5) -> (2,4) -> (3,4) -> (4,4) -> (5,4) -> (5,3) -> (4,3) -> (3,3) -> (2,3) -> (2,2) -> (1,2) -> (1,1) -> (2,1)
+9: (1,1) -> (2,1) -> (2,0) -> (3,0) -> (3,1) -> (3,2) -> (4,2) -> (5,2) -> (5,3) -> (4,3) -> (3,3) -> (2,3) -> (2,4) -> (2,5) -> (1,5) -> (0,5) -> (0,4) -> (0,3) -> (0,2) -> (0,1) -> (0,0) -> (1,0) -> (1,1)
+10: (4,0) -> (4,1) -> (3,1) -> (2,1) -> (2,0) -> (1,0) -> (0,0) -> (0,1) -> (1,1) -> (1,2) -> (2,2) -> (2,3) -> (3,3) -> (4,3) -> (4,4) -> (5,4) -> (5,3) -> (5,2) -> (5,1) -> (5,0) -> (4,0)
+11: (5,2) -> (5,1) -> (4,1) -> (4,2) -> (4,3) -> (5,3) -> (5,2)
+12: (0,2) -> (1,2) -> (1,3) -> (0,3) -> (0,4) -> (1,4) -> (2,4) -> (2,5) -> (3,5) -> (4,5) -> (5,5) -> (5,4) -> (5,3) -> (4,3) -> (4,4) -> (3,4) -> (3,3) -> (2,3) -> (2,2) -> (2,1) -> (2,0) -> (1,0) -> (0,0) -> (0,1) -> (0,2)
+13: (5,0) -> (4,0) -> (3,0) -> (3,1) -> (3,2) -> (2,2) -> (2,3) -> (1,3) -> (1,4) -> (0,4) -> (0,5) -> (1,5) -> (2,5) -> (2,4) -> (3,4) -> (4,4) -> (4,5) -> (5,5) -> (5,4) -> (5,3) -> (4,3) -> (4,2) -> (5,2) -> (5,1) -> (5,0)
+14: (2,1) -> (1,1) -> (1,2) -> (2,2) -> (3,2) -> (3,3) -> (4,3) -> (4,4) -> (5,4) -> (5,5) -> (4,5) -> (3,5) -> (2,5) -> (1,5) -> (0,5) -> (0,4) -> (1,4) -> (1,3) -> (0,3) -> (0,2) -> (0,1) -> (0,0) -> (1,0) -> (2,0) -> (3,0) -> (4,0) -> (5,0) -> (5,1) -> (5,2) -> (4,2) -> (4,1) -> (3,1) -> (2,1)
+15: (1,4) -> (1,5) -> (2,5) -> (2,4) -> (2,3) -> (1,3) -> (1,2) -> (1,1) -> (0,1) -> (0,2) -> (0,3) -> (0,4) -> (1,4)
+16: (2,4) -> (3,4) -> (3,3) -> (2,3) -> (2,2) -> (1,2) -> (0,2) -> (0,3) -> (0,4) -> (1,4) -> (1,5) -> (2,5) -> (2,4)
+17: (2,4) -> (3,4) -> (3,5) -> (4,5) -> (5,5) -> (5,4) -> (4,4) -> (4,3) -> (3,3) -> (3,2) -> (2,2) -> (2,3) -> (2,4)
+18: (5,0) -> (5,1) -> (4,1) -> (4,2) -> (4,3) -> (5,3) -> (5,4) -> (5,5) -> (4,5) -> (4,4) -> (3,4) -> (3,5) -> (2,5) -> (1,5) -> (1,4) -> (0,4) -> (0,3) -> (0,2) -> (0,1) -> (0,0) -> (1,0) -> (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) -> (3,2) -> (3,1) -> (3,0) -> (4,0) -> (5,0)
+19: (2,1) -> (2,2) -> (3,2) -> (3,1) -> (2,1)
+20: (0,0) -> (1,0) -> (1,1) -> (2,1) -> (2,2) -> (1,2) -> (0,2) -> (0,1) -> (0,0)
+21: (5,2) -> (5,3) -> (5,4) -> (5,5) -> (4,5) -> (3,5) -> (2,5) -> (2,4) -> (3,4) -> (4,4) -> (4,3) -> (3,3) -> (3,2) -> (3,1) -> (4,1) -> (4,2) -> (5,2)
+22: (0,1) -> (1,1) -> (2,1) -> (2,2) -> (1,2) -> (1,3) -> (0,3) -> (0,2) -> (0,1)
+Ring Visualizations:
+Visualization of ring 0:
+. ↓ ← ← . .
+. ↓ . ↑ . .
+↓ ← . ↑ ← .
+→ ↓ → → ↑ .
+. → ↑ . . .
+. . . . . .
+
+Visualization of ring 1:
+. . . . . .
+. . . . → ↓
+. . → → ↑ ↓
+. . ↑ ← ↓ ←
+. . . ↑ ← .
+. . . . . .
+
+Visualization of ring 2:
+. . ↓ ← . .
+. ↓ ← ↑ . .
+. ↓ . ↑ ← .
+. ↓ . . ↑ .
+↓ ← . . ↑ .
+→ → → → ↑ .
+
+Visualization of ring 3:
+→ ↓ . . . .
+↑ ← . . . .
+. . . . . .
+. . . . . .
+. . . . . .
+. . . . . .
+
+Visualization of ring 4:
+. . . . . .
+. . . → ↓ .
+. . . ↑ ← .
+. . . . . .
+. . . . . .
+. . . . . .
+
+Visualization of ring 5:
+. . . . . .
+. . . . . .
+. . . . . .
+. . . . . .
+. . . . . .
+. . . . . .
+
+Visualization of ring 6:
+. . . . . .
+. . . . . .
+↓ ← . . . .
+↓ ↑ ← ← . .
+↓ → → ↑ . .
+→ ↑ . . . .
+
+Visualization of ring 7:
+. . → → ↓ .
+. → ↑ . → ↓
+→ ↑ . . . ↓
+↑ ← ← . . ↓
+. . ↑ . . ↓
+. . ↑ ← ← ←
+
+Visualization of ring 8:
+↓ ← ← ← ← ←
+↓ → → → → ↑
+↓ ↑ ← . . .
+↓ . ↑ ← ← ←
+↓ . → → → ↑
+→ → ↑ . . .
+
+Visualization of ring 9:
+→ ↓ → ↓ . .
+↑ → ↑ ↓ . .
+↑ . . → → ↓
+↑ . ↓ ← ← ←
+↑ . ↓ . . .
+↑ ← ← . . .
+
+Visualization of ring 10:
+↓ ← ← . ↓ ←
+→ ↓ ↑ ← ← ↑
+. → ↓ . . ↑
+. . → → ↓ ↑
+. . . . → ↑
+. . . . . .
+
+Visualization of ring 11:
+. . . . . .
+. . . . ↓ ←
+. . . . ↓ ↑
+. . . . → ↑
+. . . . . .
+. . . . . .
+
+Visualization of ring 12:
+↓ ← ← . . .
+↓ . ↑ . . .
+→ ↓ ↑ . . .
+↓ ← ↑ ← ↓ ←
+→ → ↓ ↑ ← ↑
+. . → → → ↑
+
+Visualization of ring 13:
+. . . ↓ ← ←
+. . . ↓ . ↑
+. . ↓ ← → ↑
+. ↓ ← . ↑ ←
+↓ ← → → ↓ ↑
+→ → ↑ . → ↑
+
+Visualization of ring 14:
+→ → → → → ↓
+↑ ↓ ← ← ← ↓
+↑ → → ↓ ↑ ←
+↑ ← . → ↓ .
+→ ↑ . . → ↓
+↑ ← ← ← ← ←
+
+Visualization of ring 15:
+. . . . . .
+↓ ← . . . .
+↓ ↑ . . . .
+↓ ↑ ← . . .
+→ ↓ ↑ . . .
+. → ↑ . . .
+
+Visualization of ring 16:
+. . . . . .
+. . . . . .
+↓ ← ← . . .
+↓ . ↑ ← . .
+→ ↓ → ↑ . .
+. → ↑ . . .
+
+Visualization of ring 17:
+. . . . . .
+. . . . . .
+. . ↓ ← . .
+. . ↓ ↑ ← .
+. . → ↓ ↑ ←
+. . . → → ↑
+
+Visualization of ring 18:
+→ ↓ . → → ↓
+↑ ↓ . ↑ ↓ ←
+↑ ↓ . ↑ ↓ .
+↑ → → ↑ → ↓
+↑ ← . ↓ ← ↓
+. ↑ ← ← ↑ ←
+
+Visualization of ring 19:
+. . . . . .
+. . ↓ ← . .
+. . → ↑ . .
+. . . . . .
+. . . . . .
+. . . . . .
+
+Visualization of ring 20:
+→ ↓ . . . .
+↑ → ↓ . . .
+↑ ← ← . . .
+. . . . . .
+. . . . . .
+. . . . . .
+
+Visualization of ring 21:
+. . . . . .
+. . . → ↓ .
+. . . ↑ → ↓
+. . . ↑ ← ↓
+. . → → ↑ ↓
+. . ↑ ← ← ←
+
+Visualization of ring 22:
+. . . . . .
+→ → ↓ . . .
+↑ ↓ ← . . .
+↑ ← . . . .
+. . . . . .
+. . . . . .
+
+Score: 8.61888888888889, Distance: 5.188888888888889, Length: 343
+========================================
diff --git a/Experiment Data/Routerless/routing_table.txt b/Experiment Data/Routerless/routing_table.txt
new file mode 100644
index 0000000000..1b8dcc3d71
--- /dev/null
+++ b/Experiment Data/Routerless/routing_table.txt	
@@ -0,0 +1,1084 @@
+Pair (0, 4):
+  Ring 1: Length = 1
+  Ring 2: Length = 7
+  Ring 6: Length = 7
+  Ring 4: Length = 9
+
+Pair (0, 8):
+  Ring 1: Length = 2
+  Ring 2: Length = 6
+  Ring 4: Length = 8
+
+Pair (0, 12):
+  Ring 1: Length = 3
+  Ring 2: Length = 5
+  Ring 4: Length = 7
+
+Pair (0, 1):
+  Ring 2: Length = 1
+  Ring 4: Length = 1
+  Ring 6: Length = 1
+  Ring 1: Length = 11
+
+Pair (0, 5):
+  Ring 2: Length = 2
+  Ring 6: Length = 6
+
+Pair (0, 9):
+  Ring 2: Length = 3
+
+Pair (0, 13):
+  Ring 1: Length = 4
+  Ring 2: Length = 4
+  Ring 4: Length = 6
+
+Pair (0, 2):
+  Ring 4: Length = 2
+  Ring 6: Length = 2
+  Ring 1: Length = 10
+
+Pair (0, 6):
+  Ring 4: Length = 3
+  Ring 6: Length = 5
+
+Pair (0, 10):
+  Ring 4: Length = 4
+
+Pair (0, 14):
+  Ring 1: Length = 5
+  Ring 4: Length = 5
+
+Pair (0, 3):
+  Ring 6: Length = 3
+  Ring 1: Length = 9
+
+Pair (0, 7):
+  Ring 6: Length = 4
+  Ring 1: Length = 8
+
+Pair (0, 11):
+  Ring 1: Length = 7
+
+Pair (0, 15):
+  Ring 1: Length = 6
+
+Pair (4, 0):
+  Ring 2: Length = 1
+  Ring 4: Length = 1
+  Ring 6: Length = 1
+  Ring 1: Length = 11
+
+Pair (4, 8):
+  Ring 1: Length = 1
+  Ring 2: Length = 7
+  Ring 7: Length = 7
+  Ring 4: Length = 9
+
+Pair (4, 12):
+  Ring 1: Length = 2
+  Ring 2: Length = 6
+  Ring 4: Length = 8
+
+Pair (4, 1):
+  Ring 2: Length = 2
+  Ring 4: Length = 2
+  Ring 6: Length = 2
+  Ring 1: Length = 10
+
+Pair (4, 5):
+  Ring 7: Length = 1
+  Ring 2: Length = 3
+  Ring 6: Length = 7
+
+Pair (4, 9):
+  Ring 2: Length = 4
+  Ring 7: Length = 6
+
+Pair (4, 13):
+  Ring 1: Length = 3
+  Ring 2: Length = 5
+  Ring 4: Length = 7
+
+Pair (4, 2):
+  Ring 4: Length = 3
+  Ring 6: Length = 3
+  Ring 1: Length = 9
+
+Pair (4, 6):
+  Ring 7: Length = 2
+  Ring 4: Length = 4
+  Ring 6: Length = 6
+
+Pair (4, 10):
+  Ring 4: Length = 5
+  Ring 7: Length = 5
+
+Pair (4, 14):
+  Ring 1: Length = 4
+  Ring 4: Length = 6
+
+Pair (4, 3):
+  Ring 6: Length = 4
+  Ring 1: Length = 8
+
+Pair (4, 7):
+  Ring 7: Length = 3
+  Ring 6: Length = 5
+  Ring 1: Length = 7
+
+Pair (4, 11):
+  Ring 7: Length = 4
+  Ring 1: Length = 6
+
+Pair (4, 15):
+  Ring 1: Length = 5
+
+Pair (8, 0):
+  Ring 2: Length = 2
+  Ring 4: Length = 2
+  Ring 1: Length = 10
+
+Pair (8, 4):
+  Ring 2: Length = 1
+  Ring 4: Length = 1
+  Ring 7: Length = 1
+  Ring 1: Length = 11
+
+Pair (8, 12):
+  Ring 1: Length = 1
+  Ring 2: Length = 7
+  Ring 8: Length = 7
+  Ring 4: Length = 9
+
+Pair (8, 1):
+  Ring 2: Length = 3
+  Ring 4: Length = 3
+  Ring 1: Length = 9
+
+Pair (8, 5):
+  Ring 7: Length = 2
+  Ring 2: Length = 4
+
+Pair (8, 9):
+  Ring 8: Length = 1
+  Ring 2: Length = 5
+  Ring 7: Length = 7
+
+Pair (8, 13):
+  Ring 1: Length = 2
+  Ring 2: Length = 6
+  Ring 8: Length = 6
+  Ring 4: Length = 8
+
+Pair (8, 2):
+  Ring 4: Length = 4
+  Ring 1: Length = 8
+
+Pair (8, 6):
+  Ring 7: Length = 3
+  Ring 4: Length = 5
+
+Pair (8, 10):
+  Ring 8: Length = 2
+  Ring 4: Length = 6
+  Ring 7: Length = 6
+
+Pair (8, 14):
+  Ring 1: Length = 3
+  Ring 8: Length = 5
+  Ring 4: Length = 7
+
+Pair (8, 3):
+  Ring 1: Length = 7
+
+Pair (8, 7):
+  Ring 7: Length = 4
+  Ring 1: Length = 6
+
+Pair (8, 11):
+  Ring 8: Length = 3
+  Ring 1: Length = 5
+  Ring 7: Length = 5
+
+Pair (8, 15):
+  Ring 1: Length = 4
+  Ring 8: Length = 4
+
+Pair (12, 0):
+  Ring 2: Length = 3
+  Ring 4: Length = 3
+  Ring 1: Length = 9
+
+Pair (12, 4):
+  Ring 2: Length = 2
+  Ring 4: Length = 2
+  Ring 1: Length = 10
+
+Pair (12, 8):
+  Ring 2: Length = 1
+  Ring 4: Length = 1
+  Ring 8: Length = 1
+  Ring 1: Length = 11
+
+Pair (12, 1):
+  Ring 2: Length = 4
+  Ring 4: Length = 4
+  Ring 1: Length = 8
+
+Pair (12, 5):
+  Ring 2: Length = 5
+
+Pair (12, 9):
+  Ring 8: Length = 2
+  Ring 2: Length = 6
+
+Pair (12, 13):
+  Ring 1: Length = 1
+  Ring 2: Length = 7
+  Ring 8: Length = 7
+  Ring 4: Length = 9
+
+Pair (12, 2):
+  Ring 4: Length = 5
+  Ring 1: Length = 7
+
+Pair (12, 6):
+  Ring 4: Length = 6
+
+Pair (12, 10):
+  Ring 8: Length = 3
+  Ring 4: Length = 7
+
+Pair (12, 14):
+  Ring 1: Length = 2
+  Ring 8: Length = 6
+  Ring 4: Length = 8
+
+Pair (12, 3):
+  Ring 1: Length = 6
+
+Pair (12, 7):
+  Ring 1: Length = 5
+
+Pair (12, 11):
+  Ring 1: Length = 4
+  Ring 8: Length = 4
+
+Pair (12, 15):
+  Ring 1: Length = 3
+  Ring 8: Length = 5
+
+Pair (1, 0):
+  Ring 1: Length = 1
+  Ring 2: Length = 7
+  Ring 6: Length = 7
+  Ring 4: Length = 9
+
+Pair (1, 4):
+  Ring 1: Length = 2
+  Ring 2: Length = 6
+  Ring 6: Length = 6
+  Ring 4: Length = 8
+
+Pair (1, 8):
+  Ring 1: Length = 3
+  Ring 2: Length = 5
+  Ring 4: Length = 7
+
+Pair (1, 12):
+  Ring 1: Length = 4
+  Ring 2: Length = 4
+  Ring 4: Length = 6
+
+Pair (1, 5):
+  Ring 2: Length = 1
+  Ring 6: Length = 5
+  Ring 3: Length = 9
+
+Pair (1, 9):
+  Ring 2: Length = 2
+  Ring 3: Length = 8
+
+Pair (1, 13):
+  Ring 2: Length = 3
+  Ring 1: Length = 5
+  Ring 4: Length = 5
+  Ring 3: Length = 7
+
+Pair (1, 2):
+  Ring 3: Length = 1
+  Ring 4: Length = 1
+  Ring 6: Length = 1
+  Ring 1: Length = 11
+
+Pair (1, 6):
+  Ring 4: Length = 2
+  Ring 6: Length = 4
+
+Pair (1, 10):
+  Ring 4: Length = 3
+
+Pair (1, 14):
+  Ring 4: Length = 4
+  Ring 1: Length = 6
+  Ring 3: Length = 6
+
+Pair (1, 3):
+  Ring 3: Length = 2
+  Ring 6: Length = 2
+  Ring 1: Length = 10
+
+Pair (1, 7):
+  Ring 3: Length = 3
+  Ring 6: Length = 3
+  Ring 1: Length = 9
+
+Pair (1, 11):
+  Ring 3: Length = 4
+  Ring 1: Length = 8
+
+Pair (1, 15):
+  Ring 3: Length = 5
+  Ring 1: Length = 7
+
+Pair (5, 0):
+  Ring 6: Length = 2
+  Ring 2: Length = 6
+
+Pair (5, 4):
+  Ring 6: Length = 1
+  Ring 2: Length = 5
+  Ring 7: Length = 7
+
+Pair (5, 8):
+  Ring 2: Length = 4
+  Ring 7: Length = 6
+
+Pair (5, 12):
+  Ring 2: Length = 3
+
+Pair (5, 1):
+  Ring 3: Length = 1
+  Ring 6: Length = 3
+  Ring 2: Length = 7
+
+Pair (5, 9):
+  Ring 0: Length = 1
+  Ring 2: Length = 1
+  Ring 7: Length = 5
+  Ring 3: Length = 9
+
+Pair (5, 13):
+  Ring 2: Length = 2
+  Ring 3: Length = 8
+
+Pair (5, 2):
+  Ring 3: Length = 2
+  Ring 6: Length = 4
+
+Pair (5, 6):
+  Ring 7: Length = 1
+  Ring 0: Length = 3
+  Ring 6: Length = 7
+
+Pair (5, 10):
+  Ring 0: Length = 2
+  Ring 7: Length = 4
+
+Pair (5, 14):
+  Ring 3: Length = 7
+
+Pair (5, 3):
+  Ring 3: Length = 3
+  Ring 6: Length = 5
+
+Pair (5, 7):
+  Ring 7: Length = 2
+  Ring 3: Length = 4
+  Ring 6: Length = 6
+
+Pair (5, 11):
+  Ring 7: Length = 3
+  Ring 3: Length = 5
+
+Pair (5, 15):
+  Ring 3: Length = 6
+
+Pair (9, 0):
+  Ring 2: Length = 5
+
+Pair (9, 4):
+  Ring 7: Length = 2
+  Ring 2: Length = 4
+
+Pair (9, 8):
+  Ring 7: Length = 1
+  Ring 2: Length = 3
+  Ring 8: Length = 7
+
+Pair (9, 12):
+  Ring 2: Length = 2
+  Ring 8: Length = 6
+
+Pair (9, 1):
+  Ring 3: Length = 2
+  Ring 2: Length = 6
+
+Pair (9, 5):
+  Ring 3: Length = 1
+  Ring 0: Length = 3
+  Ring 7: Length = 3
+  Ring 2: Length = 7
+
+Pair (9, 13):
+  Ring 2: Length = 1
+  Ring 8: Length = 5
+  Ring 3: Length = 9
+
+Pair (9, 2):
+  Ring 3: Length = 3
+
+Pair (9, 6):
+  Ring 0: Length = 2
+  Ring 7: Length = 4
+
+Pair (9, 10):
+  Ring 0: Length = 1
+  Ring 8: Length = 1
+  Ring 7: Length = 7
+
+Pair (9, 14):
+  Ring 8: Length = 4
+  Ring 3: Length = 8
+
+Pair (9, 3):
+  Ring 3: Length = 4
+
+Pair (9, 7):
+  Ring 3: Length = 5
+  Ring 7: Length = 5
+
+Pair (9, 11):
+  Ring 8: Length = 2
+  Ring 3: Length = 6
+  Ring 7: Length = 6
+
+Pair (9, 15):
+  Ring 8: Length = 3
+  Ring 3: Length = 7
+
+Pair (13, 0):
+  Ring 2: Length = 4
+  Ring 4: Length = 4
+  Ring 1: Length = 8
+
+Pair (13, 4):
+  Ring 2: Length = 3
+  Ring 4: Length = 3
+  Ring 1: Length = 9
+
+Pair (13, 8):
+  Ring 2: Length = 2
+  Ring 4: Length = 2
+  Ring 8: Length = 2
+  Ring 1: Length = 10
+
+Pair (13, 12):
+  Ring 2: Length = 1
+  Ring 4: Length = 1
+  Ring 8: Length = 1
+  Ring 1: Length = 11
+
+Pair (13, 1):
+  Ring 3: Length = 3
+  Ring 2: Length = 5
+  Ring 4: Length = 5
+  Ring 1: Length = 7
+
+Pair (13, 5):
+  Ring 3: Length = 2
+  Ring 2: Length = 6
+
+Pair (13, 9):
+  Ring 3: Length = 1
+  Ring 8: Length = 3
+  Ring 2: Length = 7
+
+Pair (13, 2):
+  Ring 3: Length = 4
+  Ring 1: Length = 6
+  Ring 4: Length = 6
+
+Pair (13, 6):
+  Ring 4: Length = 7
+
+Pair (13, 10):
+  Ring 8: Length = 4
+  Ring 4: Length = 8
+
+Pair (13, 14):
+  Ring 1: Length = 1
+  Ring 8: Length = 7
+  Ring 3: Length = 9
+  Ring 4: Length = 9
+
+Pair (13, 3):
+  Ring 1: Length = 5
+  Ring 3: Length = 5
+
+Pair (13, 7):
+  Ring 1: Length = 4
+  Ring 3: Length = 6
+
+Pair (13, 11):
+  Ring 1: Length = 3
+  Ring 8: Length = 5
+  Ring 3: Length = 7
+
+Pair (13, 15):
+  Ring 1: Length = 2
+  Ring 8: Length = 6
+  Ring 3: Length = 8
+
+Pair (2, 0):
+  Ring 1: Length = 2
+  Ring 6: Length = 6
+  Ring 4: Length = 8
+
+Pair (2, 4):
+  Ring 1: Length = 3
+  Ring 6: Length = 5
+  Ring 4: Length = 7
+
+Pair (2, 8):
+  Ring 1: Length = 4
+  Ring 4: Length = 6
+
+Pair (2, 12):
+  Ring 1: Length = 5
+  Ring 4: Length = 5
+
+Pair (2, 1):
+  Ring 1: Length = 1
+  Ring 6: Length = 7
+  Ring 3: Length = 9
+  Ring 4: Length = 9
+
+Pair (2, 5):
+  Ring 6: Length = 4
+  Ring 3: Length = 8
+
+Pair (2, 9):
+  Ring 3: Length = 7
+
+Pair (2, 13):
+  Ring 4: Length = 4
+  Ring 1: Length = 6
+  Ring 3: Length = 6
+
+Pair (2, 6):
+  Ring 4: Length = 1
+  Ring 6: Length = 3
+  Ring 5: Length = 7
+
+Pair (2, 10):
+  Ring 4: Length = 2
+  Ring 5: Length = 6
+
+Pair (2, 14):
+  Ring 4: Length = 3
+  Ring 3: Length = 5
+  Ring 5: Length = 5
+  Ring 1: Length = 7
+
+Pair (2, 3):
+  Ring 3: Length = 1
+  Ring 5: Length = 1
+  Ring 6: Length = 1
+  Ring 1: Length = 11
+
+Pair (2, 7):
+  Ring 3: Length = 2
+  Ring 5: Length = 2
+  Ring 6: Length = 2
+  Ring 1: Length = 10
+
+Pair (2, 11):
+  Ring 3: Length = 3
+  Ring 5: Length = 3
+  Ring 1: Length = 9
+
+Pair (2, 15):
+  Ring 3: Length = 4
+  Ring 5: Length = 4
+  Ring 1: Length = 8
+
+Pair (6, 0):
+  Ring 6: Length = 3
+  Ring 4: Length = 7
+
+Pair (6, 4):
+  Ring 6: Length = 2
+  Ring 4: Length = 6
+  Ring 7: Length = 6
+
+Pair (6, 8):
+  Ring 4: Length = 5
+  Ring 7: Length = 5
+
+Pair (6, 12):
+  Ring 4: Length = 4
+
+Pair (6, 1):
+  Ring 6: Length = 4
+  Ring 4: Length = 8
+
+Pair (6, 5):
+  Ring 0: Length = 1
+  Ring 6: Length = 1
+  Ring 7: Length = 7
+
+Pair (6, 9):
+  Ring 0: Length = 2
+  Ring 7: Length = 4
+
+Pair (6, 13):
+  Ring 4: Length = 3
+
+Pair (6, 2):
+  Ring 5: Length = 1
+  Ring 6: Length = 5
+  Ring 4: Length = 9
+
+Pair (6, 10):
+  Ring 4: Length = 1
+  Ring 0: Length = 3
+  Ring 7: Length = 3
+  Ring 5: Length = 7
+
+Pair (6, 14):
+  Ring 4: Length = 2
+  Ring 5: Length = 6
+
+Pair (6, 3):
+  Ring 5: Length = 2
+  Ring 6: Length = 6
+
+Pair (6, 7):
+  Ring 7: Length = 1
+  Ring 5: Length = 3
+  Ring 6: Length = 7
+
+Pair (6, 11):
+  Ring 7: Length = 2
+  Ring 5: Length = 4
+
+Pair (6, 15):
+  Ring 5: Length = 5
+
+Pair (10, 0):
+  Ring 4: Length = 6
+
+Pair (10, 4):
+  Ring 7: Length = 3
+  Ring 4: Length = 5
+
+Pair (10, 8):
+  Ring 7: Length = 2
+  Ring 4: Length = 4
+  Ring 8: Length = 6
+
+Pair (10, 12):
+  Ring 4: Length = 3
+  Ring 8: Length = 5
+
+Pair (10, 1):
+  Ring 4: Length = 7
+
+Pair (10, 5):
+  Ring 0: Length = 2
+  Ring 7: Length = 4
+
+Pair (10, 9):
+  Ring 7: Length = 1
+  Ring 0: Length = 3
+  Ring 8: Length = 7
+
+Pair (10, 13):
+  Ring 4: Length = 2
+  Ring 8: Length = 4
+
+Pair (10, 2):
+  Ring 5: Length = 2
+  Ring 4: Length = 8
+
+Pair (10, 6):
+  Ring 0: Length = 1
+  Ring 5: Length = 1
+  Ring 7: Length = 5
+  Ring 4: Length = 9
+
+Pair (10, 14):
+  Ring 4: Length = 1
+  Ring 8: Length = 3
+  Ring 5: Length = 7
+
+Pair (10, 3):
+  Ring 5: Length = 3
+
+Pair (10, 7):
+  Ring 5: Length = 4
+  Ring 7: Length = 6
+
+Pair (10, 11):
+  Ring 8: Length = 1
+  Ring 5: Length = 5
+  Ring 7: Length = 7
+
+Pair (10, 15):
+  Ring 8: Length = 2
+  Ring 5: Length = 6
+
+Pair (14, 0):
+  Ring 4: Length = 5
+  Ring 1: Length = 7
+
+Pair (14, 4):
+  Ring 4: Length = 4
+  Ring 1: Length = 8
+
+Pair (14, 8):
+  Ring 4: Length = 3
+  Ring 8: Length = 3
+  Ring 1: Length = 9
+
+Pair (14, 12):
+  Ring 4: Length = 2
+  Ring 8: Length = 2
+  Ring 1: Length = 10
+
+Pair (14, 1):
+  Ring 3: Length = 4
+  Ring 1: Length = 6
+  Ring 4: Length = 6
+
+Pair (14, 5):
+  Ring 3: Length = 3
+
+Pair (14, 9):
+  Ring 3: Length = 2
+  Ring 8: Length = 4
+
+Pair (14, 13):
+  Ring 3: Length = 1
+  Ring 4: Length = 1
+  Ring 8: Length = 1
+  Ring 1: Length = 11
+
+Pair (14, 2):
+  Ring 5: Length = 3
+  Ring 1: Length = 5
+  Ring 3: Length = 5
+  Ring 4: Length = 7
+
+Pair (14, 6):
+  Ring 5: Length = 2
+  Ring 4: Length = 8
+
+Pair (14, 10):
+  Ring 5: Length = 1
+  Ring 8: Length = 5
+  Ring 4: Length = 9
+
+Pair (14, 3):
+  Ring 1: Length = 4
+  Ring 5: Length = 4
+  Ring 3: Length = 6
+
+Pair (14, 7):
+  Ring 1: Length = 3
+  Ring 5: Length = 5
+  Ring 3: Length = 7
+
+Pair (14, 11):
+  Ring 1: Length = 2
+  Ring 5: Length = 6
+  Ring 8: Length = 6
+  Ring 3: Length = 8
+
+Pair (14, 15):
+  Ring 1: Length = 1
+  Ring 5: Length = 7
+  Ring 8: Length = 7
+  Ring 3: Length = 9
+
+Pair (3, 0):
+  Ring 1: Length = 3
+  Ring 6: Length = 5
+
+Pair (3, 4):
+  Ring 1: Length = 4
+  Ring 6: Length = 4
+
+Pair (3, 8):
+  Ring 1: Length = 5
+
+Pair (3, 12):
+  Ring 1: Length = 6
+
+Pair (3, 1):
+  Ring 1: Length = 2
+  Ring 6: Length = 6
+  Ring 3: Length = 8
+
+Pair (3, 5):
+  Ring 6: Length = 3
+  Ring 3: Length = 7
+
+Pair (3, 9):
+  Ring 3: Length = 6
+
+Pair (3, 13):
+  Ring 3: Length = 5
+  Ring 1: Length = 7
+
+Pair (3, 2):
+  Ring 1: Length = 1
+  Ring 5: Length = 7
+  Ring 6: Length = 7
+  Ring 3: Length = 9
+
+Pair (3, 6):
+  Ring 6: Length = 2
+  Ring 5: Length = 6
+
+Pair (3, 10):
+  Ring 5: Length = 5
+
+Pair (3, 14):
+  Ring 3: Length = 4
+  Ring 5: Length = 4
+  Ring 1: Length = 8
+
+Pair (3, 7):
+  Ring 3: Length = 1
+  Ring 5: Length = 1
+  Ring 6: Length = 1
+  Ring 1: Length = 11
+
+Pair (3, 11):
+  Ring 3: Length = 2
+  Ring 5: Length = 2
+  Ring 1: Length = 10
+
+Pair (3, 15):
+  Ring 3: Length = 3
+  Ring 5: Length = 3
+  Ring 1: Length = 9
+
+Pair (7, 0):
+  Ring 1: Length = 4
+  Ring 6: Length = 4
+
+Pair (7, 4):
+  Ring 6: Length = 3
+  Ring 1: Length = 5
+  Ring 7: Length = 5
+
+Pair (7, 8):
+  Ring 7: Length = 4
+  Ring 1: Length = 6
+
+Pair (7, 12):
+  Ring 1: Length = 7
+
+Pair (7, 1):
+  Ring 1: Length = 3
+  Ring 6: Length = 5
+  Ring 3: Length = 7
+
+Pair (7, 5):
+  Ring 6: Length = 2
+  Ring 3: Length = 6
+  Ring 7: Length = 6
+
+Pair (7, 9):
+  Ring 7: Length = 3
+  Ring 3: Length = 5
+
+Pair (7, 13):
+  Ring 3: Length = 4
+  Ring 1: Length = 8
+
+Pair (7, 2):
+  Ring 1: Length = 2
+  Ring 5: Length = 6
+  Ring 6: Length = 6
+  Ring 3: Length = 8
+
+Pair (7, 6):
+  Ring 6: Length = 1
+  Ring 5: Length = 5
+  Ring 7: Length = 7
+
+Pair (7, 10):
+  Ring 7: Length = 2
+  Ring 5: Length = 4
+
+Pair (7, 14):
+  Ring 3: Length = 3
+  Ring 5: Length = 3
+  Ring 1: Length = 9
+
+Pair (7, 3):
+  Ring 1: Length = 1
+  Ring 5: Length = 7
+  Ring 6: Length = 7
+  Ring 3: Length = 9
+
+Pair (7, 11):
+  Ring 3: Length = 1
+  Ring 5: Length = 1
+  Ring 7: Length = 1
+  Ring 1: Length = 11
+
+Pair (7, 15):
+  Ring 3: Length = 2
+  Ring 5: Length = 2
+  Ring 1: Length = 10
+
+Pair (11, 0):
+  Ring 1: Length = 5
+
+Pair (11, 4):
+  Ring 7: Length = 4
+  Ring 1: Length = 6
+
+Pair (11, 8):
+  Ring 7: Length = 3
+  Ring 8: Length = 5
+  Ring 1: Length = 7
+
+Pair (11, 12):
+  Ring 8: Length = 4
+  Ring 1: Length = 8
+
+Pair (11, 1):
+  Ring 1: Length = 4
+  Ring 3: Length = 6
+
+Pair (11, 5):
+  Ring 3: Length = 5
+  Ring 7: Length = 5
+
+Pair (11, 9):
+  Ring 7: Length = 2
+  Ring 3: Length = 4
+  Ring 8: Length = 6
+
+Pair (11, 13):
+  Ring 3: Length = 3
+  Ring 8: Length = 3
+  Ring 1: Length = 9
+
+Pair (11, 2):
+  Ring 1: Length = 3
+  Ring 5: Length = 5
+  Ring 3: Length = 7
+
+Pair (11, 6):
+  Ring 5: Length = 4
+  Ring 7: Length = 6
+
+Pair (11, 10):
+  Ring 7: Length = 1
+  Ring 5: Length = 3
+  Ring 8: Length = 7
+
+Pair (11, 14):
+  Ring 3: Length = 2
+  Ring 5: Length = 2
+  Ring 8: Length = 2
+  Ring 1: Length = 10
+
+Pair (11, 3):
+  Ring 1: Length = 2
+  Ring 5: Length = 6
+  Ring 3: Length = 8
+
+Pair (11, 7):
+  Ring 1: Length = 1
+  Ring 5: Length = 7
+  Ring 7: Length = 7
+  Ring 3: Length = 9
+
+Pair (11, 15):
+  Ring 3: Length = 1
+  Ring 5: Length = 1
+  Ring 8: Length = 1
+  Ring 1: Length = 11
+
+Pair (15, 0):
+  Ring 1: Length = 6
+
+Pair (15, 4):
+  Ring 1: Length = 7
+
+Pair (15, 8):
+  Ring 8: Length = 4
+  Ring 1: Length = 8
+
+Pair (15, 12):
+  Ring 8: Length = 3
+  Ring 1: Length = 9
+
+Pair (15, 1):
+  Ring 1: Length = 5
+  Ring 3: Length = 5
+
+Pair (15, 5):
+  Ring 3: Length = 4
+
+Pair (15, 9):
+  Ring 3: Length = 3
+  Ring 8: Length = 5
+
+Pair (15, 13):
+  Ring 3: Length = 2
+  Ring 8: Length = 2
+  Ring 1: Length = 10
+
+Pair (15, 2):
+  Ring 1: Length = 4
+  Ring 5: Length = 4
+  Ring 3: Length = 6
+
+Pair (15, 6):
+  Ring 5: Length = 3
+
+Pair (15, 10):
+  Ring 5: Length = 2
+  Ring 8: Length = 6
+
+Pair (15, 14):
+  Ring 3: Length = 1
+  Ring 5: Length = 1
+  Ring 8: Length = 1
+  Ring 1: Length = 11
+
+Pair (15, 3):
+  Ring 1: Length = 3
+  Ring 5: Length = 5
+  Ring 3: Length = 7
+
+Pair (15, 7):
+  Ring 1: Length = 2
+  Ring 5: Length = 6
+  Ring 3: Length = 8
+
+Pair (15, 11):
+  Ring 1: Length = 1
+  Ring 5: Length = 7
+  Ring 8: Length = 7
+  Ring 3: Length = 9
+
diff --git a/Experiment Data/bestIMR.txt b/Experiment Data/bestIMR.txt
new file mode 100644
index 0000000000..f5f16268c5
--- /dev/null
+++ b/Experiment Data/bestIMR.txt	
@@ -0,0 +1,57 @@
+Ring Vertices:
+0: (3,0) -> (3,1) -> (3,2) -> (3,3) -> (2,3) -> (1,3) -> (0,3) -> (0,2) -> (1,2) -> (2,2) -> (2,1) -> (2,0) -> (3,0)
+1: (0,3) -> (1,3) -> (2,3) -> (3,3) -> (3,2) -> (2,2) -> (1,2) -> (1,1) -> (0,1) -> (0,2) -> (0,3)
+2: (3,0) -> (3,1) -> (3,2) -> (2,2) -> (1,2) -> (1,1) -> (0,1) -> (0,0) -> (1,0) -> (2,0) -> (3,0)
+3: (3,0) -> (2,0) -> (1,0) -> (1,1) -> (1,2) -> (1,3) -> (2,3) -> (2,2) -> (3,2) -> (3,1) -> (3,0)
+4: (1,1) -> (2,1) -> (3,1) -> (3,0) -> (2,0) -> (1,0) -> (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (1,2) -> (1,1)
+5: (2,3) -> (3,3) -> (3,2) -> (3,1) -> (2,1) -> (2,0) -> (1,0) -> (0,0) -> (0,1) -> (1,1) -> (1,2) -> (2,2) -> (2,3)
+6: (1,1) -> (2,1) -> (2,2) -> (3,2) -> (3,3) -> (2,3) -> (1,3) -> (1,2) -> (0,2) -> (0,1) -> (0,0) -> (1,0) -> (1,1)
+7: (0,2) -> (1,2) -> (1,3) -> (0,3) -> (0,2)
+8: (0,3) -> (0,2) -> (0,1) -> (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2) -> (2,3) -> (1,3) -> (0,3)
+Edge Count:
+((3,0),(3,1)): 2
+((3,1),(3,2)): 2
+((3,2),(3,3)): 2
+((3,3),(2,3)): 2
+((2,3),(1,3)): 3
+((1,3),(0,3)): 3
+((0,3),(0,2)): 3
+((0,2),(1,2)): 2
+((1,2),(2,2)): 2
+((2,2),(2,1)): 1
+((2,1),(2,0)): 2
+((2,0),(3,0)): 2
+((0,3),(1,3)): 2
+((1,3),(2,3)): 2
+((2,3),(3,3)): 2
+((3,3),(3,2)): 2
+((3,2),(2,2)): 2
+((2,2),(1,2)): 2
+((1,2),(1,1)): 3
+((1,1),(0,1)): 2
+((0,1),(0,2)): 2
+((0,2),(0,3)): 2
+((0,1),(0,0)): 3
+((0,0),(1,0)): 3
+((1,0),(2,0)): 2
+((3,0),(2,0)): 2
+((2,0),(1,0)): 3
+((1,0),(1,1)): 2
+((1,1),(1,2)): 2
+((1,2),(1,3)): 2
+((2,3),(2,2)): 1
+((2,2),(3,2)): 2
+((3,2),(3,1)): 2
+((3,1),(3,0)): 2
+((1,1),(2,1)): 2
+((2,1),(3,1)): 1
+((1,0),(0,0)): 2
+((0,0),(0,1)): 2
+((1,3),(1,2)): 2
+((3,1),(2,1)): 1
+((0,1),(1,1)): 1
+((2,2),(2,3)): 2
+((2,1),(2,2)): 2
+((1,2),(0,2)): 1
+((0,2),(0,1)): 2
+((2,0),(2,1)): 1
diff --git a/configs/example/garnet_synth_traffic.py b/configs/example/garnet_synth_traffic.py
index 1da82e11b8..e3619139e1 100644
--- a/configs/example/garnet_synth_traffic.py
+++ b/configs/example/garnet_synth_traffic.py
@@ -124,6 +124,10 @@ Ruby.define_options(parser)

 args = parser.parse_args()

+with open("./m5out/statistic.txt", "a") as file:
+    file.write("num_cpus="+str(args.num_cpus) + "\n")
+    file.write("sim_cycles="+str(args.sim_cycles) + "\n")
+
 cpus = [
     GarnetSyntheticTraffic(
         num_packets_max=args.num_packets_max,
@@ -173,7 +177,7 @@ root = Root(full_system=False, system=system)
 root.system.mem_mode = "timing"

 # Not much point in this being higher than the L1 latency
-m5.ticks.setGlobalFrequency("1ps")
+m5.ticks.setGlobalFrequency("20ps")

 # instantiate configuration
 m5.instantiate()
diff --git a/configs/network/Network.py b/configs/network/Network.py
index a5334741c0..fff4944140 100644
--- a/configs/network/Network.py
+++ b/configs/network/Network.py
@@ -95,7 +95,10 @@ def define_options(parser):
         help="""routing algorithm in network.
             0: weight-based table
             1: XY (for Mesh. see garnet/RoutingUnit.cc)
-            2: Custom (see garnet/RoutingUnit.cc""",
+            2: Custom (see garnet/RoutingUnit.cc)
+            3: Ring
+            4: IMR
+            5: RL""",
     )
     parser.add_argument(
         "--network-fault-model",
diff --git a/configs/topologies/ConstructIMR.py b/configs/topologies/ConstructIMR.py
new file mode 100644
index 0000000000..0b8ba8cbf7
--- /dev/null
+++ b/configs/topologies/ConstructIMR.py
@@ -0,0 +1,618 @@
+import random
+from collections import defaultdict
+import json
+import os
+import argparse
+import copy
+
+
+class Solution:
+    # Our protocal: 1~(N-1)^2 represnets rings, the last bit represents direction.
+    def __init__(self, N=16, k=8, p=0.01, lam=0.01, lam_1=1, objective='default'):
+        self.lam = lam
+        self.lam_1 = lam_1
+        self.objective = objective
+        self.N = N
+        self.k = k
+        self.p = p
+        self.binary_strings = []
+        self.ring_vertices = {}
+        self.ring_edges = {}
+        self.edge_count = {}
+        for index in range(self.k):
+            self.ring_vertices[index] = []
+            self.ring_edges[index] = []
+        self.num_digits = (N - 1) ** 2 + 1
+        for _ in range(k):
+            binary_string = ''.join(random.choice('01')
+                                    for _ in range(self.num_digits))
+            self.binary_strings.append(binary_string)
+        for _ in range(k):
+            self.retain_connected_component(_)
+            self.compute_rings()
+
+    def compute_rings(self):
+        for index in range(self.k):
+            binary_string = self.binary_strings[index]
+            grid_size = self.N - 1
+            edges = set()
+            vertices = set()
+
+            for i in range(grid_size):
+                for j in range(grid_size):
+                    # Current grid point
+                    current_index = i * grid_size + j
+                    if binary_string[current_index] == '1':
+                        # Check right edge
+                        if j + 1 < grid_size:
+                            right_index = i * grid_size + (j + 1)
+                            if binary_string[right_index] == '0':
+                                edges.add(((j + 1, i), (j + 1, i + 1)))
+                                vertices.update([(j + 1, i), (j + 1, i + 1)])
+                        else:
+                            edges.add(((j + 1, i), (j + 1, i + 1)))
+                            vertices.update([(j + 1, i), (j + 1, i + 1)])
+
+                        # Check bottom edge
+                        if i + 1 < grid_size:
+                            bottom_index = (i + 1) * grid_size + j
+                            if binary_string[bottom_index] == '0':
+                                edges.add(((j, i + 1), (j + 1, i + 1)))
+                                vertices.update([(j, i + 1), (j + 1, i + 1)])
+                        else:
+                            edges.add(((j, i + 1), (j + 1, i + 1)))
+                            vertices.update([(j, i + 1), (j + 1, i + 1)])
+
+                        # Check left edge
+                        if j - 1 >= 0:
+                            left_index = i * grid_size + (j - 1)
+                            if binary_string[left_index] == '0':
+                                edges.add(((j, i), (j, i + 1)))
+                                vertices.update([(j, i), (j, i + 1)])
+                        else:
+                            edges.add(((j, i), (j, i + 1)))
+                            vertices.update([(j, i), (j, i + 1)])
+
+                        # Check top edge
+                        if i - 1 >= 0:
+                            top_index = (i - 1) * grid_size + j
+                            if binary_string[top_index] == '0':
+                                edges.add(((j, i), (j + 1, i)))
+                                vertices.update([(j, i), (j + 1, i)])
+                        else:
+                            # Add top edge if on boundary
+                            edges.add(((j, i), (j + 1, i)))
+                            vertices.update([(j, i), (j + 1, i)])
+
+            edge_loop = []
+            if edges:
+                start_edge = edges.pop()
+                edge_loop.append(start_edge)
+
+                current_edge = start_edge
+                while edges:
+                    next_edge = None
+                    for edge in edges:
+                        if current_edge[1] in edge:
+                            next_edge = edge
+                            break
+
+                    if next_edge:
+                        edges.remove(next_edge)
+                        if next_edge[0] == current_edge[1]:
+                            edge_loop.append(next_edge)
+                        else:
+                            edge_loop.append((next_edge[1], next_edge[0]))
+                        current_edge = edge_loop[-1]
+                    else:
+                        break
+
+            if edge_loop == []:
+                continue
+            vertex_loop = [edge_loop[0][0]]
+            for edge in edge_loop:
+                vertex_loop.append(edge[1])
+
+            if vertex_loop[0] != vertex_loop[-1]:
+                vertex_loop.append(vertex_loop[0])
+
+            # Identify the leftmost vertical edge
+            leftmost_vertical_edge = min(
+                [edge for edge in edge_loop if edge[0][0]
+                    == edge[1][0]],  # Vertical edges only
+                key=lambda e: e[0][0]  # Sort by x-coordinate
+            )
+
+            if binary_string[-1] == '1':  # cw
+                if leftmost_vertical_edge[0][1] < leftmost_vertical_edge[1][1]:
+                    vertex_loop.reverse()
+            if binary_string[-1] == '0':  # ccw
+                if leftmost_vertical_edge[0][1] > leftmost_vertical_edge[1][1]:
+                    vertex_loop.reverse()
+
+            self.ring_vertices[index] = vertex_loop
+            self.ring_edges[index] = edge_loop
+            self.count_edges_in_rings()
+
+    def retain_connected_component(self, index):
+        if 0 <= index <= self.k-1:
+            binary_string = self.binary_strings[index]
+            grid_size = self.N - 1
+
+            if '1' not in binary_string[0:-1]:
+                self.ring_vertices[index] = []
+                self.ring_edges[index] = []
+                self.edge_count = {}
+                return
+
+            visited = [False] * (self.num_digits - 1)
+
+            # Find a starting point
+            max_attempts = 1000
+            attempts = 0
+            while attempts < max_attempts:
+                start = random.randint(0, grid_size**2 - 1)
+                if binary_string[start] == '1':
+                    break
+                attempts += 1
+            if attempts >= max_attempts:
+                self.ring_vertices[index] = []
+                self.ring_edges[index] = []
+                self.edge_count = {}
+                print(
+                    f"Warning: No valid starting point found for index {index} in string {binary_string}. Exiting early.")
+                return
+
+            # BFS
+            queue = [start]
+            visited[start] = True
+            connected_component = ['0'] * (self.num_digits - 1)
+            connected_component[start] = '1'
+
+            while queue:
+                current = queue.pop(0)
+                neighbors = self.get_neighbors(current)
+                for neighbor in neighbors:
+                    if binary_string[neighbor] == '1' and not visited[neighbor]:
+                        visited[neighbor] = True
+                        connected_component[neighbor] = '1'
+                        queue.append(neighbor)
+
+            # New binary string
+            new_binary_string = ''.join(
+                connected_component) + binary_string[-1]
+            self.binary_strings[index] = new_binary_string
+
+        else:
+            raise IndexError("Index out of range. Must be between 1 and k.")
+
+    def get_neighbors(self, index):
+        grid_size = self.N - 1
+        neighbors = []
+        row, col = divmod(index, grid_size)
+        if row > 0:
+            neighbors.append(index - grid_size)
+        if row < grid_size - 1:
+            neighbors.append(index + grid_size)
+        if col > 0:
+            neighbors.append(index - 1)
+        if col < grid_size - 1:
+            neighbors.append(index + 1)
+        return neighbors
+
+    def visualize(self, index):
+        if 0 <= index <= self.k-1:
+            binary_string = self.binary_strings[index]
+            grid_size = self.N - 1
+            grid = [[int(binary_string[i * grid_size + j])
+                     for j in range(grid_size)] for i in range(grid_size)]
+            for row in grid:
+                print(row)
+        else:
+            raise IndexError("Index out of range. Must be between 1 and k.")
+
+    def visualize_ring(self, index, output_file=None):
+        if index not in self.ring_vertices:
+            print(f"Index {index} not found in ring_vertices.")
+            return
+
+        grid_size = self.N
+        grid = [['.' for _ in range(grid_size)] for _ in range(grid_size)]
+
+        vertices = self.ring_vertices[index]
+
+        # 如果 vertices 列表为空，则直接输出网格，不做箭头标记
+        if not vertices:
+            if output_file:
+                with open(output_file, 'a') as f:
+                    for row in grid:
+                        f.write(' '.join(row) + '\n')
+                    f.write("\n")
+            else:
+                for row in grid:
+                    print(' '.join(row))
+            return
+
+        # 绘制环的路径
+        for i in range(len(vertices) - 1):
+            x1, y1 = vertices[i]
+            x2, y2 = vertices[i + 1]
+
+            if x1 == x2 and y1 < y2:
+                grid[y1][x1] = '↓'
+            elif x1 == x2 and y1 > y2:
+                grid[y1][x1] = '↑'
+            elif y1 == y2 and x1 < x2:
+                grid[y1][x1] = '→'
+            elif y1 == y2 and x1 > x2:
+                grid[y1][x1] = '←'
+
+        # 标记最后一段回到起点的方向
+        x1, y1 = vertices[-1]
+        x2, y2 = vertices[0]
+        if x1 == x2 and y1 < y2:
+            grid[y1][x1] = '↓'
+        elif x1 == x2 and y1 > y2:
+            grid[y1][x1] = '↑'
+        elif y1 == y2 and x1 < x2:
+            grid[y1][x1] = '→'
+        elif y1 == y2 and x1 > x2:
+            grid[y1][x1] = '←'
+
+        if output_file:
+            # 输出到文件
+            with open(output_file, 'a') as f:
+                for row in grid:
+                    f.write(' '.join(row) + '\n')
+                f.write("\n")
+            print(f"Visualized ring saved to {output_file}")
+        else:
+            # 打印到命令行
+            for row in grid:
+                print(' '.join(row))
+
+    def mutation(self, idx):
+        if 0 <= idx <= self.k-1:
+            binary_string = list(self.binary_strings[idx])
+            for i in range(self.num_digits - 1):
+                if random.random() < self.p:
+                    binary_string[i] = '0' if binary_string[i] == '1' else '1'
+            self.binary_strings[idx] = ''.join(binary_string)
+            self.retain_connected_component(idx)
+            self.compute_rings()
+
+    def compute_distance(self):
+        distance = 0
+        for xa in range(self.N):
+            for ya in range(self.N):
+                for xb in range(self.N):
+                    for yb in range(self.N):
+                        # 对于每一对A,B点来说：
+                        # 如果两个点重合了，就跳过
+                        if xa == xb and ya == yb:
+                            continue
+                        distance_ab = []
+                        # 计算每个环上A,B的距离
+                        for index in range(self.k):
+                            ring = self.ring_vertices[index]
+                            distance_ab.append(
+                                self.compute_distance_of_pair(xa, ya, xb, yb, ring))
+                        # 选出最小的距离，作为distance_ab的最终距离
+                        distance += min(distance_ab)
+
+        distance /= (self.N ** 2) * (self.N ** 2 - 1)
+        return distance
+
+    def compute_distance_of_pair(self, xa, ya, xb, yb, ring):
+        point_a = (xa, ya)
+        point_b = (xb, yb)
+
+        if point_a not in ring or point_b not in ring:
+            return 100000
+
+        index_a = ring.index(point_a)
+        index_b = ring.index(point_b)
+
+        if index_a <= index_b:
+            distance_ab = index_b - index_a
+        else:
+            distance_ab = len(ring) - (index_a - index_b) - 1
+
+        return distance_ab
+
+    def evaluate(self):
+        objective = self.objective
+        lenth = 0
+        for index in range(self.k):
+            lenth += len(self.ring_vertices[index]) - 1  # Lenth of each ring
+
+        distance = self.compute_distance()
+
+        score = distance + self.lam * lenth
+
+        variance = 0
+        if objective == 'variance':
+            variance = self.compute_variance()
+            score += self.lam_1 * (variance ** 0.5)
+
+        return score, distance, lenth, variance
+
+    def compute_variance(self):
+        overlapping = list(self.edge_count.values())
+        if len(overlapping) == 0:
+            return 0
+
+        average = sum(overlapping) / len(overlapping)
+
+        variance = sum((x - average) ** 2 for x in overlapping) / \
+            len(overlapping)
+
+        return variance
+
+    def get_binary_string(self, index):
+        if 0 <= index <= self.k-1:
+            return self.binary_strings[index]
+        else:
+            raise IndexError("Index out of range. Must be between 1 and k.")
+
+    def count_edges_in_rings(self):
+        rings = list(self.ring_vertices.values())
+        edge_count = {}
+
+        for ring in rings:
+            for i in range(len(ring)-1):
+                start = ring[i]
+                end = ring[i+1]
+
+                edge = (start, end)  # Sequential
+
+                if edge in edge_count:
+                    edge_count[edge] += 1
+                else:
+                    edge_count[edge] = 1
+
+        self.edge_count = edge_count
+        return edge_count
+
+    def return_ring(self):
+        output = []
+        for i in range(self.k):
+            output.append(self.ring_vertices[i])
+        return output
+
+
+def evolve_population(N, k, p, lam, lam_1, objective, population, file_path, num_solution, gen_num=100):
+    for t in range(gen_num):
+        tem_population = []
+
+        for solution in population:
+            new_solution = copy.deepcopy(solution)
+            for _ in range(k):
+                new_solution.mutation(_)
+            tem_population.append(new_solution)
+
+        combined_population = population + tem_population
+
+        combined_population.sort(key=lambda sol: sol.evaluate()[0])
+        population = combined_population[:num_solution]
+
+        best_score, distance, lenth, variance = combined_population[0].evaluate(
+        )
+        print(
+            f"Generation {t}, best score: {best_score}, among which distance: {distance}, lenth: {lenth}, variance: {variance}")
+
+        if (t + 1) % 100 == 0:
+            save_to_file(combined_population[0], t + 1, file_path=file_path)
+
+    return population
+
+
+def save_to_file(solution, generation, file_path='population_data.txt'):
+    directory = os.path.dirname(file_path)
+    if directory:
+        os.makedirs(directory, exist_ok=True)
+
+    with open(file_path, 'a') as outfile:
+        outfile.write(f"Generation {generation}\n")
+        outfile.write("Binary Strings:\n")
+        for idx, binary_string in enumerate(solution.binary_strings):
+            outfile.write(f"{idx}: {binary_string}\n")
+
+        outfile.write("Ring Vertices:\n")
+        for key, vertices in solution.ring_vertices.items():
+            vertex_str = ' -> '.join([f"({x},{y})" for x, y in vertices])
+            outfile.write(f"{key}: {vertex_str}\n")
+
+        outfile.write("Ring Visualizations:\n")
+        for key in solution.ring_vertices.keys():
+            outfile.write(f"Visualization of ring {key}:\n")
+
+            grid_size = solution.N
+            grid = [['.' for _ in range(grid_size)] for _ in range(grid_size)]
+
+            vertices = solution.ring_vertices[key]
+            if vertices:
+                for i in range(len(vertices) - 1):
+                    x1, y1 = vertices[i]
+                    x2, y2 = vertices[i + 1]
+
+                    if x1 == x2 and y1 < y2:
+                        grid[y1][x1] = '↓'
+                    elif x1 == x2 and y1 > y2:
+                        grid[y1][x1] = '↑'
+                    elif y1 == y2 and x1 < x2:
+                        grid[y1][x1] = '→'
+                    elif y1 == y2 and x1 > x2:
+                        grid[y1][x1] = '←'
+
+                x1, y1 = vertices[-1]
+                x2, y2 = vertices[0]
+                if x1 == x2 and y1 < y2:
+                    grid[y1][x1] = '↓'
+                elif x1 == x2 and y1 > y2:
+                    grid[y1][x1] = '↑'
+                elif y1 == y2 and x1 < x2:
+                    grid[y1][x1] = '→'
+                elif y1 == y2 and x1 > x2:
+                    grid[y1][x1] = '←'
+
+            for row in grid:
+                outfile.write(' '.join(row) + '\n')
+            outfile.write("\n")
+
+        score, distance, lenth, variance = solution.evaluate()
+        outfile.write(
+            f"Score: {score}, Distance: {distance}, Length: {lenth}, Variance: {variance}\n")
+        outfile.write("=" * 40 + "\n")
+
+    # Save ring_vertices and ring_edges to a separate file
+    best_imr_file = "./Experiment Data/bestIMR.txt"
+    os.makedirs(os.path.dirname(best_imr_file), exist_ok=True)
+
+    with open(best_imr_file, 'w') as best_imr_outfile:
+        pass  # clear all
+
+    with open(best_imr_file, 'a') as best_imr_outfile:
+        # Save ring_vertices
+        best_imr_outfile.write("Ring Vertices:\n")
+        for key, vertices in solution.ring_vertices.items():
+            vertex_str = ' -> '.join([f"({x},{y})" for x, y in vertices])
+            best_imr_outfile.write(f"{key}: {vertex_str}\n")
+
+        # Save edge_count
+        best_imr_outfile.write("Edge Count:\n")
+        for edge, count in solution.edge_count.items():
+            edge_str = f"(({edge[0][0]},{edge[0][1]}),({edge[1][0]},{edge[1][1]})): {count}"
+            best_imr_outfile.write(f"{edge_str}\n")
+
+    print(
+        f"Saved generation {generation} to {file_path} and bestIMR data to {best_imr_file}")
+
+
+def select(population):
+    return min(population, key=lambda sol: sol.evaluate()[0])
+
+
+def construct_routing_table(rings, N, output_file='./Experiment Data/IMR/routing_table.txt'):
+    output = {}
+
+    for x1 in range(N):
+        for y1 in range(N):
+            for x2 in range(N):
+                for y2 in range(N):
+                    if (x1, y1) == (x2, y2):
+                        continue
+
+                    pair_key = ((x1, y1), (x2, y2))
+                    output[pair_key] = {}
+
+                    for ring_id, ring in enumerate(rings):
+                        if (x1, y1) in ring and (x2, y2) in ring:
+                            # distance
+                            idx1 = ring.index((x1, y1))
+                            idx2 = ring.index((x2, y2))
+
+                            if idx1 <= idx2:
+                                distance_ab = idx2 - idx1
+                            else:
+                                distance_ab = len(ring) - (idx1 - idx2) - 1
+
+                            output[pair_key][ring_id] = distance_ab
+
+    os.makedirs(os.path.dirname(output_file), exist_ok=True)
+    with open(output_file, 'w') as f:
+        for pair_key, rings_dict in output.items():
+            a, b = pair_key
+            xa, ya = a
+            xb, yb = b
+            nodea = xa + N * ya
+            nodeb = xb + N * yb
+            f.write(f"Pair {(nodea, nodeb)}:\n")
+            for ring_id, length in sorted(rings_dict.items(), key=lambda item: item[1]):
+                f.write(f"  Ring {ring_id}: Length = {length}\n")
+            f.write("\n")
+
+    return output
+
+
+def main():
+    parser = argparse.ArgumentParser(description="Run the IMR solution saver")
+
+    parser.add_argument('--N', type=int, default=4,
+                        help='Size of the network (N*N)')
+    parser.add_argument('--k', type=int, default=9,
+                        help='Number of binary strings (rings) in a solution')
+    parser.add_argument('--p', type=float, default=0.2,
+                        help='Mutation probability')
+    parser.add_argument('--num_solution', type=int, default=32,
+                        help='Number of solutions in a population')
+    parser.add_argument('--lam', type=float, default=0.01,
+                        help='Hyperparameter')
+    parser.add_argument('--lam_1', type=float,
+                        default=1, help='Hyperparameter')
+    parser.add_argument('--file_path', type=str, default='./Experiment Data/IMR/n=4,k=9,o.txt',
+                        help='Path to save the solution data')
+    parser.add_argument('--gen_num', type=int, default=1000,
+                        help='Number of generations')
+    parser.add_argument('--objective', type=str,
+                        default='default', help='mode of objective function')
+
+    args = parser.parse_args()
+
+    print(f"Running with: N={args.N}, k={args.k}, p={args.p}, num_solution={args.num_solution}, lam={args.lam}, file_path={args.file_path}, gen_num={args.gen_num}")
+
+    population = [Solution(N=args.N, k=args.k, p=args.p, lam=args.lam, lam_1=args.lam_1,
+                           objective=args.objective) for _ in range(args.num_solution)]
+    final_population = evolve_population(
+        args.N, args.k, args.p, args.lam, args.lam_1, args.objective, population, num_solution=args.num_solution, file_path=args.file_path, gen_num=args.gen_num)
+
+
+def load_best_imr(file_path='./Experiment Data/bestIMR.txt'):
+    ring_vertices = {}
+    edge_count = {}
+
+    with open(file_path, 'r') as infile:
+        lines = infile.readlines()
+
+        i = 0
+        while i < len(lines):
+            if lines[i].strip() == "Ring Vertices:":
+                i += 1
+                while i < len(lines) and lines[i].strip() != "Edge Count:":
+                    key, vertices = lines[i].split(": ")
+
+                    # 处理并清理字符串，避免空字符串或无效字符
+                    vertices_list = []
+                    for vertex in vertices.split(' -> '):
+                        vertex = vertex.strip('()\n ')
+                        if vertex:  # 确保不是空字符串
+                            try:
+                                vertices_list.append(
+                                    tuple(map(int, vertex.split(','))))
+                            except ValueError as e:
+                                print(
+                                    f"Skipping invalid vertex data: {vertex}")
+
+                    ring_vertices[int(key)] = vertices_list
+                    i += 1
+
+            elif lines[i].strip() == "Edge Count:":
+                i += 1
+                while i < len(lines):
+                    edge_str, count_str = lines[i].split(": ")
+                    edge = tuple(
+                        tuple(map(int, point.strip('()\n ').split(',')))
+                        for point in edge_str.strip().split('),(')
+                    )
+                    count = int(count_str)
+                    edge_count[edge] = count
+                    i += 1
+
+            else:
+                i += 1
+
+    return ring_vertices, edge_count
+
+
+if __name__ == "__main__":
+    main()
diff --git a/configs/topologies/ConstructRouterless.py b/configs/topologies/ConstructRouterless.py
new file mode 100644
index 0000000000..ecb725c007
--- /dev/null
+++ b/configs/topologies/ConstructRouterless.py
@@ -0,0 +1,174 @@
+import os
+from tkinter import Y
+
+def compute_layer(index_of_layer):
+    num_rows = 2*index_of_layer
+    rings = []
+
+    # Compute A
+    A = []
+    A.append(compute_rectangle(0,num_rows-1,0,num_rows-1,'ccw'))
+
+    # Compute B and C
+    BC = []
+    for i in range(num_rows-2):
+        BC.append(compute_rectangle(0,i+1,0,num_rows-1,'cw'))
+        BC.append(compute_rectangle(i+1,num_rows-1,0,num_rows-1,'cw'))
+
+    # Compute D
+    D = []
+    if index_of_layer != 1:
+        for i in range(num_rows-1):
+            D.append(compute_rectangle(0,num_rows-1,i,i+1,'cw'))
+
+    rings.extend(A)
+    rings.extend(BC)
+    rings.extend(D)
+
+    return rings
+
+def compute_rectangle(x_s, x_e, y_s, y_e, dipiction):
+    output = [(x_s,y_s)]
+    for i in range(y_s+1, y_e+1):
+        output.append((x_s,i))
+    for i in range(x_s+1, x_e+1):
+        output.append((i,y_e))
+    for i in range(y_e-1, y_s-1, -1):
+        output.append((x_e,i))
+    for i in range(x_e-1, x_s-1, -1):
+        output.append((i, y_s))
+
+    if dipiction == "ccw":
+        return output
+    elif dipiction == 'cw':
+        output.reverse()
+        return output
+    else:
+        raise ValueError("Invalid depiction: must be 'ccw' or 'cw'")
+
+def compose_layers(N):
+    solution = []
+    for i in range(int(N/2)):
+        a = int(N/2) - i - 1
+        updated_nodes = add_to_coordinates(compute_layer(i+1), a)
+        solution.extend(updated_nodes)
+    return solution
+
+def add_to_coordinates(main_list, a):
+    for i in range(len(main_list)):
+        for j in range(len(main_list[i])):
+            x, y = main_list[i][j]
+            main_list[i][j] = (x + a, y + a)
+    return main_list
+
+def compute_distance(N, k, ring_vertices):
+    distance = 0
+    for xa in range(N):
+        for ya in range(N):
+            for xb in range(N):
+                for yb in range(N):
+                    # 对于每一对A,B点来说：
+                    # 如果两个点重合了，就跳过
+                    if xa == xb and ya == yb:
+                        continue
+                    distance_ab = []
+                    # 计算每个环上A,B的距离
+                    for index in range(k):
+                        ring = ring_vertices[index]
+                        distance_ab.append(compute_distance_of_pair(xa, ya, xb, yb, ring))
+                    # 选出最小的距离，作为distance_ab的最终距离
+                    distance += min(distance_ab)
+
+    distance /= (N ** 2) * (N ** 2 - 1)
+    return distance
+
+def compute_distance_of_pair(xa, ya, xb, yb, ring):
+    point_a = (xa, ya)
+    point_b = (xb, yb)
+
+    if point_a not in ring or point_b not in ring:
+        return 100000
+
+    index_a = ring.index(point_a)
+    index_b = ring.index(point_b)
+
+    if index_a <= index_b:
+        distance_ab = index_b - index_a
+    else:
+        distance_ab = len(ring) - (index_a - index_b) - 1
+
+    return distance_ab
+
+def count_edges_in_rings(rings):
+    edge_count = {}
+
+    for ring in rings:
+        for i in range(len(ring)-1):
+            start = ring[i]
+            end = ring[i+1]
+
+            edge = (start, end)  # Sequential
+
+            if edge in edge_count:
+                edge_count[edge] += 1
+            else:
+                edge_count[edge] = 1
+
+    return edge_count
+
+def construct_routing_table(rings, N, output_file='./Experiment Data/Routerless/routing_table.txt'):
+    output = {}
+
+    for x1 in range(N):
+        for y1 in range(N):
+            for x2 in range(N):
+                for y2 in range(N):
+                    if (x1, y1) == (x2, y2):
+                        continue
+
+                    pair_key = ((x1, y1), (x2, y2))
+                    output[pair_key] = {}
+
+                    for ring_id, ring in enumerate(rings):
+                        if (x1, y1) in ring and (x2, y2) in ring:
+                            # distance
+                            idx1 = ring.index((x1, y1))
+                            idx2 = ring.index((x2, y2))
+
+                            if idx1 <= idx2:
+                                distance_ab = idx2 - idx1
+                            else:
+                                distance_ab = len(ring) - (idx1 - idx2) - 1
+
+                            output[pair_key][ring_id] = distance_ab
+
+    os.makedirs(os.path.dirname(output_file), exist_ok=True)
+    with open(output_file, 'w') as f:
+        for pair_key, rings_dict in output.items():
+            a, b = pair_key
+            xa, ya = a
+            xb, yb = b
+            nodea = xa + N * ya
+            nodeb = xb + N * yb
+            f.write(f"Pair {(nodea, nodeb)}:\n")
+            for ring_id, length in sorted(rings_dict.items(), key=lambda item: item[1]):
+                f.write(f"  Ring {ring_id}: Length = {length}\n")
+            f.write("\n")
+
+    return output
+
+def evaluate(N, k, ring_vertices, lam):
+    lenth = 0
+    for index in range(k):
+        lenth += len(ring_vertices[index]) - 1  # Lenth of each ring
+
+    distance = compute_distance(N, k, ring_vertices)
+
+    score = distance + lam * lenth
+    return score, distance, lenth
+
+if __name__ == "__main__":
+    N = 4
+    ring_vertices = compose_layers(N)
+    print(evaluate(N, 9, ring_vertices, 0.01))
+    construct_routing_table(ring_vertices, N, output_file='./Experiment Data/Routerless/routing_table.txt')
diff --git a/configs/topologies/IMR.py b/configs/topologies/IMR.py
new file mode 100644
index 0000000000..1a900facc8
--- /dev/null
+++ b/configs/topologies/IMR.py
@@ -0,0 +1,229 @@
+# Copyright (c) 2010 Advanced Micro Devices, Inc.
+#               2016 Georgia Institute of Technology
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are
+# met: redistributions of source code must retain the above copyright
+# notice, this list of conditions and the following disclaimer;
+# redistributions in binary form must reproduce the above copyright
+# notice, this list of conditions and the following disclaimer in the
+# documentation and/or other materials provided with the distribution;
+# neither the name of the copyright holders nor the names of its
+# contributors may be used to endorse or promote products derived from
+# this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+from m5.params import *
+from m5.objects import *
+from topologies.ConstructIMR import *
+
+from common import FileSystemConfig
+
+from topologies.BaseTopology import SimpleTopology
+
+# Creates a generic Mesh assuming an equal number of cache
+# and directory controllers.
+# XY routing is enforced (using link weights)
+# to guarantee deadlock freedom.
+
+
+class IMR(SimpleTopology):
+    description = "IMR"
+
+    def __init__(self, controllers):
+        self.nodes = controllers
+
+    def makeTopology(self, options, network, IntLink, ExtLink, Router):
+        N = int(options.num_cpus ** (0.5))  # N*N network
+        ring_vertices, edge_count = load_best_imr(file_path='./Experiment Data/bestIMR.txt')
+        rings = list(ring_vertices.values())
+        # print(edge_count)
+        # print(rings)
+        construct_routing_table(rings, N)
+
+        # 对于重复的边，我们需要更多的router，来作为中间定向。对于每一条重复的边，我们都需要增加k个router
+        num_additional_router = 0
+        for edge, count in edge_count.items():
+            if count != 1:
+                num_additional_router += count
+
+        nodes = self.nodes
+
+        # 常规的router数加上作为bridge的router
+        num_routers = options.num_cpus + num_additional_router
+
+        link_latency = options.link_latency  # used by simple and garnet
+        router_latency = options.router_latency  # only used by garnet
+
+        # Create the routers in the mesh
+        routers = [
+            Router(router_id=i, latency=router_latency)
+            for i in range(num_routers)
+        ]
+        network.routers = routers
+
+        # link counter to set unique link ids
+        link_count = 0
+
+        cntrls_per_router, remainder = divmod(len(nodes), options.num_cpus)
+        # Add all but the remainder nodes to the list of nodes to be uniformly
+        # distributed across the network.
+        network_nodes = []
+        remainder_nodes = []
+        for node_index in range(len(nodes)):
+            if node_index < (len(nodes) - remainder):
+                network_nodes.append(nodes[node_index])
+            else:
+                remainder_nodes.append(nodes[node_index])
+
+        # Connect each node to the appropriate router
+        ext_links = []
+        for (i, n) in enumerate(network_nodes):
+            cntrl_level, router_id = divmod(i, options.num_cpus)
+            assert cntrl_level < cntrls_per_router
+            ext_links.append(
+                ExtLink(
+                    link_id=link_count,
+                    ext_node=n,
+                    int_node=routers[router_id],
+                    latency=link_latency,
+                )
+            )
+            link_count += 1
+
+        # Connect the remainding nodes to router 0.  These should only be
+        # DMA nodes.
+        for (i, node) in enumerate(remainder_nodes):
+            # print(node.type)
+            # assert node.type == "DMA_Controller"
+            assert i < remainder
+            ext_links.append(
+                ExtLink(
+                    link_id=link_count,
+                    ext_node=node,
+                    int_node=routers[0],
+                    latency=link_latency,
+                )
+            )
+            link_count += 1
+
+        network.ext_links = ext_links
+
+        # Create the ring links.
+        int_links = []
+        bridge = options.num_cpus  # maintain this
+
+        for ring_id, ring in enumerate(rings):
+            if len(ring) == 0:  # no links, no ports, continue
+                continue
+            for i in range(len(ring) - 2):  # TODO: 验证首尾相接
+                src = ring[i]
+                dst = ring[i + 1]
+                edge = (src, dst)
+                if edge in edge_count:
+                    if edge_count[edge] > 1:
+                        int_links.append(
+                            IntLink(
+                                link_id=link_count,
+                                src_node=routers[src[1] * N + src[0]],
+                                dst_node=routers[bridge],
+                                src_outport=f"ring{ring_id}_globalx{src[0]}_globaly{src[1]}_local{i}",
+                                dst_inport=f"bridge_ring{ring_id}_globalx{src[0]}_globaly{src[1]}_local{i}_globalx{dst[0]}_globaly{dst[1]}_local{i+1}",
+                                latency=link_latency,
+                                weight=1,
+                            )
+                        )
+                        link_count += 1
+                        int_links.append(
+                            IntLink(
+                                link_id=link_count,
+                                src_node=routers[bridge],
+                                dst_node=routers[dst[1] * N + dst[0]],
+                                src_outport=f"bridge_ring{ring_id}_globalx{src[0]}_globaly{src[1]}_local{i}_globalx{dst[0]}_globaly{dst[1]}_local{i+1}",
+                                dst_inport=f"ring{ring_id}_globalx{dst[0]}_globaly{dst[1]}_local{i+1}",
+                                latency=link_latency,
+                                weight=1,
+                            )
+                        )
+                        link_count += 1
+                        bridge += 1
+                        continue
+
+                int_links.append(
+                    IntLink(
+                        link_id=link_count,
+                        src_node=routers[src[1] * N + src[0]],
+                        dst_node=routers[dst[1] * N + dst[0]],
+                        src_outport=f"ring{ring_id}_globalx{src[0]}_globaly{src[1]}_local{i}",
+                        dst_inport=f"ring{ring_id}_globalx{dst[0]}_globaly{dst[1]}_local{i+1}",
+                        latency=link_latency,
+                        weight=1,
+                    )
+                )
+                link_count += 1
+
+            src = ring[-2]
+            dst = ring[0]
+            edge = (src, dst)
+            if edge in edge_count:
+                if edge_count[edge] > 1:
+                    int_links.append(
+                        IntLink(
+                            link_id=link_count,
+                            src_node=routers[src[1] * N + src[0]],
+                            dst_node=routers[bridge],
+                            src_outport=f"ring{ring_id}_globalx{src[0]}_globaly{src[1]}_local{len(ring)-2}",
+                            dst_inport=f"bridge_ring{ring_id}_globalx{src[0]}_globaly{src[1]}_local{len(ring)-2}_globalx{dst[0]}_globaly{dst[1]}_local{0}",
+                            latency=link_latency,
+                            weight=1,
+                        )
+                    )
+                    link_count += 1
+                    int_links.append(
+                        IntLink(
+                            link_id=link_count,
+                            src_node=routers[bridge],
+                            dst_node=routers[dst[1] * N + dst[0]],
+                            src_outport=f"bridge_ring{ring_id}_globalx{src[0]}_globaly{src[1]}_local{len(ring)-2}_globalx{dst[0]}_globaly{dst[1]}_local{0}",
+                            dst_inport=f"ring{ring_id}_globalx{dst[0]}_globaly{dst[1]}_local{0}",
+                            latency=link_latency,
+                            weight=1,
+                        )
+                    )
+                    link_count += 1
+                    bridge += 1
+                    continue
+            int_links.append(
+                IntLink(
+                    link_id=link_count,
+                    src_node=routers[src[1] * N + src[0]],
+                    dst_node=routers[dst[1] * N + dst[0]],
+                    src_outport=f"ring{ring_id}_globalx{src[0]}_globaly{src[1]}_local{len(ring)-2}",
+                    dst_inport=f"ring{ring_id}_globalx{dst[0]}_globaly{dst[1]}_local0",
+                    latency=link_latency,
+                    weight=1,
+                )
+            )
+            link_count += 1
+
+        network.int_links = int_links
+
+
+    # Register nodes with filesystem
+    def registerTopology(self, options):
+        for i in range(options.num_cpus):
+            FileSystemConfig.register_node(
+                [i], MemorySize(options.mem_size) // options.num_cpus, i
+            )
diff --git a/configs/topologies/Mesh_XY.py b/configs/topologies/Mesh_XY.py
index 94cb770750..8115bb7af6 100644
--- a/configs/topologies/Mesh_XY.py
+++ b/configs/topologies/Mesh_XY.py
@@ -103,7 +103,6 @@ class Mesh_XY(SimpleTopology):
         # Connect the remainding nodes to router 0.  These should only be
         # DMA nodes.
         for (i, node) in enumerate(remainder_nodes):
-            assert node.type == "DMA_Controller"
             assert i < remainder
             ext_links.append(
                 ExtLink(
diff --git a/configs/topologies/Ring.py b/configs/topologies/Ring.py
new file mode 100644
index 0000000000..3da34ecff2
--- /dev/null
+++ b/configs/topologies/Ring.py
@@ -0,0 +1,104 @@
+# Copyright (c) 2010 Advanced Micro Devices, Inc.
+#               2016 Georgia Institute of Technology
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are
+# met: redistributions of source code must retain the above copyright
+# notice, this list of conditions and the following disclaimer;
+# redistributions in binary form must reproduce the above copyright
+# notice, this list of conditions and the following disclaimer in the
+# documentation and/or other materials provided with the distribution;
+# neither the name of the copyright holders nor the names of its
+# contributors may be used to endorse or promote products derived from
+# this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+from m5.params import *
+from m5.objects import *
+
+from common import FileSystemConfig
+
+from topologies.BaseTopology import SimpleTopology
+
+# Creates a generic Mesh assuming an equal number of cache
+# and directory controllers.
+# XY routing is enforced (using link weights)
+# to guarantee deadlock freedom.
+
+
+class Ring(SimpleTopology):
+    description = "Ring"
+
+    def __init__(self, controllers):
+        self.nodes = controllers
+
+    def makeTopology(self, options, network, IntLink, ExtLink, Router):
+        nodes = self.nodes
+
+        num_routers = options.num_cpus
+        link_latency = options.link_latency
+        router_latency = options.router_latency
+
+        routers = [Router(router_id=i, latency=router_latency) for i in range(num_routers)]
+        network.routers = routers
+
+        ext_links = []
+        for (i, n) in enumerate(nodes):
+            router_id = i % num_routers
+            ext_links.append(
+                ExtLink(
+                    link_id=i,
+                    ext_node=n,
+                    int_node=routers[router_id],
+                    latency=link_latency,
+                )
+            )
+
+        network.ext_links = ext_links
+
+        int_links = []
+        for i in range(num_routers):
+            next_router_id = (i + 1) % num_routers
+            int_links.append(
+                IntLink(
+                    link_id=2*i,
+                    src_node=routers[i],
+                    dst_node=routers[next_router_id],
+                    src_outport="Src",
+                    dst_inport="End",
+                    latency=link_latency,
+                    weight=1,
+                )
+            )  # Clockwise
+            int_links.append(
+                IntLink(
+                    link_id=2*i+1,
+                    src_node=routers[next_router_id],
+                    dst_node=routers[i],
+                    src_outport="End",
+                    dst_inport="Src",
+                    latency=link_latency,
+                    weight=1,
+                )
+            )  # Anti-clockwise
+
+        network.int_links = int_links
+
+    # Register nodes with filesystem
+    def registerTopology(self, options):
+        for i in range(options.num_cpus):
+            FileSystemConfig.register_node(
+                [i], MemorySize(options.mem_size) // options.num_cpus, i
+            )
diff --git a/configs/topologies/Routerless.py b/configs/topologies/Routerless.py
new file mode 100644
index 0000000000..9c1d8826a8
--- /dev/null
+++ b/configs/topologies/Routerless.py
@@ -0,0 +1,229 @@
+# Copyright (c) 2010 Advanced Micro Devices, Inc.
+#               2016 Georgia Institute of Technology
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are
+# met: redistributions of source code must retain the above copyright
+# notice, this list of conditions and the following disclaimer;
+# redistributions in binary form must reproduce the above copyright
+# notice, this list of conditions and the following disclaimer in the
+# documentation and/or other materials provided with the distribution;
+# neither the name of the copyright holders nor the names of its
+# contributors may be used to endorse or promote products derived from
+# this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+from m5.params import *
+from m5.objects import *
+from topologies.ConstructRouterless import *
+
+from common import FileSystemConfig
+
+from topologies.BaseTopology import SimpleTopology
+
+# Creates a generic Mesh assuming an equal number of cache
+# and directory controllers.
+# XY routing is enforced (using link weights)
+# to guarantee deadlock freedom.
+
+
+class Routerless(SimpleTopology):
+    description = "Routerless"
+
+    def __init__(self, controllers):
+        self.nodes = controllers
+
+    def makeTopology(self, options, network, IntLink, ExtLink, Router):
+        N = int(options.num_cpus ** (0.5))  # N*N network
+        rings = compose_layers(N)  # rings: [[(1, 1), (1, 2), (2, 2), (2, 1), (1, 1)], [(0, 0), (0, 1), (0, 2), (0, 3), (1, 3), (2, 3), (3, 3), (3, 2), (3, 1), (3, 0), (2, 0), (1, 0), (0, 0)], [(0, 0), (1, 0), (1, 1), (1, 2), (1, 3), (0, 3), (0, 2), (0, 1), (0, 0)], [(1, 0), (2, 0), (3, 0), (3, 1), (3, 2), (3, 3), (2, 3), (1, 3), (1, 2), (1, 1), (1, 0)], [(0, 0), (1, 0), (2, 0), (2, 1), (2, 2), (2, 3), (1, 3), (0, 3), (0, 2), (0, 1), (0, 0)], [(2, 0), (3, 0), (3, 1), (3, 2), (3, 3), (2, 3), (2, 2), (2, 1), (2, 0)], [(0, 0), (1, 0), (2, 0), (3, 0), (3, 1), (2, 1), (1, 1), (0, 1), (0, 0)], [(0, 1), (1, 1), (2, 1), (3, 1), (3, 2), (2, 2), (1, 2), (0, 2), (0, 1)], [(0, 2), (1, 2), (2, 2), (3, 2), (3, 3), (2, 3), (1, 3), (0, 3), (0, 2)]]
+        edge_count = count_edges_in_rings(rings)
+        # print(rings)
+        construct_routing_table(rings, N)
+
+        # 对于重复的边，我们需要更多的router，来作为中间定向。对于每一条重复的边，我们都需要增加k个router
+        num_additional_router = 0
+        for edge, count in edge_count.items():
+            if count != 1:
+                num_additional_router += count
+
+        nodes = self.nodes
+
+        # 常规的router数加上多余的router
+        num_routers = options.num_cpus + num_additional_router
+
+        link_latency = options.link_latency  # used by simple and garnet
+        router_latency = options.router_latency  # only used by garnet
+
+        # Create the routers in the mesh
+        routers = [
+            Router(router_id=i, latency=router_latency)
+            for i in range(num_routers)
+        ]
+        network.routers = routers
+
+        # link counter to set unique link ids
+        link_count = 0
+
+        cntrls_per_router, remainder = divmod(len(nodes), options.num_cpus)
+        # Add all but the remainder nodes to the list of nodes to be uniformly
+        # distributed across the network.
+        network_nodes = []
+        remainder_nodes = []
+        for node_index in range(len(nodes)):
+            if node_index < (len(nodes) - remainder):
+                network_nodes.append(nodes[node_index])
+            else:
+                remainder_nodes.append(nodes[node_index])
+
+        # Connect each node to the appropriate router
+        ext_links = []
+        for (i, n) in enumerate(network_nodes):
+            cntrl_level, router_id = divmod(i, options.num_cpus)
+            assert cntrl_level < cntrls_per_router
+            ext_links.append(
+                ExtLink(
+                    link_id=link_count,
+                    ext_node=n,
+                    int_node=routers[router_id],
+                    latency=link_latency,
+                )
+            )
+            link_count += 1
+
+        # Connect the remainding nodes to router 0.  These should only be
+        # DMA nodes.
+        for (i, node) in enumerate(remainder_nodes):
+            assert i < remainder
+            ext_links.append(
+                ExtLink(
+                    link_id=link_count,
+                    ext_node=node,
+                    int_node=routers[0],
+                    latency=link_latency,
+                )
+            )
+            link_count += 1
+
+        network.ext_links = ext_links
+
+        # Create the ring links.
+        int_links = []
+        bridge = options.num_cpus  # maintain this
+
+        for ring_id, ring in enumerate(rings):
+            flag = False
+            if ring_id == 3:
+                flag = True
+            if len(ring) == 0:  # no links, no ports, continue
+                continue
+            for i in range(len(ring) - 2):
+                src = ring[i]
+                dst = ring[i + 1]
+                edge = (src, dst)
+                if edge in edge_count:
+                    if edge_count[edge] > 1:
+                        int_links.append(
+                            IntLink(
+                                link_id=link_count,
+                                src_node=routers[src[1] * N + src[0]],
+                                dst_node=routers[bridge],
+                                src_outport=f"ring{ring_id}_globalx{src[0]}_globaly{src[1]}_local{i}",
+                                dst_inport=f"bridge_ring{ring_id}_globalx{src[0]}_globaly{src[1]}_local{i}_globalx{dst[0]}_globaly{dst[1]}_local{i+1}",
+                                latency=link_latency,
+                                weight=1,
+                            )
+                        )
+                        link_count += 1
+                        int_links.append(
+                            IntLink(
+                                link_id=link_count,
+                                src_node=routers[bridge],
+                                dst_node=routers[dst[1] * N + dst[0]],
+                                src_outport=f"bridge_ring{ring_id}_globalx{src[0]}_globaly{src[1]}_local{i}_globalx{dst[0]}_globaly{dst[1]}_local{i+1}",
+                                dst_inport=f"ring{ring_id}_globalx{dst[0]}_globaly{dst[1]}_local{i+1}",
+                                latency=link_latency,
+                                weight=1,
+                            )
+                        )
+                        link_count += 1
+                        bridge += 1
+                        continue
+
+                int_links.append(
+                    IntLink(
+                        link_id=link_count,
+                        src_node=routers[src[1] * N + src[0]],
+                        dst_node=routers[dst[1] * N + dst[0]],
+                        src_outport=f"ring{ring_id}_globalx{src[0]}_globaly{src[1]}_local{i}",
+                        dst_inport=f"ring{ring_id}_globalx{dst[0]}_globaly{dst[1]}_local{i+1}",
+                        latency=link_latency,
+                        weight=1,
+                    )
+                )
+                link_count += 1
+
+            src = ring[-2]
+            dst = ring[0]
+            edge = (src, dst)
+            if edge in edge_count:
+                if edge_count[edge] > 1:
+                    int_links.append(
+                        IntLink(
+                            link_id=link_count,
+                            src_node=routers[src[1] * N + src[0]],
+                            dst_node=routers[bridge],
+                            src_outport=f"ring{ring_id}_globalx{src[0]}_globaly{src[1]}_local{len(ring)-2}",
+                            dst_inport=f"bridge_ring{ring_id}_globalx{src[0]}_globaly{src[1]}_local{len(ring)-2}_globalx{dst[0]}_globaly{dst[1]}_local{0}",
+                            latency=link_latency,
+                            weight=1,
+                        )
+                    )
+                    link_count += 1
+                    int_links.append(
+                        IntLink(
+                            link_id=link_count,
+                            src_node=routers[bridge],
+                            dst_node=routers[dst[1] * N + dst[0]],
+                            src_outport=f"bridge_ring{ring_id}_globalx{src[0]}_globaly{src[1]}_local{len(ring)-2}_globalx{dst[0]}_globaly{dst[1]}_local{0}",
+                            dst_inport=f"ring{ring_id}_globalx{dst[0]}_globaly{dst[1]}_local{0}",
+                            latency=link_latency,
+                            weight=1,
+                        )
+                    )
+                    link_count += 1
+                    bridge += 1
+                    continue
+            int_links.append(
+                IntLink(
+                    link_id=link_count,
+                    src_node=routers[src[1] * N + src[0]],
+                    dst_node=routers[dst[1] * N + dst[0]],
+                    src_outport=f"ring{ring_id}_globalx{src[0]}_globaly{src[1]}_local{len(ring)-2}",
+                    dst_inport=f"ring{ring_id}_globalx{dst[0]}_globaly{dst[1]}_local0",
+                    latency=link_latency,
+                    weight=1,
+                )
+            )
+            link_count += 1
+
+        network.int_links = int_links
+
+
+    # Register nodes with filesystem
+    def registerTopology(self, options):
+        for i in range(options.num_cpus):
+            FileSystemConfig.register_node(
+                [i], MemorySize(options.mem_size) // options.num_cpus, i
+            )
diff --git a/generate_imr.sh b/generate_imr.sh
new file mode 100644
index 0000000000..49ecb7513b
--- /dev/null
+++ b/generate_imr.sh
@@ -0,0 +1,11 @@
+python ./configs/topologies/ConstructIMR.py \
+--N 6 \
+--k 23 \
+--p 0.2 \
+--num_solution 32 \
+--lam 0.01 \
+--lam_1 1 \
+--objective 'variance' \
+--file_path './Experiment Data/IMR/test.txt' \
+--gen_num 1000 \
+# 4 - 9, 6 - 23, 8 - 43
\ No newline at end of file
diff --git a/network_stats.txt b/network_stats.txt
new file mode 100644
index 0000000000..a5b4a018e9
--- /dev/null
+++ b/network_stats.txt
@@ -0,0 +1,9 @@
+
+packets_injected = 159929                       (Unspecified)
+packets_received = 159920                       (Unspecified)
+average_packet_queueing_latency = 50                       (Unspecified)
+average_packet_network_latency = 150.068159                       (Unspecified)
+average_packet_latency = 200.068159                       (Unspecified)
+average_hops = 1.501363                       (Unspecified)
+reception_rate = .09995
+throughput = 1.59920
diff --git a/results/IMR/results_IMR_algo_4_neighbor_N=4_horse.txt b/results/IMR/results_IMR_algo_4_neighbor_N=4_horse.txt
new file mode 100644
index 0000000000..2c874b5cf0
--- /dev/null
+++ b/results/IMR/results_IMR_algo_4_neighbor_N=4_horse.txt
@@ -0,0 +1,78 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 319.946151
+average_packet_queueing_latency = 50
+average_packet_network_latency = 269.946151
+average_hops = 3.898004
+reception_rate = .00986
+throughput = .15785
+injectionrate = 0.1
+average_packet_latency = 319.344496
+average_packet_queueing_latency = 50
+average_packet_network_latency = 269.344496
+average_hops = 3.877585
+reception_rate = .09994
+throughput = 1.59915
+injectionrate = 0.2
+average_packet_latency = 319.853971
+average_packet_queueing_latency = 50
+average_packet_network_latency = 269.853971
+average_hops = 3.878438
+reception_rate = .19993
+throughput = 3.19902
+injectionrate = 0.3
+average_packet_latency = 320.840146
+average_packet_queueing_latency = 50
+average_packet_network_latency = 270.840146
+average_hops = 3.888684
+reception_rate = .30007
+throughput = 4.80119
+injectionrate = 0.4
+average_packet_latency = 322.058810
+average_packet_queueing_latency = 50
+average_packet_network_latency = 272.058810
+average_hops = 3.903730
+reception_rate = .39975
+throughput = 6.39605
+injectionrate = 0.5
+average_packet_latency = 323.850432
+average_packet_queueing_latency = 50
+average_packet_network_latency = 273.850432
+average_hops = 3.930483
+reception_rate = .49980
+throughput = 7.99692
+injectionrate = 0.6
+average_packet_latency = 326.509314
+average_packet_queueing_latency = 50
+average_packet_network_latency = 276.509314
+average_hops = 3.974570
+reception_rate = .59980
+throughput = 9.59691
+injectionrate = 0.7
+average_packet_latency = 329.811707
+average_packet_queueing_latency = 50
+average_packet_network_latency = 279.811707
+average_hops = 4.030895
+reception_rate = .69977
+throughput = 11.19639
+injectionrate = 0.8
+average_packet_latency = 333.908845
+average_packet_queueing_latency = 50
+average_packet_network_latency = 283.908845
+average_hops = 4.100527
+reception_rate = .79953
+throughput = 12.79254
+injectionrate = 0.9
+average_packet_latency = 338.543690
+average_packet_queueing_latency = 50
+average_packet_network_latency = 288.543690
+average_hops = 4.173976
+reception_rate = .89906
+throughput = 14.38502
+injectionrate = 1
+average_packet_latency = 344.706815
+average_packet_queueing_latency = 50
+average_packet_network_latency = 294.706815
+average_hops = 4.249167
+reception_rate = .99893
+throughput = 15.98291
diff --git a/results/IMR/results_IMR_algo_4_neighbor_N=6_dog.txt b/results/IMR/results_IMR_algo_4_neighbor_N=6_dog.txt
new file mode 100644
index 0000000000..085721ae63
--- /dev/null
+++ b/results/IMR/results_IMR_algo_4_neighbor_N=6_dog.txt
@@ -0,0 +1,64 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 766.993542
+average_packet_queueing_latency = 50
+average_packet_network_latency = 716.993542
+average_hops = 12.825130
+reception_rate = .00989
+throughput = .35615
+injectionrate = 0.1
+average_packet_latency = 773.326359
+average_packet_queueing_latency = 50
+average_packet_network_latency = 723.326359
+average_hops = 12.788582
+reception_rate = .09984
+throughput = 3.59426
+injectionrate = 0.2
+average_packet_latency = 798.857979
+average_packet_queueing_latency = 50
+average_packet_network_latency = 748.857979
+average_hops = 13.000680
+reception_rate = .19979
+throughput = 7.19273
+injectionrate = 0.3
+average_packet_latency = 1040.910517
+average_packet_queueing_latency = 50.855024
+average_packet_network_latency = 990.055493
+average_hops = 15.155188
+reception_rate = .29978
+throughput = 10.79239
+injectionrate = 0.305
+average_packet_latency = 1390.185574
+average_packet_queueing_latency = 124.428079
+average_packet_network_latency = 1265.757496
+average_hops = 15.971501
+reception_rate = .30475
+throughput = 10.97135
+injectionrate = 0.31
+average_packet_latency = 16889.241394
+average_packet_queueing_latency = 15306.352474
+average_packet_network_latency = 1582.888920
+average_hops = 16.261734
+reception_rate = .30695
+throughput = 11.05034
+injectionrate = 0.32
+average_packet_latency = 59122.040370
+average_packet_queueing_latency = 57378.475940
+average_packet_network_latency = 1743.564430
+average_hops = 16.255005
+reception_rate = .30876
+throughput = 11.11541
+injectionrate = 0.33
+average_packet_latency = 84233.698745
+average_packet_queueing_latency = 82465.476962
+average_packet_network_latency = 1768.221783
+average_hops = 16.159512
+reception_rate = .30996
+throughput = 11.15865
+injectionrate = 0.4
+average_packet_latency = 134345.481620
+average_packet_queueing_latency = 132533.096277
+average_packet_network_latency = 1812.385344
+average_hops = 15.505492
+reception_rate = .31595
+throughput = 11.37421
diff --git a/results/IMR/results_IMR_algo_4_neighbor_N=8_dog.txt b/results/IMR/results_IMR_algo_4_neighbor_N=8_dog.txt
new file mode 100644
index 0000000000..f852db98fb
--- /dev/null
+++ b/results/IMR/results_IMR_algo_4_neighbor_N=8_dog.txt
@@ -0,0 +1,71 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 1340.585300
+average_packet_queueing_latency = 50
+average_packet_network_latency = 1290.585300
+average_hops = 24.277994
+reception_rate = .00992
+throughput = .63523
+injectionrate = 0.03
+average_packet_latency = 1341.867385
+average_packet_queueing_latency = 50
+average_packet_network_latency = 1291.867385
+average_hops = 24.230288
+reception_rate = .02999
+throughput = 1.91977
+injectionrate = 0.05
+average_packet_latency = 1354.200474
+average_packet_queueing_latency = 50
+average_packet_network_latency = 1304.200474
+average_hops = 24.385186
+reception_rate = .05001
+throughput = 3.20071
+injectionrate = 0.07
+average_packet_latency = 1377.401886
+average_packet_queueing_latency = 50
+average_packet_network_latency = 1327.401886
+average_hops = 24.716279
+reception_rate = .06991
+throughput = 4.47440
+injectionrate = 0.1
+average_packet_latency = 1458.539081
+average_packet_queueing_latency = 50
+average_packet_network_latency = 1408.539081
+average_hops = 25.820314
+reception_rate = .09990
+throughput = 6.39416
+injectionrate = 0.11
+average_packet_latency = 1535.526503
+average_packet_queueing_latency = 50
+average_packet_network_latency = 1485.526503
+average_hops = 26.499054
+reception_rate = .10983
+throughput = 7.02940
+injectionrate = 0.12
+average_packet_latency = 1738.386381
+average_packet_queueing_latency = 50.001436
+average_packet_network_latency = 1688.384945
+average_hops = 27.367352
+reception_rate = .11972
+throughput = 7.66262
+injectionrate = 0.13
+average_packet_latency = 16760.084965
+average_packet_queueing_latency = 14042.280812
+average_packet_network_latency = 2717.804153
+average_hops = 27.185391
+reception_rate = .12815
+throughput = 8.20164
+injectionrate = 0.14
+average_packet_latency = 67752.068246
+average_packet_queueing_latency = 64881.233036
+average_packet_network_latency = 2870.835210
+average_hops = 25.828839
+reception_rate = .13044
+throughput = 8.34850
+injectionrate = 0.15
+average_packet_latency = 86229.393066
+average_packet_queueing_latency = 83427.238802
+average_packet_network_latency = 2802.154263
+average_hops = 24.818551
+reception_rate = .13275
+throughput = 8.49606
diff --git a/results/IMR/results_IMR_algo_4_shuffle_N=4_horse.txt b/results/IMR/results_IMR_algo_4_shuffle_N=4_horse.txt
new file mode 100644
index 0000000000..05064bcd97
--- /dev/null
+++ b/results/IMR/results_IMR_algo_4_shuffle_N=4_horse.txt
@@ -0,0 +1,78 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 303.330694
+average_packet_queueing_latency = 50
+average_packet_network_latency = 253.330694
+average_hops = 3.566360
+reception_rate = .00986
+throughput = .15785
+injectionrate = 0.1
+average_packet_latency = 303.100065
+average_packet_queueing_latency = 50
+average_packet_network_latency = 253.100065
+average_hops = 3.559094
+reception_rate = .09994
+throughput = 1.59916
+injectionrate = 0.2
+average_packet_latency = 303.056464
+average_packet_queueing_latency = 50
+average_packet_network_latency = 253.056464
+average_hops = 3.555063
+reception_rate = .19994
+throughput = 3.19904
+injectionrate = 0.3
+average_packet_latency = 303.485996
+average_packet_queueing_latency = 50
+average_packet_network_latency = 253.485996
+average_hops = 3.560598
+reception_rate = .30007
+throughput = 4.80121
+injectionrate = 0.4
+average_packet_latency = 303.644850
+average_packet_queueing_latency = 50
+average_packet_network_latency = 253.644850
+average_hops = 3.560773
+reception_rate = .39975
+throughput = 6.39608
+injectionrate = 0.5
+average_packet_latency = 303.897430
+average_packet_queueing_latency = 50
+average_packet_network_latency = 253.897430
+average_hops = 3.563112
+reception_rate = .49981
+throughput = 7.99700
+injectionrate = 0.6
+average_packet_latency = 304.028837
+average_packet_queueing_latency = 50
+average_packet_network_latency = 254.028837
+average_hops = 3.563504
+reception_rate = .59981
+throughput = 9.59700
+injectionrate = 0.7
+average_packet_latency = 304.016185
+average_packet_queueing_latency = 50
+average_packet_network_latency = 254.016185
+average_hops = 3.561501
+reception_rate = .69978
+throughput = 11.19651
+injectionrate = 0.8
+average_packet_latency = 304.119452
+average_packet_queueing_latency = 50
+average_packet_network_latency = 254.119452
+average_hops = 3.562374
+reception_rate = .79954
+throughput = 12.79266
+injectionrate = 0.9
+average_packet_latency = 304.147367
+average_packet_queueing_latency = 50
+average_packet_network_latency = 254.147367
+average_hops = 3.562300
+reception_rate = .89906
+throughput = 14.38509
+injectionrate = 1
+average_packet_latency = 304.162678
+average_packet_queueing_latency = 50
+average_packet_network_latency = 254.162678
+average_hops = 3.562420
+reception_rate = .99894
+throughput = 15.98304
diff --git a/results/IMR/results_IMR_algo_4_shuffle_N=6_dog.txt b/results/IMR/results_IMR_algo_4_shuffle_N=6_dog.txt
new file mode 100644
index 0000000000..a62a7dcbcd
--- /dev/null
+++ b/results/IMR/results_IMR_algo_4_shuffle_N=6_dog.txt
@@ -0,0 +1,50 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 766.999158
+average_packet_queueing_latency = 50
+average_packet_network_latency = 716.999158
+average_hops = 12.825130
+reception_rate = .00989
+throughput = .35615
+injectionrate = 0.1
+average_packet_latency = 773.280105
+average_packet_queueing_latency = 50
+average_packet_network_latency = 723.280105
+average_hops = 12.788582
+reception_rate = .09984
+throughput = 3.59426
+injectionrate = 0.2
+average_packet_latency = 798.860551
+average_packet_queueing_latency = 50
+average_packet_network_latency = 748.860551
+average_hops = 13.000384
+reception_rate = .19979
+throughput = 7.19273
+injectionrate = 0.3
+average_packet_latency = 1021.109908
+average_packet_queueing_latency = 50.456367
+average_packet_network_latency = 970.653541
+average_hops = 15.069348
+reception_rate = .29978
+throughput = 10.79229
+injectionrate = 0.31
+average_packet_latency = 18785.140867
+average_packet_queueing_latency = 17210.234612
+average_packet_network_latency = 1574.906255
+average_hops = 16.247528
+reception_rate = .30668
+throughput = 11.04055
+injectionrate = 0.32
+average_packet_latency = 57458.890319
+average_packet_queueing_latency = 55745.813674
+average_packet_network_latency = 1713.076646
+average_hops = 16.262652
+reception_rate = .30873
+throughput = 11.11428
+injectionrate = 0.33
+average_packet_latency = 82255.489458
+average_packet_queueing_latency = 80491.900122
+average_packet_network_latency = 1763.589335
+average_hops = 16.164136
+reception_rate = .31020
+throughput = 11.16736
diff --git a/results/IMR/results_IMR_algo_4_shuffle_N=8_dog.txt b/results/IMR/results_IMR_algo_4_shuffle_N=8_dog.txt
new file mode 100644
index 0000000000..42d0050ab4
--- /dev/null
+++ b/results/IMR/results_IMR_algo_4_shuffle_N=8_dog.txt
@@ -0,0 +1,71 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 1340.590023
+average_packet_queueing_latency = 50
+average_packet_network_latency = 1290.590023
+average_hops = 24.277994
+reception_rate = .00992
+throughput = .63523
+injectionrate = 0.03
+average_packet_latency = 1341.919214
+average_packet_queueing_latency = 50
+average_packet_network_latency = 1291.919214
+average_hops = 24.230288
+reception_rate = .02999
+throughput = 1.91977
+injectionrate = 0.05
+average_packet_latency = 1354.356612
+average_packet_queueing_latency = 50
+average_packet_network_latency = 1304.356612
+average_hops = 24.385186
+reception_rate = .05001
+throughput = 3.20071
+injectionrate = 0.07
+average_packet_latency = 1377.821998
+average_packet_queueing_latency = 50
+average_packet_network_latency = 1327.821998
+average_hops = 24.716279
+reception_rate = .06991
+throughput = 4.47440
+injectionrate = 0.1
+average_packet_latency = 1463.340014
+average_packet_queueing_latency = 50
+average_packet_network_latency = 1413.340014
+average_hops = 25.830705
+reception_rate = .09990
+throughput = 6.39409
+injectionrate = 0.11
+average_packet_latency = 1552.716523
+average_packet_queueing_latency = 50
+average_packet_network_latency = 1502.716523
+average_hops = 26.538525
+reception_rate = .10983
+throughput = 7.02939
+injectionrate = 0.12
+average_packet_latency = 1826.011496
+average_packet_queueing_latency = 50.018858
+average_packet_network_latency = 1775.992638
+average_hops = 27.437143
+reception_rate = .11972
+throughput = 7.66241
+injectionrate = 0.13
+average_packet_latency = 25664.463992
+average_packet_queueing_latency = 22878.627553
+average_packet_network_latency = 2785.836439
+average_hops = 26.999285
+reception_rate = .12710
+throughput = 8.13496
+injectionrate = 0.14
+average_packet_latency = 70855.048107
+average_packet_queueing_latency = 67966.610655
+average_packet_network_latency = 2888.437452
+average_hops = 25.672655
+reception_rate = .12957
+throughput = 8.29296
+injectionrate = 0.15
+average_packet_latency = 82067.759259
+average_packet_queueing_latency = 79249.824536
+average_packet_network_latency = 2817.934722
+average_hops = 24.695275
+reception_rate = .13197
+throughput = 8.44620
diff --git a/results/IMR/results_IMR_algo_4_tornado_N=4_horse.txt b/results/IMR/results_IMR_algo_4_tornado_N=4_horse.txt
new file mode 100644
index 0000000000..2c874b5cf0
--- /dev/null
+++ b/results/IMR/results_IMR_algo_4_tornado_N=4_horse.txt
@@ -0,0 +1,78 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 319.946151
+average_packet_queueing_latency = 50
+average_packet_network_latency = 269.946151
+average_hops = 3.898004
+reception_rate = .00986
+throughput = .15785
+injectionrate = 0.1
+average_packet_latency = 319.344496
+average_packet_queueing_latency = 50
+average_packet_network_latency = 269.344496
+average_hops = 3.877585
+reception_rate = .09994
+throughput = 1.59915
+injectionrate = 0.2
+average_packet_latency = 319.853971
+average_packet_queueing_latency = 50
+average_packet_network_latency = 269.853971
+average_hops = 3.878438
+reception_rate = .19993
+throughput = 3.19902
+injectionrate = 0.3
+average_packet_latency = 320.840146
+average_packet_queueing_latency = 50
+average_packet_network_latency = 270.840146
+average_hops = 3.888684
+reception_rate = .30007
+throughput = 4.80119
+injectionrate = 0.4
+average_packet_latency = 322.058810
+average_packet_queueing_latency = 50
+average_packet_network_latency = 272.058810
+average_hops = 3.903730
+reception_rate = .39975
+throughput = 6.39605
+injectionrate = 0.5
+average_packet_latency = 323.850432
+average_packet_queueing_latency = 50
+average_packet_network_latency = 273.850432
+average_hops = 3.930483
+reception_rate = .49980
+throughput = 7.99692
+injectionrate = 0.6
+average_packet_latency = 326.509314
+average_packet_queueing_latency = 50
+average_packet_network_latency = 276.509314
+average_hops = 3.974570
+reception_rate = .59980
+throughput = 9.59691
+injectionrate = 0.7
+average_packet_latency = 329.811707
+average_packet_queueing_latency = 50
+average_packet_network_latency = 279.811707
+average_hops = 4.030895
+reception_rate = .69977
+throughput = 11.19639
+injectionrate = 0.8
+average_packet_latency = 333.908845
+average_packet_queueing_latency = 50
+average_packet_network_latency = 283.908845
+average_hops = 4.100527
+reception_rate = .79953
+throughput = 12.79254
+injectionrate = 0.9
+average_packet_latency = 338.543690
+average_packet_queueing_latency = 50
+average_packet_network_latency = 288.543690
+average_hops = 4.173976
+reception_rate = .89906
+throughput = 14.38502
+injectionrate = 1
+average_packet_latency = 344.706815
+average_packet_queueing_latency = 50
+average_packet_network_latency = 294.706815
+average_hops = 4.249167
+reception_rate = .99893
+throughput = 15.98291
diff --git a/results/IMR/results_IMR_algo_4_tornado_N=6_dog.txt b/results/IMR/results_IMR_algo_4_tornado_N=6_dog.txt
new file mode 100644
index 0000000000..6f4c5d2d2e
--- /dev/null
+++ b/results/IMR/results_IMR_algo_4_tornado_N=6_dog.txt
@@ -0,0 +1,57 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 766.993542
+average_packet_queueing_latency = 50
+average_packet_network_latency = 716.993542
+average_hops = 12.825130
+reception_rate = .00989
+throughput = .35615
+injectionrate = 0.1
+average_packet_latency = 773.326359
+average_packet_queueing_latency = 50
+average_packet_network_latency = 723.326359
+average_hops = 12.788582
+reception_rate = .09984
+throughput = 3.59426
+injectionrate = 0.2
+average_packet_latency = 798.857979
+average_packet_queueing_latency = 50
+average_packet_network_latency = 748.857979
+average_hops = 13.000680
+reception_rate = .19979
+throughput = 7.19273
+injectionrate = 0.3
+average_packet_latency = 1040.910517
+average_packet_queueing_latency = 50.855024
+average_packet_network_latency = 990.055493
+average_hops = 15.155188
+reception_rate = .29978
+throughput = 10.79239
+injectionrate = 0.31
+average_packet_latency = 16889.241394
+average_packet_queueing_latency = 15306.352474
+average_packet_network_latency = 1582.888920
+average_hops = 16.261734
+reception_rate = .30695
+throughput = 11.05034
+injectionrate = 0.32
+average_packet_latency = 59122.040370
+average_packet_queueing_latency = 57378.475940
+average_packet_network_latency = 1743.564430
+average_hops = 16.255005
+reception_rate = .30876
+throughput = 11.11541
+injectionrate = 0.33
+average_packet_latency = 84233.698745
+average_packet_queueing_latency = 82465.476962
+average_packet_network_latency = 1768.221783
+average_hops = 16.159512
+reception_rate = .30996
+throughput = 11.15865
+injectionrate = 0.34
+average_packet_latency = 98959.783444
+average_packet_queueing_latency = 97144.085428
+average_packet_network_latency = 1815.698016
+average_hops = 16.096548
+reception_rate = .31113
+throughput = 11.20081
diff --git a/results/IMR/results_IMR_algo_4_tornado_N=8_dog.txt b/results/IMR/results_IMR_algo_4_tornado_N=8_dog.txt
new file mode 100644
index 0000000000..f852db98fb
--- /dev/null
+++ b/results/IMR/results_IMR_algo_4_tornado_N=8_dog.txt
@@ -0,0 +1,71 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 1340.585300
+average_packet_queueing_latency = 50
+average_packet_network_latency = 1290.585300
+average_hops = 24.277994
+reception_rate = .00992
+throughput = .63523
+injectionrate = 0.03
+average_packet_latency = 1341.867385
+average_packet_queueing_latency = 50
+average_packet_network_latency = 1291.867385
+average_hops = 24.230288
+reception_rate = .02999
+throughput = 1.91977
+injectionrate = 0.05
+average_packet_latency = 1354.200474
+average_packet_queueing_latency = 50
+average_packet_network_latency = 1304.200474
+average_hops = 24.385186
+reception_rate = .05001
+throughput = 3.20071
+injectionrate = 0.07
+average_packet_latency = 1377.401886
+average_packet_queueing_latency = 50
+average_packet_network_latency = 1327.401886
+average_hops = 24.716279
+reception_rate = .06991
+throughput = 4.47440
+injectionrate = 0.1
+average_packet_latency = 1458.539081
+average_packet_queueing_latency = 50
+average_packet_network_latency = 1408.539081
+average_hops = 25.820314
+reception_rate = .09990
+throughput = 6.39416
+injectionrate = 0.11
+average_packet_latency = 1535.526503
+average_packet_queueing_latency = 50
+average_packet_network_latency = 1485.526503
+average_hops = 26.499054
+reception_rate = .10983
+throughput = 7.02940
+injectionrate = 0.12
+average_packet_latency = 1738.386381
+average_packet_queueing_latency = 50.001436
+average_packet_network_latency = 1688.384945
+average_hops = 27.367352
+reception_rate = .11972
+throughput = 7.66262
+injectionrate = 0.13
+average_packet_latency = 16760.084965
+average_packet_queueing_latency = 14042.280812
+average_packet_network_latency = 2717.804153
+average_hops = 27.185391
+reception_rate = .12815
+throughput = 8.20164
+injectionrate = 0.14
+average_packet_latency = 67752.068246
+average_packet_queueing_latency = 64881.233036
+average_packet_network_latency = 2870.835210
+average_hops = 25.828839
+reception_rate = .13044
+throughput = 8.34850
+injectionrate = 0.15
+average_packet_latency = 86229.393066
+average_packet_queueing_latency = 83427.238802
+average_packet_network_latency = 2802.154263
+average_hops = 24.818551
+reception_rate = .13275
+throughput = 8.49606
diff --git a/results/IMR/results_IMR_algo_4_transpose_N=4_horse.txt b/results/IMR/results_IMR_algo_4_transpose_N=4_horse.txt
new file mode 100644
index 0000000000..40f88d5019
--- /dev/null
+++ b/results/IMR/results_IMR_algo_4_transpose_N=4_horse.txt
@@ -0,0 +1,78 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 337.497624
+average_packet_queueing_latency = 50
+average_packet_network_latency = 287.497624
+average_hops = 4.248084
+reception_rate = .00986
+throughput = .15785
+injectionrate = 0.1
+average_packet_latency = 338.831028
+average_packet_queueing_latency = 50
+average_packet_network_latency = 288.831028
+average_hops = 4.257432
+reception_rate = .09994
+throughput = 1.59914
+injectionrate = 0.2
+average_packet_latency = 339.744576
+average_packet_queueing_latency = 50
+average_packet_network_latency = 289.744576
+average_hops = 4.256118
+reception_rate = .19993
+throughput = 3.19899
+injectionrate = 0.3
+average_packet_latency = 342.985051
+average_packet_queueing_latency = 50
+average_packet_network_latency = 292.985051
+average_hops = 4.299948
+reception_rate = .30007
+throughput = 4.80114
+injectionrate = 0.4
+average_packet_latency = 347.945431
+average_packet_queueing_latency = 50
+average_packet_network_latency = 297.945431
+average_hops = 4.376469
+reception_rate = .39974
+throughput = 6.39599
+injectionrate = 0.5
+average_packet_latency = 355.014950
+average_packet_queueing_latency = 50
+average_packet_network_latency = 305.014950
+average_hops = 4.492024
+reception_rate = .49980
+throughput = 7.99689
+injectionrate = 0.6
+average_packet_latency = 363.776002
+average_packet_queueing_latency = 50
+average_packet_network_latency = 313.776002
+average_hops = 4.638829
+reception_rate = .59980
+throughput = 9.59687
+injectionrate = 0.7
+average_packet_latency = 372.596386
+average_packet_queueing_latency = 50
+average_packet_network_latency = 322.596386
+average_hops = 4.787725
+reception_rate = .69977
+throughput = 11.19637
+injectionrate = 0.8
+average_packet_latency = 381.362722
+average_packet_queueing_latency = 50
+average_packet_network_latency = 331.362722
+average_hops = 4.933240
+reception_rate = .79953
+throughput = 12.79248
+injectionrate = 0.9
+average_packet_latency = 390.223158
+average_packet_queueing_latency = 50
+average_packet_network_latency = 340.223158
+average_hops = 5.072896
+reception_rate = .89905
+throughput = 14.38486
+injectionrate = 1
+average_packet_latency = 399.695125
+average_packet_queueing_latency = 50
+average_packet_network_latency = 349.695125
+average_hops = 5.227294
+reception_rate = .99892
+throughput = 15.98277
diff --git a/results/IMR/results_IMR_algo_4_transpose_N=6_dog.txt b/results/IMR/results_IMR_algo_4_transpose_N=6_dog.txt
new file mode 100644
index 0000000000..2620f4c8b5
--- /dev/null
+++ b/results/IMR/results_IMR_algo_4_transpose_N=6_dog.txt
@@ -0,0 +1,50 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 767.039169
+average_packet_queueing_latency = 50
+average_packet_network_latency = 717.039169
+average_hops = 12.825130
+reception_rate = .00989
+throughput = .35615
+injectionrate = 0.1
+average_packet_latency = 773.832235
+average_packet_queueing_latency = 50
+average_packet_network_latency = 723.832235
+average_hops = 12.788582
+reception_rate = .09984
+throughput = 3.59426
+injectionrate = 0.2
+average_packet_latency = 801.092527
+average_packet_queueing_latency = 50
+average_packet_network_latency = 751.092527
+average_hops = 13.001465
+reception_rate = .19979
+throughput = 7.19273
+injectionrate = 0.3
+average_packet_latency = 1511.011252
+average_packet_queueing_latency = 182.578728
+average_packet_network_latency = 1328.432524
+average_hops = 15.994394
+reception_rate = .29976
+throughput = 10.79162
+injectionrate = 0.31
+average_packet_latency = 42283.916522
+average_packet_queueing_latency = 40516.784370
+average_packet_network_latency = 1767.132152
+average_hops = 16.274118
+reception_rate = .30237
+throughput = 10.88541
+injectionrate = 0.32
+average_packet_latency = 77834.494061
+average_packet_queueing_latency = 76015.249418
+average_packet_network_latency = 1819.244643
+average_hops = 16.195401
+reception_rate = .30325
+throughput = 10.91722
+injectionrate = 0.33
+average_packet_latency = 97239.655418
+average_packet_queueing_latency = 95381.556037
+average_packet_network_latency = 1858.099381
+average_hops = 16.129951
+reception_rate = .30428
+throughput = 10.95414
diff --git a/results/IMR/results_IMR_algo_4_transpose_N=8_dog.txt b/results/IMR/results_IMR_algo_4_transpose_N=8_dog.txt
new file mode 100644
index 0000000000..a6e25f8563
--- /dev/null
+++ b/results/IMR/results_IMR_algo_4_transpose_N=8_dog.txt
@@ -0,0 +1,71 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 1340.588448
+average_packet_queueing_latency = 50
+average_packet_network_latency = 1290.588448
+average_hops = 24.277994
+reception_rate = .00992
+throughput = .63523
+injectionrate = 0.03
+average_packet_latency = 1341.892258
+average_packet_queueing_latency = 50
+average_packet_network_latency = 1291.892258
+average_hops = 24.230288
+reception_rate = .02999
+throughput = 1.91977
+injectionrate = 0.05
+average_packet_latency = 1354.270068
+average_packet_queueing_latency = 50
+average_packet_network_latency = 1304.270068
+average_hops = 24.385186
+reception_rate = .05001
+throughput = 3.20071
+injectionrate = 0.07
+average_packet_latency = 1377.541905
+average_packet_queueing_latency = 50
+average_packet_network_latency = 1327.541905
+average_hops = 24.716279
+reception_rate = .06991
+throughput = 4.47440
+injectionrate = 0.1
+average_packet_latency = 1459.437650
+average_packet_queueing_latency = 50
+average_packet_network_latency = 1409.437650
+average_hops = 25.820645
+reception_rate = .09990
+throughput = 6.39415
+injectionrate = 0.11
+average_packet_latency = 1538.941303
+average_packet_queueing_latency = 50
+average_packet_network_latency = 1488.941303
+average_hops = 26.504970
+reception_rate = .10983
+throughput = 7.02949
+injectionrate = 0.12
+average_packet_latency = 1755.867148
+average_packet_queueing_latency = 50.002316
+average_packet_network_latency = 1705.864831
+average_hops = 27.384885
+reception_rate = .11972
+throughput = 7.66271
+injectionrate = 0.13
+average_packet_latency = 19427.484226
+average_packet_queueing_latency = 16686.366924
+average_packet_network_latency = 2741.117301
+average_hops = 27.154098
+reception_rate = .12787
+throughput = 8.18414
+injectionrate = 0.14
+average_packet_latency = 67938.085066
+average_packet_queueing_latency = 65060.768862
+average_packet_network_latency = 2877.316204
+average_hops = 25.760500
+reception_rate = .13005
+throughput = 8.32321
+injectionrate = 0.15
+average_packet_latency = 84918.152150
+average_packet_queueing_latency = 82107.653013
+average_packet_network_latency = 2810.499137
+average_hops = 24.780732
+reception_rate = .13248
+throughput = 8.47934
diff --git a/results/IMR/results_IMR_algo_4_uniform_random_N=4_horse.txt b/results/IMR/results_IMR_algo_4_uniform_random_N=4_horse.txt
new file mode 100644
index 0000000000..123a597b1d
--- /dev/null
+++ b/results/IMR/results_IMR_algo_4_uniform_random_N=4_horse.txt
@@ -0,0 +1,78 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 379.904883
+average_packet_queueing_latency = 50
+average_packet_network_latency = 329.904883
+average_hops = 5.094293
+reception_rate = .00985
+throughput = .15770
+injectionrate = 0.1
+average_packet_latency = 380.091293
+average_packet_queueing_latency = 50
+average_packet_network_latency = 330.091293
+average_hops = 5.064175
+reception_rate = .09974
+throughput = 1.59596
+injectionrate = 0.2
+average_packet_latency = 382.502997
+average_packet_queueing_latency = 50
+average_packet_network_latency = 332.502997
+average_hops = 5.075270
+reception_rate = .19965
+throughput = 3.19449
+injectionrate = 0.3
+average_packet_latency = 384.675342
+average_packet_queueing_latency = 50
+average_packet_network_latency = 334.675342
+average_hops = 5.079400
+reception_rate = .29971
+throughput = 4.79536
+injectionrate = 0.4
+average_packet_latency = 386.684320
+average_packet_queueing_latency = 50
+average_packet_network_latency = 336.684320
+average_hops = 5.078667
+reception_rate = .39948
+throughput = 6.39175
+injectionrate = 0.5
+average_packet_latency = 389.071204
+average_packet_queueing_latency = 50
+average_packet_network_latency = 339.071204
+average_hops = 5.083070
+reception_rate = .49970
+throughput = 7.99530
+injectionrate = 0.6
+average_packet_latency = 392.200701
+average_packet_queueing_latency = 50.000026
+average_packet_network_latency = 342.200675
+average_hops = 5.095437
+reception_rate = .59973
+throughput = 9.59583
+injectionrate = 0.7
+average_packet_latency = 395.654026
+average_packet_queueing_latency = 50.000156
+average_packet_network_latency = 345.653869
+average_hops = 5.108027
+reception_rate = .69956
+throughput = 11.19306
+injectionrate = 0.8
+average_packet_latency = 400.616191
+average_packet_queueing_latency = 50.000704
+average_packet_network_latency = 350.615487
+average_hops = 5.139952
+reception_rate = .79896
+throughput = 12.78337
+injectionrate = 0.9
+average_packet_latency = 406.141107
+average_packet_queueing_latency = 50.001790
+average_packet_network_latency = 356.139317
+average_hops = 5.168701
+reception_rate = .89914
+throughput = 14.38625
+injectionrate = 1
+average_packet_latency = 413.686111
+average_packet_queueing_latency = 50.005475
+average_packet_network_latency = 363.680637
+average_hops = 5.215790
+reception_rate = .99893
+throughput = 15.98301
diff --git a/results/IMR/results_IMR_algo_4_uniform_random_N=6_dog.txt b/results/IMR/results_IMR_algo_4_uniform_random_N=6_dog.txt
new file mode 100644
index 0000000000..09ded0ad4f
--- /dev/null
+++ b/results/IMR/results_IMR_algo_4_uniform_random_N=6_dog.txt
@@ -0,0 +1,71 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 763.611580
+average_packet_queueing_latency = 50
+average_packet_network_latency = 713.611580
+average_hops = 12.755509
+reception_rate = .00988
+throughput = .35580
+injectionrate = 0.1
+average_packet_latency = 774.519790
+average_packet_queueing_latency = 50
+average_packet_network_latency = 724.519790
+average_hops = 12.793011
+reception_rate = .09978
+throughput = 3.59218
+injectionrate = 0.2
+average_packet_latency = 803.075005
+average_packet_queueing_latency = 50
+average_packet_network_latency = 753.075005
+average_hops = 13.003381
+reception_rate = .19981
+throughput = 7.19316
+injectionrate = 0.27
+average_packet_latency = 885.667574
+average_packet_queueing_latency = 50
+average_packet_network_latency = 835.667574
+average_hops = 13.800378
+reception_rate = .26978
+throughput = 9.71233
+injectionrate = 0.28
+average_packet_latency = 924.109616
+average_packet_queueing_latency = 50.000273
+average_packet_network_latency = 874.109343
+average_hops = 14.146087
+reception_rate = .27978
+throughput = 10.07234
+injectionrate = 0.29
+average_packet_latency = 1010.953014
+average_packet_queueing_latency = 50.071320
+average_packet_network_latency = 960.881695
+average_hops = 14.817572
+reception_rate = .28977
+throughput = 10.43190
+injectionrate = 0.295
+average_packet_latency = 1146.241766
+average_packet_queueing_latency = 53.985539
+average_packet_network_latency = 1092.256227
+average_hops = 15.464904
+reception_rate = .29475
+throughput = 10.61130
+injectionrate = 0.3
+average_packet_latency = 10314.208685
+average_packet_queueing_latency = 8756.091790
+average_packet_network_latency = 1558.116895
+average_hops = 16.248334
+reception_rate = .29844
+throughput = 10.74401
+injectionrate = 0.305
+average_packet_latency = 29094.641988
+average_packet_queueing_latency = 27345.043219
+average_packet_network_latency = 1749.598770
+average_hops = 16.354435
+reception_rate = .29970
+throughput = 10.78931
+injectionrate = 0.31
+average_packet_latency = 51719.254636
+average_packet_queueing_latency = 49927.690334
+average_packet_network_latency = 1791.564301
+average_hops = 16.332028
+reception_rate = .30044
+throughput = 10.81585
diff --git a/results/IMR/results_IMR_algo_4_uniform_random_N=8_dog.txt b/results/IMR/results_IMR_algo_4_uniform_random_N=8_dog.txt
new file mode 100644
index 0000000000..85e2c35e2f
--- /dev/null
+++ b/results/IMR/results_IMR_algo_4_uniform_random_N=8_dog.txt
@@ -0,0 +1,106 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 1332.902568
+average_packet_queueing_latency = 50
+average_packet_network_latency = 1282.902568
+average_hops = 24.122498
+reception_rate = .00992
+throughput = .63511
+injectionrate = 0.02
+average_packet_latency = 1337.849112
+average_packet_queueing_latency = 50
+average_packet_network_latency = 1287.849112
+average_hops = 24.184845
+reception_rate = .02001
+throughput = 1.28075
+injectionrate = 0.03
+average_packet_latency = 1339.776998
+average_packet_queueing_latency = 50
+average_packet_network_latency = 1289.776998
+average_hops = 24.185074
+reception_rate = .02997
+throughput = 1.91837
+injectionrate = 0.04
+average_packet_latency = 1345.654224
+average_packet_queueing_latency = 50
+average_packet_network_latency = 1295.654224
+average_hops = 24.257545
+reception_rate = .03992
+throughput = 2.55501
+injectionrate = 0.05
+average_packet_latency = 1353.918928
+average_packet_queueing_latency = 50
+average_packet_network_latency = 1303.918928
+average_hops = 24.370980
+reception_rate = .04998
+throughput = 3.19877
+injectionrate = 0.06
+average_packet_latency = 1363.853911
+average_packet_queueing_latency = 50
+average_packet_network_latency = 1313.853911
+average_hops = 24.507035
+reception_rate = .05990
+throughput = 3.83417
+injectionrate = 0.07
+average_packet_latency = 1377.309921
+average_packet_queueing_latency = 50
+average_packet_network_latency = 1327.309921
+average_hops = 24.696800
+reception_rate = .06986
+throughput = 4.47104
+injectionrate = 0.08
+average_packet_latency = 1396.458563
+average_packet_queueing_latency = 50
+average_packet_network_latency = 1346.458563
+average_hops = 24.971800
+reception_rate = .07980
+throughput = 5.10739
+injectionrate = 0.09
+average_packet_latency = 1420.031348
+average_packet_queueing_latency = 50
+average_packet_network_latency = 1370.031348
+average_hops = 25.279739
+reception_rate = .08981
+throughput = 5.74844
+injectionrate = 0.1
+average_packet_latency = 1463.143325
+average_packet_queueing_latency = 50
+average_packet_network_latency = 1413.143325
+average_hops = 25.823023
+reception_rate = .09978
+throughput = 6.38655
+injectionrate = 0.11
+average_packet_latency = 1559.950070
+average_packet_queueing_latency = 50
+average_packet_network_latency = 1509.950070
+average_hops = 26.559507
+reception_rate = .10973
+throughput = 7.02284
+injectionrate = 0.12
+average_packet_latency = 1846.584562
+average_packet_queueing_latency = 50.069229
+average_packet_network_latency = 1796.515333
+average_hops = 27.409876
+reception_rate = .11967
+throughput = 7.65934
+injectionrate = 0.13
+average_packet_latency = 27031.676692
+average_packet_queueing_latency = 24220.802965
+average_packet_network_latency = 2810.873727
+average_hops = 26.827416
+reception_rate = .12665
+throughput = 8.10596
+injectionrate = 0.14
+average_packet_latency = 72596.600078
+average_packet_queueing_latency = 69697.477472
+average_packet_network_latency = 2899.122606
+average_hops = 25.560026
+reception_rate = .12891
+throughput = 8.25085
+injectionrate = 0.15
+average_packet_latency = 83827.949143
+average_packet_queueing_latency = 81006.138572
+average_packet_network_latency = 2821.810571
+average_hops = 24.615053
+reception_rate = .13166
+throughput = 8.42643
diff --git a/results/Mesh_XY/results_Mesh_XY_algo_1_neighbor_N=4_horse.txt b/results/Mesh_XY/results_Mesh_XY_algo_1_neighbor_N=4_horse.txt
new file mode 100644
index 0000000000..1a22b3026e
--- /dev/null
+++ b/results/Mesh_XY/results_Mesh_XY_algo_1_neighbor_N=4_horse.txt
@@ -0,0 +1,78 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 200.142531
+average_packet_queueing_latency = 50
+average_packet_network_latency = 150.142531
+average_hops = 1.502851
+reception_rate = .00986
+throughput = .15786
+injectionrate = 0.1
+average_packet_latency = 200.068159
+average_packet_queueing_latency = 50
+average_packet_network_latency = 150.068159
+average_hops = 1.501363
+reception_rate = .09995
+throughput = 1.59920
+injectionrate = 0.2
+average_packet_latency = 200.038448
+average_packet_queueing_latency = 50
+average_packet_network_latency = 150.038448
+average_hops = 1.500769
+reception_rate = .19994
+throughput = 3.19912
+injectionrate = 0.3
+average_packet_latency = 200.062431
+average_packet_queueing_latency = 50
+average_packet_network_latency = 150.062431
+average_hops = 1.501249
+reception_rate = .30008
+throughput = 4.80133
+injectionrate = 0.4
+average_packet_latency = 200.051593
+average_packet_queueing_latency = 50
+average_packet_network_latency = 150.051593
+average_hops = 1.501032
+reception_rate = .39976
+throughput = 6.39620
+injectionrate = 0.5
+average_packet_latency = 200.009660
+average_packet_queueing_latency = 50
+average_packet_network_latency = 150.009660
+average_hops = 1.500193
+reception_rate = .49981
+throughput = 7.99711
+injectionrate = 0.6
+average_packet_latency = 200.012347
+average_packet_queueing_latency = 50
+average_packet_network_latency = 150.012347
+average_hops = 1.500247
+reception_rate = .59982
+throughput = 9.59714
+injectionrate = 0.7
+average_packet_latency = 200.000781
+average_packet_queueing_latency = 50
+average_packet_network_latency = 150.000781
+average_hops = 1.500016
+reception_rate = .69979
+throughput = 11.19669
+injectionrate = 0.8
+average_packet_latency = 199.997381
+average_packet_queueing_latency = 50
+average_packet_network_latency = 149.997381
+average_hops = 1.499948
+reception_rate = .79955
+throughput = 12.79290
+injectionrate = 0.9
+average_packet_latency = 200.001599
+average_packet_queueing_latency = 50
+average_packet_network_latency = 150.001599
+average_hops = 1.500032
+reception_rate = .89908
+throughput = 14.38540
+injectionrate = 1
+average_packet_latency = 200.000360
+average_packet_queueing_latency = 50
+average_packet_network_latency = 150.000360
+average_hops = 1.500007
+reception_rate = .99896
+throughput = 15.98337
diff --git a/results/Mesh_XY/results_Mesh_XY_algo_1_neighbor_N=6_dog.txt b/results/Mesh_XY/results_Mesh_XY_algo_1_neighbor_N=6_dog.txt
new file mode 100644
index 0000000000..16aada5c81
--- /dev/null
+++ b/results/Mesh_XY/results_Mesh_XY_algo_1_neighbor_N=6_dog.txt
@@ -0,0 +1,71 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 378.582458
+average_packet_queueing_latency = 50
+average_packet_network_latency = 328.582458
+average_hops = 5.006850
+reception_rate = .00989
+throughput = .35618
+injectionrate = 0.02
+average_packet_latency = 381.532008
+average_packet_queueing_latency = 50
+average_packet_network_latency = 331.532008
+average_hops = 4.992501
+reception_rate = .01996
+throughput = .71873
+injectionrate = 0.03
+average_packet_latency = 386.320234
+average_packet_queueing_latency = 50
+average_packet_network_latency = 336.320234
+average_hops = 4.992701
+reception_rate = .02994
+throughput = 1.07818
+injectionrate = 0.04
+average_packet_latency = 394.179532
+average_packet_queueing_latency = 50
+average_packet_network_latency = 344.179532
+average_hops = 4.996428
+reception_rate = .03988
+throughput = 1.43601
+injectionrate = 0.05
+average_packet_latency = 409.471750
+average_packet_queueing_latency = 50
+average_packet_network_latency = 359.471750
+average_hops = 5.000773
+reception_rate = .04996
+throughput = 1.79877
+injectionrate = 0.06
+average_packet_latency = 465.912698
+average_packet_queueing_latency = 50
+average_packet_network_latency = 415.912698
+average_hops = 5.005300
+reception_rate = .05985
+throughput = 2.15471
+injectionrate = 0.07
+average_packet_latency = 56250.535181
+average_packet_queueing_latency = 54479.760979
+average_packet_network_latency = 1770.774202
+average_hops = 4.837100
+reception_rate = .06713
+throughput = 2.41694
+injectionrate = 0.08
+average_packet_latency = 108388.577073
+average_packet_queueing_latency = 106316.783282
+average_packet_network_latency = 2071.793791
+average_hops = 4.448397
+reception_rate = .06885
+throughput = 2.47894
+injectionrate = 0.09
+average_packet_latency = 154075.492533
+average_packet_queueing_latency = 151397.183485
+average_packet_network_latency = 2678.309048
+average_hops = 4.210801
+reception_rate = .07055
+throughput = 2.53993
+injectionrate = 0.1
+average_packet_latency = 204942.523069
+average_packet_queueing_latency = 202185.117969
+average_packet_network_latency = 2757.405100
+average_hops = 4.008897
+reception_rate = .07221
+throughput = 2.59983
diff --git a/results/Mesh_XY/results_Mesh_XY_algo_1_neighbor_N=8_dog.txt b/results/Mesh_XY/results_Mesh_XY_algo_1_neighbor_N=8_dog.txt
new file mode 100644
index 0000000000..0b59565244
--- /dev/null
+++ b/results/Mesh_XY/results_Mesh_XY_algo_1_neighbor_N=8_dog.txt
@@ -0,0 +1,64 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 481.428134
+average_packet_queueing_latency = 50
+average_packet_network_latency = 431.428134
+average_hops = 6.997205
+reception_rate = .00995
+throughput = .63681
+injectionrate = 0.02
+average_packet_latency = 493.000889
+average_packet_queueing_latency = 50
+average_packet_network_latency = 443.000889
+average_hops = 7.002083
+reception_rate = .02003
+throughput = 1.28202
+injectionrate = 0.03
+average_packet_latency = 536.627922
+average_packet_queueing_latency = 50
+average_packet_network_latency = 486.627922
+average_hops = 6.998860
+reception_rate = .03002
+throughput = 1.92156
+injectionrate = 0.04
+average_packet_latency = 62389.216406
+average_packet_queueing_latency = 59496.600209
+average_packet_network_latency = 2892.616197
+average_hops = 6.455908
+reception_rate = .03619
+throughput = 2.31676
+injectionrate = 0.05
+average_packet_latency = 114769.670249
+average_packet_queueing_latency = 110401.612439
+average_packet_network_latency = 4368.057811
+average_hops = 5.776984
+reception_rate = .03743
+throughput = 2.39575
+injectionrate = 0.06
+average_packet_latency = 152439.363698
+average_packet_queueing_latency = 147333.815512
+average_packet_network_latency = 5105.548186
+average_hops = 5.327575
+reception_rate = .03869
+throughput = 2.47626
+injectionrate = 0.07
+average_packet_latency = 188996.942358
+average_packet_queueing_latency = 183276.461781
+average_packet_network_latency = 5720.480577
+average_hops = 5.001569
+reception_rate = .03994
+throughput = 2.55630
+injectionrate = 0.08
+average_packet_latency = 193217.822564
+average_packet_queueing_latency = 187520.326111
+average_packet_network_latency = 5697.496453
+average_hops = 4.751969
+reception_rate = .04118
+throughput = 2.63576
+injectionrate = 0.09
+average_packet_latency = 207102.125379
+average_packet_queueing_latency = 201025.258023
+average_packet_network_latency = 6076.867355
+average_hops = 4.567014
+reception_rate = .04245
+throughput = 2.71681
diff --git a/results/Mesh_XY/results_Mesh_XY_algo_1_shuffle_N=4_horse.txt b/results/Mesh_XY/results_Mesh_XY_algo_1_shuffle_N=4_horse.txt
new file mode 100644
index 0000000000..ec32fbe77e
--- /dev/null
+++ b/results/Mesh_XY/results_Mesh_XY_algo_1_shuffle_N=4_horse.txt
@@ -0,0 +1,78 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 225.128278
+average_packet_queueing_latency = 50
+average_packet_network_latency = 175.128278
+average_hops = 2.001457
+reception_rate = .00986
+throughput = .15786
+injectionrate = 0.1
+average_packet_latency = 225.509630
+average_packet_queueing_latency = 50
+average_packet_network_latency = 175.509630
+average_hops = 1.997936
+reception_rate = .09995
+throughput = 1.59920
+injectionrate = 0.2
+average_packet_latency = 226.037554
+average_packet_queueing_latency = 50
+average_packet_network_latency = 176.037554
+average_hops = 1.995783
+reception_rate = .19994
+throughput = 3.19911
+injectionrate = 0.3
+average_packet_latency = 226.825919
+average_packet_queueing_latency = 50
+average_packet_network_latency = 176.825919
+average_hops = 1.999054
+reception_rate = .30008
+throughput = 4.80128
+injectionrate = 0.4
+average_packet_latency = 227.462806
+average_packet_queueing_latency = 50
+average_packet_network_latency = 177.462806
+average_hops = 1.999251
+reception_rate = .39976
+throughput = 6.39616
+injectionrate = 0.5
+average_packet_latency = 228.154401
+average_packet_queueing_latency = 50
+average_packet_network_latency = 178.154401
+average_hops = 2.000501
+reception_rate = .49981
+throughput = 7.99708
+injectionrate = 0.6
+average_packet_latency = 228.774890
+average_packet_queueing_latency = 50
+average_packet_network_latency = 178.774890
+average_hops = 2.000476
+reception_rate = .59981
+throughput = 9.59710
+injectionrate = 0.7
+average_packet_latency = 229.344093
+average_packet_queueing_latency = 50
+average_packet_network_latency = 179.344093
+average_hops = 1.999428
+reception_rate = .69979
+throughput = 11.19664
+injectionrate = 0.8
+average_packet_latency = 229.983530
+average_packet_queueing_latency = 50
+average_packet_network_latency = 179.983530
+average_hops = 1.999720
+reception_rate = .79955
+throughput = 12.79284
+injectionrate = 0.9
+average_packet_latency = 230.618440
+average_packet_queueing_latency = 50
+average_packet_network_latency = 180.618440
+average_hops = 1.999917
+reception_rate = .89908
+throughput = 14.38531
+injectionrate = 1
+average_packet_latency = 231.241018
+average_packet_queueing_latency = 50
+average_packet_network_latency = 181.241018
+average_hops = 1.999957
+reception_rate = .99895
+throughput = 15.98329
diff --git a/results/Mesh_XY/results_Mesh_XY_algo_1_shuffle_N=6_dog.txt b/results/Mesh_XY/results_Mesh_XY_algo_1_shuffle_N=6_dog.txt
new file mode 100644
index 0000000000..9d7f89d073
--- /dev/null
+++ b/results/Mesh_XY/results_Mesh_XY_algo_1_shuffle_N=6_dog.txt
@@ -0,0 +1,71 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 378.557892
+average_packet_queueing_latency = 50
+average_packet_network_latency = 328.557892
+average_hops = 5.006850
+reception_rate = .00989
+throughput = .35618
+injectionrate = 0.02
+average_packet_latency = 381.479137
+average_packet_queueing_latency = 50
+average_packet_network_latency = 331.479137
+average_hops = 4.992501
+reception_rate = .01996
+throughput = .71873
+injectionrate = 0.03
+average_packet_latency = 386.240934
+average_packet_queueing_latency = 50
+average_packet_network_latency = 336.240934
+average_hops = 4.992701
+reception_rate = .02994
+throughput = 1.07818
+injectionrate = 0.04
+average_packet_latency = 394.052444
+average_packet_queueing_latency = 50
+average_packet_network_latency = 344.052444
+average_hops = 4.996428
+reception_rate = .03988
+throughput = 1.43601
+injectionrate = 0.05
+average_packet_latency = 409.249654
+average_packet_queueing_latency = 50
+average_packet_network_latency = 359.249654
+average_hops = 5.000773
+reception_rate = .04996
+throughput = 1.79877
+injectionrate = 0.06
+average_packet_latency = 464.191005
+average_packet_queueing_latency = 50
+average_packet_network_latency = 414.191005
+average_hops = 5.005300
+reception_rate = .05985
+throughput = 2.15471
+injectionrate = 0.07
+average_packet_latency = 54481.503852
+average_packet_queueing_latency = 52716.608017
+average_packet_network_latency = 1764.895835
+average_hops = 4.841461
+reception_rate = .06721
+throughput = 2.41972
+injectionrate = 0.08
+average_packet_latency = 108713.420178
+average_packet_queueing_latency = 106644.622675
+average_packet_network_latency = 2068.797503
+average_hops = 4.449935
+reception_rate = .06889
+throughput = 2.48009
+injectionrate = 0.09
+average_packet_latency = 153947.732990
+average_packet_queueing_latency = 151269.654801
+average_packet_network_latency = 2678.078189
+average_hops = 4.211013
+reception_rate = .07055
+throughput = 2.54013
+injectionrate = 0.1
+average_packet_latency = 204910.843302
+average_packet_queueing_latency = 202153.556291
+average_packet_network_latency = 2757.287011
+average_hops = 4.008954
+reception_rate = .07221
+throughput = 2.59990
diff --git a/results/Mesh_XY/results_Mesh_XY_algo_1_shuffle_N=8_dog.txt b/results/Mesh_XY/results_Mesh_XY_algo_1_shuffle_N=8_dog.txt
new file mode 100644
index 0000000000..05309a0b84
--- /dev/null
+++ b/results/Mesh_XY/results_Mesh_XY_algo_1_shuffle_N=8_dog.txt
@@ -0,0 +1,64 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 481.402224
+average_packet_queueing_latency = 50
+average_packet_network_latency = 431.402224
+average_hops = 6.997205
+reception_rate = .00995
+throughput = .63681
+injectionrate = 0.02
+average_packet_latency = 492.927762
+average_packet_queueing_latency = 50
+average_packet_network_latency = 442.927762
+average_hops = 7.002083
+reception_rate = .02003
+throughput = 1.28202
+injectionrate = 0.03
+average_packet_latency = 535.992761
+average_packet_queueing_latency = 50
+average_packet_network_latency = 485.992761
+average_hops = 6.998860
+reception_rate = .03002
+throughput = 1.92156
+injectionrate = 0.04
+average_packet_latency = 62241.395593
+average_packet_queueing_latency = 59359.423879
+average_packet_network_latency = 2881.971713
+average_hops = 6.461108
+reception_rate = .03624
+throughput = 2.31948
+injectionrate = 0.05
+average_packet_latency = 115063.726150
+average_packet_queueing_latency = 110719.873155
+average_packet_network_latency = 4343.852995
+average_hops = 5.781056
+reception_rate = .03749
+throughput = 2.39938
+injectionrate = 0.06
+average_packet_latency = 152690.877919
+average_packet_queueing_latency = 147588.388942
+average_packet_network_latency = 5102.488977
+average_hops = 5.330433
+reception_rate = .03873
+throughput = 2.47893
+injectionrate = 0.07
+average_packet_latency = 188824.442444
+average_packet_queueing_latency = 183102.397050
+average_packet_network_latency = 5722.045394
+average_hops = 5.003448
+reception_rate = .03996
+throughput = 2.55804
+injectionrate = 0.08
+average_packet_latency = 193353.116824
+average_packet_queueing_latency = 187663.168317
+average_packet_network_latency = 5689.948506
+average_hops = 4.753119
+reception_rate = .04120
+throughput = 2.63722
+injectionrate = 0.09
+average_packet_latency = 206594.273660
+average_packet_queueing_latency = 200523.981884
+average_packet_network_latency = 6070.291776
+average_hops = 4.568107
+reception_rate = .04246
+throughput = 2.71801
diff --git a/results/Mesh_XY/results_Mesh_XY_algo_1_tornado_N=4_horse.txt b/results/Mesh_XY/results_Mesh_XY_algo_1_tornado_N=4_horse.txt
new file mode 100644
index 0000000000..1a22b3026e
--- /dev/null
+++ b/results/Mesh_XY/results_Mesh_XY_algo_1_tornado_N=4_horse.txt
@@ -0,0 +1,78 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 200.142531
+average_packet_queueing_latency = 50
+average_packet_network_latency = 150.142531
+average_hops = 1.502851
+reception_rate = .00986
+throughput = .15786
+injectionrate = 0.1
+average_packet_latency = 200.068159
+average_packet_queueing_latency = 50
+average_packet_network_latency = 150.068159
+average_hops = 1.501363
+reception_rate = .09995
+throughput = 1.59920
+injectionrate = 0.2
+average_packet_latency = 200.038448
+average_packet_queueing_latency = 50
+average_packet_network_latency = 150.038448
+average_hops = 1.500769
+reception_rate = .19994
+throughput = 3.19912
+injectionrate = 0.3
+average_packet_latency = 200.062431
+average_packet_queueing_latency = 50
+average_packet_network_latency = 150.062431
+average_hops = 1.501249
+reception_rate = .30008
+throughput = 4.80133
+injectionrate = 0.4
+average_packet_latency = 200.051593
+average_packet_queueing_latency = 50
+average_packet_network_latency = 150.051593
+average_hops = 1.501032
+reception_rate = .39976
+throughput = 6.39620
+injectionrate = 0.5
+average_packet_latency = 200.009660
+average_packet_queueing_latency = 50
+average_packet_network_latency = 150.009660
+average_hops = 1.500193
+reception_rate = .49981
+throughput = 7.99711
+injectionrate = 0.6
+average_packet_latency = 200.012347
+average_packet_queueing_latency = 50
+average_packet_network_latency = 150.012347
+average_hops = 1.500247
+reception_rate = .59982
+throughput = 9.59714
+injectionrate = 0.7
+average_packet_latency = 200.000781
+average_packet_queueing_latency = 50
+average_packet_network_latency = 150.000781
+average_hops = 1.500016
+reception_rate = .69979
+throughput = 11.19669
+injectionrate = 0.8
+average_packet_latency = 199.997381
+average_packet_queueing_latency = 50
+average_packet_network_latency = 149.997381
+average_hops = 1.499948
+reception_rate = .79955
+throughput = 12.79290
+injectionrate = 0.9
+average_packet_latency = 200.001599
+average_packet_queueing_latency = 50
+average_packet_network_latency = 150.001599
+average_hops = 1.500032
+reception_rate = .89908
+throughput = 14.38540
+injectionrate = 1
+average_packet_latency = 200.000360
+average_packet_queueing_latency = 50
+average_packet_network_latency = 150.000360
+average_hops = 1.500007
+reception_rate = .99896
+throughput = 15.98337
diff --git a/results/Mesh_XY/results_Mesh_XY_algo_1_tornado_N=6_dog.txt b/results/Mesh_XY/results_Mesh_XY_algo_1_tornado_N=6_dog.txt
new file mode 100644
index 0000000000..16aada5c81
--- /dev/null
+++ b/results/Mesh_XY/results_Mesh_XY_algo_1_tornado_N=6_dog.txt
@@ -0,0 +1,71 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 378.582458
+average_packet_queueing_latency = 50
+average_packet_network_latency = 328.582458
+average_hops = 5.006850
+reception_rate = .00989
+throughput = .35618
+injectionrate = 0.02
+average_packet_latency = 381.532008
+average_packet_queueing_latency = 50
+average_packet_network_latency = 331.532008
+average_hops = 4.992501
+reception_rate = .01996
+throughput = .71873
+injectionrate = 0.03
+average_packet_latency = 386.320234
+average_packet_queueing_latency = 50
+average_packet_network_latency = 336.320234
+average_hops = 4.992701
+reception_rate = .02994
+throughput = 1.07818
+injectionrate = 0.04
+average_packet_latency = 394.179532
+average_packet_queueing_latency = 50
+average_packet_network_latency = 344.179532
+average_hops = 4.996428
+reception_rate = .03988
+throughput = 1.43601
+injectionrate = 0.05
+average_packet_latency = 409.471750
+average_packet_queueing_latency = 50
+average_packet_network_latency = 359.471750
+average_hops = 5.000773
+reception_rate = .04996
+throughput = 1.79877
+injectionrate = 0.06
+average_packet_latency = 465.912698
+average_packet_queueing_latency = 50
+average_packet_network_latency = 415.912698
+average_hops = 5.005300
+reception_rate = .05985
+throughput = 2.15471
+injectionrate = 0.07
+average_packet_latency = 56250.535181
+average_packet_queueing_latency = 54479.760979
+average_packet_network_latency = 1770.774202
+average_hops = 4.837100
+reception_rate = .06713
+throughput = 2.41694
+injectionrate = 0.08
+average_packet_latency = 108388.577073
+average_packet_queueing_latency = 106316.783282
+average_packet_network_latency = 2071.793791
+average_hops = 4.448397
+reception_rate = .06885
+throughput = 2.47894
+injectionrate = 0.09
+average_packet_latency = 154075.492533
+average_packet_queueing_latency = 151397.183485
+average_packet_network_latency = 2678.309048
+average_hops = 4.210801
+reception_rate = .07055
+throughput = 2.53993
+injectionrate = 0.1
+average_packet_latency = 204942.523069
+average_packet_queueing_latency = 202185.117969
+average_packet_network_latency = 2757.405100
+average_hops = 4.008897
+reception_rate = .07221
+throughput = 2.59983
diff --git a/results/Mesh_XY/results_Mesh_XY_algo_1_tornado_N=8_dog.txt b/results/Mesh_XY/results_Mesh_XY_algo_1_tornado_N=8_dog.txt
new file mode 100644
index 0000000000..0b59565244
--- /dev/null
+++ b/results/Mesh_XY/results_Mesh_XY_algo_1_tornado_N=8_dog.txt
@@ -0,0 +1,64 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 481.428134
+average_packet_queueing_latency = 50
+average_packet_network_latency = 431.428134
+average_hops = 6.997205
+reception_rate = .00995
+throughput = .63681
+injectionrate = 0.02
+average_packet_latency = 493.000889
+average_packet_queueing_latency = 50
+average_packet_network_latency = 443.000889
+average_hops = 7.002083
+reception_rate = .02003
+throughput = 1.28202
+injectionrate = 0.03
+average_packet_latency = 536.627922
+average_packet_queueing_latency = 50
+average_packet_network_latency = 486.627922
+average_hops = 6.998860
+reception_rate = .03002
+throughput = 1.92156
+injectionrate = 0.04
+average_packet_latency = 62389.216406
+average_packet_queueing_latency = 59496.600209
+average_packet_network_latency = 2892.616197
+average_hops = 6.455908
+reception_rate = .03619
+throughput = 2.31676
+injectionrate = 0.05
+average_packet_latency = 114769.670249
+average_packet_queueing_latency = 110401.612439
+average_packet_network_latency = 4368.057811
+average_hops = 5.776984
+reception_rate = .03743
+throughput = 2.39575
+injectionrate = 0.06
+average_packet_latency = 152439.363698
+average_packet_queueing_latency = 147333.815512
+average_packet_network_latency = 5105.548186
+average_hops = 5.327575
+reception_rate = .03869
+throughput = 2.47626
+injectionrate = 0.07
+average_packet_latency = 188996.942358
+average_packet_queueing_latency = 183276.461781
+average_packet_network_latency = 5720.480577
+average_hops = 5.001569
+reception_rate = .03994
+throughput = 2.55630
+injectionrate = 0.08
+average_packet_latency = 193217.822564
+average_packet_queueing_latency = 187520.326111
+average_packet_network_latency = 5697.496453
+average_hops = 4.751969
+reception_rate = .04118
+throughput = 2.63576
+injectionrate = 0.09
+average_packet_latency = 207102.125379
+average_packet_queueing_latency = 201025.258023
+average_packet_network_latency = 6076.867355
+average_hops = 4.567014
+reception_rate = .04245
+throughput = 2.71681
diff --git a/results/Mesh_XY/results_Mesh_XY_algo_1_transpose_N=4_horse.txt b/results/Mesh_XY/results_Mesh_XY_algo_1_transpose_N=4_horse.txt
new file mode 100644
index 0000000000..2dfa182949
--- /dev/null
+++ b/results/Mesh_XY/results_Mesh_XY_algo_1_transpose_N=4_horse.txt
@@ -0,0 +1,78 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 250.171038
+average_packet_queueing_latency = 50
+average_packet_network_latency = 200.171038
+average_hops = 2.500697
+reception_rate = .00986
+throughput = .15786
+injectionrate = 0.1
+average_packet_latency = 251.479812
+average_packet_queueing_latency = 50
+average_packet_network_latency = 201.479812
+average_hops = 2.504418
+reception_rate = .09994
+throughput = 1.59919
+injectionrate = 0.2
+average_packet_latency = 252.413428
+average_packet_queueing_latency = 50
+average_packet_network_latency = 202.413428
+average_hops = 2.496662
+reception_rate = .19994
+throughput = 3.19908
+injectionrate = 0.3
+average_packet_latency = 254.036345
+average_packet_queueing_latency = 50
+average_packet_network_latency = 204.036345
+average_hops = 2.499158
+reception_rate = .30007
+throughput = 4.80125
+injectionrate = 0.4
+average_packet_latency = 255.915227
+average_packet_queueing_latency = 50
+average_packet_network_latency = 205.915227
+average_hops = 2.498052
+reception_rate = .39975
+throughput = 6.39612
+injectionrate = 0.5
+average_packet_latency = 259.079985
+average_packet_queueing_latency = 50.004908
+average_packet_network_latency = 209.075077
+average_hops = 2.498677
+reception_rate = .49981
+throughput = 7.99704
+injectionrate = 0.6
+average_packet_latency = 269.167466
+average_packet_queueing_latency = 50.467879
+average_packet_network_latency = 218.699587
+average_hops = 2.500455
+reception_rate = .59981
+throughput = 9.59703
+injectionrate = 0.7
+average_packet_latency = 41762.190052
+average_packet_queueing_latency = 41481.863180
+average_packet_network_latency = 280.326872
+average_hops = 2.454028
+reception_rate = .68746
+throughput = 10.99942
+injectionrate = 0.8
+average_packet_latency = 124735.728384
+average_packet_queueing_latency = 124463.089823
+average_packet_network_latency = 272.638560
+average_hops = 2.333052
+reception_rate = .74985
+throughput = 11.99766
+injectionrate = 0.9
+average_packet_latency = 164203.727345
+average_packet_queueing_latency = 163937.509342
+average_packet_network_latency = 266.218003
+average_hops = 2.231027
+reception_rate = .81206
+throughput = 12.99303
+injectionrate = 1
+average_packet_latency = 178716.442563
+average_packet_queueing_latency = 178455.679045
+average_packet_network_latency = 260.763518
+average_hops = 2.143591
+reception_rate = .87431
+throughput = 13.98906
diff --git a/results/Mesh_XY/results_Mesh_XY_algo_1_transpose_N=6_dog.txt b/results/Mesh_XY/results_Mesh_XY_algo_1_transpose_N=6_dog.txt
new file mode 100644
index 0000000000..32cd3e9fea
--- /dev/null
+++ b/results/Mesh_XY/results_Mesh_XY_algo_1_transpose_N=6_dog.txt
@@ -0,0 +1,71 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 378.582458
+average_packet_queueing_latency = 50
+average_packet_network_latency = 328.582458
+average_hops = 5.006850
+reception_rate = .00989
+throughput = .35618
+injectionrate = 0.02
+average_packet_latency = 381.526442
+average_packet_queueing_latency = 50
+average_packet_network_latency = 331.526442
+average_hops = 4.992501
+reception_rate = .01996
+throughput = .71873
+injectionrate = 0.03
+average_packet_latency = 386.319770
+average_packet_queueing_latency = 50
+average_packet_network_latency = 336.319770
+average_hops = 4.992701
+reception_rate = .02994
+throughput = 1.07818
+injectionrate = 0.04
+average_packet_latency = 394.195549
+average_packet_queueing_latency = 50
+average_packet_network_latency = 344.195549
+average_hops = 4.996428
+reception_rate = .03988
+throughput = 1.43601
+injectionrate = 0.05
+average_packet_latency = 409.554307
+average_packet_queueing_latency = 50
+average_packet_network_latency = 359.554307
+average_hops = 5.000773
+reception_rate = .04996
+throughput = 1.79877
+injectionrate = 0.06
+average_packet_latency = 466.015803
+average_packet_queueing_latency = 50
+average_packet_network_latency = 416.015803
+average_hops = 5.005295
+reception_rate = .05985
+throughput = 2.15470
+injectionrate = 0.07
+average_packet_latency = 57031.909112
+average_packet_queueing_latency = 55258.936998
+average_packet_network_latency = 1772.972114
+average_hops = 4.835526
+reception_rate = .06710
+throughput = 2.41594
+injectionrate = 0.08
+average_packet_latency = 108137.615936
+average_packet_queueing_latency = 106062.458630
+average_packet_network_latency = 2075.157306
+average_hops = 4.446655
+reception_rate = .06882
+throughput = 2.47766
+injectionrate = 0.09
+average_packet_latency = 154370.031231
+average_packet_queueing_latency = 151690.651534
+average_packet_network_latency = 2679.379696
+average_hops = 4.210034
+reception_rate = .07053
+throughput = 2.53916
+injectionrate = 0.1
+average_packet_latency = 205007.436732
+average_packet_queueing_latency = 202249.071274
+average_packet_network_latency = 2758.365458
+average_hops = 4.008375
+reception_rate = .07220
+throughput = 2.59926
diff --git a/results/Mesh_XY/results_Mesh_XY_algo_1_transpose_N=8_dog.txt b/results/Mesh_XY/results_Mesh_XY_algo_1_transpose_N=8_dog.txt
new file mode 100644
index 0000000000..b39756077d
--- /dev/null
+++ b/results/Mesh_XY/results_Mesh_XY_algo_1_transpose_N=8_dog.txt
@@ -0,0 +1,64 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 481.446193
+average_packet_queueing_latency = 50
+average_packet_network_latency = 431.446193
+average_hops = 6.997205
+reception_rate = .00995
+throughput = .63681
+injectionrate = 0.02
+average_packet_latency = 493.034235
+average_packet_queueing_latency = 50
+average_packet_network_latency = 443.034235
+average_hops = 7.002083
+reception_rate = .02003
+throughput = 1.28202
+injectionrate = 0.03
+average_packet_latency = 536.632606
+average_packet_queueing_latency = 50
+average_packet_network_latency = 486.632606
+average_hops = 6.998860
+reception_rate = .03002
+throughput = 1.92156
+injectionrate = 0.04
+average_packet_latency = 62525.590136
+average_packet_queueing_latency = 59630.378909
+average_packet_network_latency = 2895.211227
+average_hops = 6.454385
+reception_rate = .03618
+throughput = 2.31599
+injectionrate = 0.05
+average_packet_latency = 114941.175077
+average_packet_queueing_latency = 110572.338989
+average_packet_network_latency = 4368.836088
+average_hops = 5.777031
+reception_rate = .03743
+throughput = 2.39580
+injectionrate = 0.06
+average_packet_latency = 152237.362384
+average_packet_queueing_latency = 147127.076867
+average_packet_network_latency = 5110.285517
+average_hops = 5.325549
+reception_rate = .03866
+throughput = 2.47428
+injectionrate = 0.07
+average_packet_latency = 189522.475706
+average_packet_queueing_latency = 183790.989319
+average_packet_network_latency = 5731.486386
+average_hops = 4.999225
+reception_rate = .03990
+throughput = 2.55408
+injectionrate = 0.08
+average_packet_latency = 193048.424051
+average_packet_queueing_latency = 187341.871851
+average_packet_network_latency = 5706.552200
+average_hops = 4.750472
+reception_rate = .04115
+throughput = 2.63381
+injectionrate = 0.09
+average_packet_latency = 207518.757388
+average_packet_queueing_latency = 201438.430173
+average_packet_network_latency = 6080.327215
+average_hops = 4.565743
+reception_rate = .04242
+throughput = 2.71549
diff --git a/results/Mesh_XY/results_Mesh_XY_algo_1_uniform_random_N=4_horse.txt b/results/Mesh_XY/results_Mesh_XY_algo_1_uniform_random_N=4_horse.txt
new file mode 100644
index 0000000000..60e6f700d3
--- /dev/null
+++ b/results/Mesh_XY/results_Mesh_XY_algo_1_uniform_random_N=4_horse.txt
@@ -0,0 +1,78 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 250.331325
+average_packet_queueing_latency = 50
+average_packet_network_latency = 200.331325
+average_hops = 2.503234
+reception_rate = .00985
+throughput = .15770
+injectionrate = 0.1
+average_packet_latency = 251.808416
+average_packet_queueing_latency = 50
+average_packet_network_latency = 201.808416
+average_hops = 2.499201
+reception_rate = .09975
+throughput = 1.59601
+injectionrate = 0.2
+average_packet_latency = 253.699156
+average_packet_queueing_latency = 50
+average_packet_network_latency = 203.699156
+average_hops = 2.500178
+reception_rate = .19966
+throughput = 3.19458
+injectionrate = 0.3
+average_packet_latency = 255.637288
+average_packet_queueing_latency = 50
+average_packet_network_latency = 205.637288
+average_hops = 2.500922
+reception_rate = .29971
+throughput = 4.79548
+injectionrate = 0.4
+average_packet_latency = 257.474601
+average_packet_queueing_latency = 50
+average_packet_network_latency = 207.474601
+average_hops = 2.497965
+reception_rate = .39949
+throughput = 6.39198
+injectionrate = 0.5
+average_packet_latency = 259.847865
+average_packet_queueing_latency = 50
+average_packet_network_latency = 209.847865
+average_hops = 2.499901
+reception_rate = .49972
+throughput = 7.99554
+injectionrate = 0.6
+average_packet_latency = 262.411409
+average_packet_queueing_latency = 50.000026
+average_packet_network_latency = 212.411383
+average_hops = 2.500700
+reception_rate = .59975
+throughput = 9.59611
+injectionrate = 0.7
+average_packet_latency = 265.368852
+average_packet_queueing_latency = 50.000156
+average_packet_network_latency = 215.368696
+average_hops = 2.498556
+reception_rate = .69958
+throughput = 11.19337
+injectionrate = 0.8
+average_packet_latency = 269.347113
+average_packet_queueing_latency = 50.001252
+average_packet_network_latency = 219.345862
+average_hops = 2.502662
+reception_rate = .79898
+throughput = 12.78369
+injectionrate = 0.9
+average_packet_latency = 274.478196
+average_packet_queueing_latency = 50.016057
+average_packet_network_latency = 224.462139
+average_hops = 2.501647
+reception_rate = .89916
+throughput = 14.38662
+injectionrate = 1
+average_packet_latency = 282.044103
+average_packet_queueing_latency = 50.167220
+average_packet_network_latency = 231.876883
+average_hops = 2.500816
+reception_rate = .99896
+throughput = 15.98344
diff --git a/results/Mesh_XY/results_Mesh_XY_algo_1_uniform_random_N=6_dog.txt b/results/Mesh_XY/results_Mesh_XY_algo_1_uniform_random_N=6_dog.txt
new file mode 100644
index 0000000000..d3123eeefd
--- /dev/null
+++ b/results/Mesh_XY/results_Mesh_XY_algo_1_uniform_random_N=6_dog.txt
@@ -0,0 +1,43 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 377.085265
+average_packet_queueing_latency = 50
+average_packet_network_latency = 327.085265
+average_hops = 4.979766
+reception_rate = .00988
+throughput = .35583
+injectionrate = 0.1
+average_packet_latency = 201787.996399
+average_packet_queueing_latency = 199000.031748
+average_packet_network_latency = 2787.964651
+average_hops = 3.997747
+reception_rate = .07174
+throughput = 2.58285
+injectionrate = 0.2
+average_packet_latency = 369958.468064
+average_packet_queueing_latency = 366493.314695
+average_packet_network_latency = 3465.153369
+average_hops = 3.105909
+reception_rate = .08810
+throughput = 3.17177
+injectionrate = 0.3
+average_packet_latency = 434555.316479
+average_packet_queueing_latency = 431472.068095
+average_packet_network_latency = 3083.248383
+average_hops = 2.742424
+reception_rate = .10463
+throughput = 3.76692
+injectionrate = 0.4
+average_packet_latency = 477103.943445
+average_packet_queueing_latency = 474189.101941
+average_packet_network_latency = 2914.841503
+average_hops = 2.594687
+reception_rate = .12006
+throughput = 4.32249
+injectionrate = 0.5
+average_packet_latency = 675703.970201
+average_packet_queueing_latency = 672796.838372
+average_packet_network_latency = 2907.131830
+average_hops = 2.321302
+reception_rate = .12261
+throughput = 4.41426
diff --git a/results/Mesh_XY/results_Mesh_XY_algo_1_uniform_random_N=6_horse.txt b/results/Mesh_XY/results_Mesh_XY_algo_1_uniform_random_N=6_horse.txt
new file mode 100644
index 0000000000..aba4fb5fe2
--- /dev/null
+++ b/results/Mesh_XY/results_Mesh_XY_algo_1_uniform_random_N=6_horse.txt
@@ -0,0 +1,71 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 344.365445
+average_packet_queueing_latency = 50
+average_packet_network_latency = 294.365445
+average_hops = 4.370363
+reception_rate = .00988
+throughput = .35584
+injectionrate = 0.1
+average_packet_latency = 358.638301
+average_packet_queueing_latency = 50
+average_packet_network_latency = 308.638301
+average_hops = 4.380775
+reception_rate = .09979
+throughput = 3.59246
+injectionrate = 0.11
+average_packet_latency = 363.353380
+average_packet_queueing_latency = 50
+average_packet_network_latency = 313.353380
+average_hops = 4.373592
+reception_rate = .10983
+throughput = 3.95413
+injectionrate = 0.12
+average_packet_latency = 372.949017
+average_packet_queueing_latency = 50
+average_packet_network_latency = 322.949017
+average_hops = 4.378032
+reception_rate = .11978
+throughput = 4.31220
+injectionrate = 0.13
+average_packet_latency = 398.461433
+average_packet_queueing_latency = 50.146844
+average_packet_network_latency = 348.314589
+average_hops = 4.376492
+reception_rate = .12972
+throughput = 4.66993
+injectionrate = 0.14
+average_packet_latency = 656.321024
+average_packet_queueing_latency = 147.674250
+average_packet_network_latency = 508.646774
+average_hops = 4.373470
+reception_rate = .13969
+throughput = 5.02913
+injectionrate = 0.15
+average_packet_latency = 56042.745274
+average_packet_queueing_latency = 55085.245680
+average_packet_network_latency = 957.499594
+average_hops = 4.284795
+reception_rate = .14384
+throughput = 5.17828
+injectionrate = 0.17
+average_packet_latency = 107785.946358
+average_packet_queueing_latency = 106691.020235
+average_packet_network_latency = 1094.926123
+average_hops = 4.115221
+reception_rate = .14729
+throughput = 5.30270
+injectionrate = 0.2
+average_packet_latency = 174512.677816
+average_packet_queueing_latency = 173132.428492
+average_packet_network_latency = 1380.249324
+average_hops = 3.971827
+reception_rate = .15289
+throughput = 5.50428
+injectionrate = 0.3
+average_packet_latency = 291215.817946
+average_packet_queueing_latency = 289589.426156
+average_packet_network_latency = 1626.391790
+average_hops = 3.723890
+reception_rate = .17061
+throughput = 6.14209
diff --git a/results/Mesh_XY/results_Mesh_XY_algo_1_uniform_random_N=8_dog.txt b/results/Mesh_XY/results_Mesh_XY_algo_1_uniform_random_N=8_dog.txt
new file mode 100644
index 0000000000..d4d7927fbb
--- /dev/null
+++ b/results/Mesh_XY/results_Mesh_XY_algo_1_uniform_random_N=8_dog.txt
@@ -0,0 +1,64 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 480.919306
+average_packet_queueing_latency = 50
+average_packet_network_latency = 430.919306
+average_hops = 6.985096
+reception_rate = .00994
+throughput = .63673
+injectionrate = 0.02
+average_packet_latency = 492.777241
+average_packet_queueing_latency = 50
+average_packet_network_latency = 442.777241
+average_hops = 6.994237
+reception_rate = .02003
+throughput = 1.28237
+injectionrate = 0.03
+average_packet_latency = 536.911860
+average_packet_queueing_latency = 50
+average_packet_network_latency = 486.911860
+average_hops = 7.001495
+reception_rate = .03000
+throughput = 1.92025
+injectionrate = 0.04
+average_packet_latency = 64086.695764
+average_packet_queueing_latency = 61177.938269
+average_packet_network_latency = 2908.757494
+average_hops = 6.452963
+reception_rate = .03612
+throughput = 2.31182
+injectionrate = 0.05
+average_packet_latency = 114445.048558
+average_packet_queueing_latency = 110043.959082
+average_packet_network_latency = 4401.089476
+average_hops = 5.763405
+reception_rate = .03734
+throughput = 2.38991
+injectionrate = 0.06
+average_packet_latency = 153459.649662
+average_packet_queueing_latency = 148333.089584
+average_packet_network_latency = 5126.560078
+average_hops = 5.314844
+reception_rate = .03850
+throughput = 2.46462
+injectionrate = 0.07
+average_packet_latency = 186091.423023
+average_packet_queueing_latency = 180337.674805
+average_packet_network_latency = 5753.748218
+average_hops = 4.984076
+reception_rate = .03978
+throughput = 2.54641
+injectionrate = 0.08
+average_packet_latency = 197523.374655
+average_packet_queueing_latency = 191783.613185
+average_packet_network_latency = 5739.761470
+average_hops = 4.728776
+reception_rate = .04097
+throughput = 2.62252
+injectionrate = 0.1
+average_packet_latency = 252990.439842
+average_packet_queueing_latency = 246961.202285
+average_packet_network_latency = 6029.237556
+average_hops = 4.355069
+reception_rate = .04346
+throughput = 2.78191
diff --git a/results/Mesh_XY/results_Mesh_XY_algo_1_uniform_random_N=8_horse.txt b/results/Mesh_XY/results_Mesh_XY_algo_1_uniform_random_N=8_horse.txt
new file mode 100644
index 0000000000..156ebe61b4
--- /dev/null
+++ b/results/Mesh_XY/results_Mesh_XY_algo_1_uniform_random_N=8_horse.txt
@@ -0,0 +1,106 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 388.470176
+average_packet_queueing_latency = 50
+average_packet_network_latency = 338.470176
+average_hops = 5.260467
+reception_rate = .00994
+throughput = .63674
+injectionrate = 0.1
+average_packet_latency = 392.292219
+average_packet_queueing_latency = 50
+average_packet_network_latency = 342.292219
+average_hops = 5.256516
+reception_rate = .09983
+throughput = 6.38942
+injectionrate = 0.2
+average_packet_latency = 396.810161
+average_packet_queueing_latency = 50
+average_packet_network_latency = 346.810161
+average_hops = 5.254509
+reception_rate = .19975
+throughput = 12.78458
+injectionrate = 0.3
+average_packet_latency = 402.162377
+average_packet_queueing_latency = 50
+average_packet_network_latency = 352.162377
+average_hops = 5.249078
+reception_rate = .29986
+throughput = 19.19161
+injectionrate = 0.4
+average_packet_latency = 410.111019
+average_packet_queueing_latency = 50.000020
+average_packet_network_latency = 360.110999
+average_hops = 5.250777
+reception_rate = .39989
+throughput = 25.59302
+injectionrate = 0.5
+average_packet_latency = 422.892835
+average_packet_queueing_latency = 50.002416
+average_packet_network_latency = 372.890420
+average_hops = 5.248399
+reception_rate = .49968
+throughput = 31.97982
+injectionrate = 0.6
+average_packet_latency = 457.379855
+average_packet_queueing_latency = 51.440804
+average_packet_network_latency = 405.939051
+average_hops = 5.249529
+reception_rate = .59941
+throughput = 38.36278
+injectionrate = 0.61
+average_packet_latency = 464.730645
+average_packet_queueing_latency = 52.290219
+average_packet_network_latency = 412.440427
+average_hops = 5.250340
+reception_rate = .60941
+throughput = 39.00228
+injectionrate = 0.62
+average_packet_latency = 477.949938
+average_packet_queueing_latency = 55.857821
+average_packet_network_latency = 422.092117
+average_hops = 5.248549
+reception_rate = .61934
+throughput = 39.63803
+injectionrate = 0.63
+average_packet_latency = 501.970955
+average_packet_queueing_latency = 67.107471
+average_packet_network_latency = 434.863485
+average_hops = 5.250019
+reception_rate = .62932
+throughput = 40.27679
+injectionrate = 0.64
+average_packet_latency = 533.591027
+average_packet_queueing_latency = 82.413087
+average_packet_network_latency = 451.177940
+average_hops = 5.250728
+reception_rate = .63934
+throughput = 40.91804
+injectionrate = 0.65
+average_packet_latency = 596.402424
+average_packet_queueing_latency = 123.886547
+average_packet_network_latency = 472.515877
+average_hops = 5.249373
+reception_rate = .64930
+throughput = 41.55541
+injectionrate = 0.66
+average_packet_latency = 1064.834162
+average_packet_queueing_latency = 553.114976
+average_packet_network_latency = 511.719186
+average_hops = 5.249818
+reception_rate = .65917
+throughput = 42.18708
+injectionrate = 0.67
+average_packet_latency = 12382.070130
+average_packet_queueing_latency = 11837.197521
+average_packet_network_latency = 544.872608
+average_hops = 5.247527
+reception_rate = .66609
+throughput = 42.63030
+injectionrate = 0.7
+average_packet_latency = 77663.072683
+average_packet_queueing_latency = 77059.620067
+average_packet_network_latency = 603.452616
+average_hops = 5.219558
+reception_rate = .67528
+throughput = 43.21810
diff --git a/results/Ring/results_Ring_algo_3_neighbor_N=4_horse.txt b/results/Ring/results_Ring_algo_3_neighbor_N=4_horse.txt
new file mode 100644
index 0000000000..1a22b3026e
--- /dev/null
+++ b/results/Ring/results_Ring_algo_3_neighbor_N=4_horse.txt
@@ -0,0 +1,78 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 200.142531
+average_packet_queueing_latency = 50
+average_packet_network_latency = 150.142531
+average_hops = 1.502851
+reception_rate = .00986
+throughput = .15786
+injectionrate = 0.1
+average_packet_latency = 200.068159
+average_packet_queueing_latency = 50
+average_packet_network_latency = 150.068159
+average_hops = 1.501363
+reception_rate = .09995
+throughput = 1.59920
+injectionrate = 0.2
+average_packet_latency = 200.038448
+average_packet_queueing_latency = 50
+average_packet_network_latency = 150.038448
+average_hops = 1.500769
+reception_rate = .19994
+throughput = 3.19912
+injectionrate = 0.3
+average_packet_latency = 200.062431
+average_packet_queueing_latency = 50
+average_packet_network_latency = 150.062431
+average_hops = 1.501249
+reception_rate = .30008
+throughput = 4.80133
+injectionrate = 0.4
+average_packet_latency = 200.051593
+average_packet_queueing_latency = 50
+average_packet_network_latency = 150.051593
+average_hops = 1.501032
+reception_rate = .39976
+throughput = 6.39620
+injectionrate = 0.5
+average_packet_latency = 200.009660
+average_packet_queueing_latency = 50
+average_packet_network_latency = 150.009660
+average_hops = 1.500193
+reception_rate = .49981
+throughput = 7.99711
+injectionrate = 0.6
+average_packet_latency = 200.012347
+average_packet_queueing_latency = 50
+average_packet_network_latency = 150.012347
+average_hops = 1.500247
+reception_rate = .59982
+throughput = 9.59714
+injectionrate = 0.7
+average_packet_latency = 200.000781
+average_packet_queueing_latency = 50
+average_packet_network_latency = 150.000781
+average_hops = 1.500016
+reception_rate = .69979
+throughput = 11.19669
+injectionrate = 0.8
+average_packet_latency = 199.997381
+average_packet_queueing_latency = 50
+average_packet_network_latency = 149.997381
+average_hops = 1.499948
+reception_rate = .79955
+throughput = 12.79290
+injectionrate = 0.9
+average_packet_latency = 200.001599
+average_packet_queueing_latency = 50
+average_packet_network_latency = 150.001599
+average_hops = 1.500032
+reception_rate = .89908
+throughput = 14.38540
+injectionrate = 1
+average_packet_latency = 200.000360
+average_packet_queueing_latency = 50
+average_packet_network_latency = 150.000360
+average_hops = 1.500007
+reception_rate = .99896
+throughput = 15.98337
diff --git a/results/Ring/results_Ring_algo_3_neighbor_N=6_horse.txt b/results/Ring/results_Ring_algo_3_neighbor_N=6_horse.txt
new file mode 100644
index 0000000000..6faa0b874e
--- /dev/null
+++ b/results/Ring/results_Ring_algo_3_neighbor_N=6_horse.txt
@@ -0,0 +1,71 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 226.801758
+average_packet_queueing_latency = 50
+average_packet_network_latency = 176.801758
+average_hops = 2.034168
+reception_rate = .00989
+throughput = .35618
+injectionrate = 0.1
+average_packet_latency = 227.784052
+average_packet_queueing_latency = 50
+average_packet_network_latency = 177.784052
+average_hops = 2.035973
+reception_rate = .09985
+throughput = 3.59467
+injectionrate = 0.2
+average_packet_latency = 228.790920
+average_packet_queueing_latency = 50
+average_packet_network_latency = 178.790920
+average_hops = 2.032397
+reception_rate = .19982
+throughput = 7.19357
+injectionrate = 0.3
+average_packet_latency = 231.189428
+average_packet_queueing_latency = 50
+average_packet_network_latency = 181.189428
+average_hops = 2.030128
+reception_rate = .29983
+throughput = 10.79389
+injectionrate = 0.4
+average_packet_latency = 306.336919
+average_packet_queueing_latency = 89.564494
+average_packet_network_latency = 216.772425
+average_hops = 2.029079
+reception_rate = .39973
+throughput = 14.39051
+injectionrate = 0.41
+average_packet_latency = 3904.068959
+average_packet_queueing_latency = 3671.362486
+average_packet_network_latency = 232.706473
+average_hops = 2.024269
+reception_rate = .40908
+throughput = 14.72723
+injectionrate = 0.42
+average_packet_latency = 11499.239800
+average_packet_queueing_latency = 11266.738352
+average_packet_network_latency = 232.501448
+average_hops = 2.013881
+reception_rate = .41762
+throughput = 15.03453
+injectionrate = 0.43
+average_packet_latency = 18129.757415
+average_packet_queueing_latency = 17897.249111
+average_packet_network_latency = 232.508304
+average_hops = 2.003449
+reception_rate = .42608
+throughput = 15.33895
+injectionrate = 0.44
+average_packet_latency = 23641.486150
+average_packet_queueing_latency = 23408.878032
+average_packet_network_latency = 232.608118
+average_hops = 1.993342
+reception_rate = .43455
+throughput = 15.64398
+injectionrate = 0.5
+average_packet_latency = 38304.092011
+average_packet_queueing_latency = 38068.016819
+average_packet_network_latency = 236.075192
+average_hops = 1.936754
+reception_rate = .48479
+throughput = 17.45279
diff --git a/results/Ring/results_Ring_algo_3_neighbor_N=8_horse.txt b/results/Ring/results_Ring_algo_3_neighbor_N=8_horse.txt
new file mode 100644
index 0000000000..f397c16291
--- /dev/null
+++ b/results/Ring/results_Ring_algo_3_neighbor_N=8_horse.txt
@@ -0,0 +1,64 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 908.568130
+average_packet_queueing_latency = 50
+average_packet_network_latency = 858.568130
+average_hops = 15.631031
+reception_rate = .00994
+throughput = .63672
+injectionrate = 0.03
+average_packet_latency = 913.201113
+average_packet_queueing_latency = 50
+average_packet_network_latency = 863.201113
+average_hops = 15.626899
+reception_rate = .03002
+throughput = 1.92141
+injectionrate = 0.05
+average_packet_latency = 921.734005
+average_packet_queueing_latency = 50
+average_packet_network_latency = 871.734005
+average_hops = 15.611331
+reception_rate = .05003
+throughput = 3.20247
+injectionrate = 0.07
+average_packet_latency = 1030.565423
+average_packet_queueing_latency = 50.000223
+average_packet_network_latency = 980.565200
+average_hops = 15.607394
+reception_rate = .06993
+throughput = 4.47594
+injectionrate = 0.08
+average_packet_latency = 31133.159183
+average_packet_queueing_latency = 29317.889915
+average_packet_network_latency = 1815.269268
+average_hops = 14.910839
+reception_rate = .07635
+throughput = 4.88658
+injectionrate = 0.09
+average_packet_latency = 31771.007953
+average_packet_queueing_latency = 29881.658113
+average_packet_network_latency = 1889.349840
+average_hops = 14.060147
+reception_rate = .08168
+throughput = 5.22802
+injectionrate = 0.1
+average_packet_latency = 33048.843906
+average_packet_queueing_latency = 31163.891951
+average_packet_network_latency = 1884.951955
+average_hops = 13.361637
+reception_rate = .08717
+throughput = 5.57913
+injectionrate = 0.11
+average_packet_latency = 32475.088381
+average_packet_queueing_latency = 30677.661683
+average_packet_network_latency = 1797.426699
+average_hops = 12.760963
+reception_rate = .09268
+throughput = 5.93168
+injectionrate = 0.12
+average_packet_latency = 36791.534530
+average_packet_queueing_latency = 35103.711961
+average_packet_network_latency = 1687.822568
+average_hops = 12.237608
+reception_rate = .09823
+throughput = 6.28704
diff --git a/results/Ring/results_Ring_algo_3_shuffle_N=4_horse.txt b/results/Ring/results_Ring_algo_3_shuffle_N=4_horse.txt
new file mode 100644
index 0000000000..7202d2b71a
--- /dev/null
+++ b/results/Ring/results_Ring_algo_3_shuffle_N=4_horse.txt
@@ -0,0 +1,106 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 300.839404
+average_packet_queueing_latency = 50
+average_packet_network_latency = 250.839404
+average_hops = 3.510675
+reception_rate = .00986
+throughput = .15785
+injectionrate = 0.1
+average_packet_latency = 302.594298
+average_packet_queueing_latency = 50
+average_packet_network_latency = 252.594298
+average_hops = 3.495810
+reception_rate = .09994
+throughput = 1.59918
+injectionrate = 0.2
+average_packet_latency = 306.027864
+average_packet_queueing_latency = 50
+average_packet_network_latency = 256.027864
+average_hops = 3.497709
+reception_rate = .19994
+throughput = 3.19906
+injectionrate = 0.3
+average_packet_latency = 311.075570
+average_packet_queueing_latency = 50
+average_packet_network_latency = 261.075570
+average_hops = 3.501033
+reception_rate = .30007
+throughput = 4.80122
+injectionrate = 0.4
+average_packet_latency = 325.276654
+average_packet_queueing_latency = 50.101351
+average_packet_network_latency = 275.175303
+average_hops = 3.501174
+reception_rate = .39975
+throughput = 6.39608
+injectionrate = 0.41
+average_packet_latency = 328.888124
+average_packet_queueing_latency = 50.212583
+average_packet_network_latency = 278.675541
+average_hops = 3.501256
+reception_rate = .40969
+throughput = 6.55509
+injectionrate = 0.42
+average_packet_latency = 333.806389
+average_packet_queueing_latency = 50.492936
+average_packet_network_latency = 283.313454
+average_hops = 3.501245
+reception_rate = .41971
+throughput = 6.71538
+injectionrate = 0.43
+average_packet_latency = 340.690871
+average_packet_queueing_latency = 51.197013
+average_packet_network_latency = 289.493858
+average_hops = 3.500880
+reception_rate = .42982
+throughput = 6.87712
+injectionrate = 0.44
+average_packet_latency = 350.830712
+average_packet_queueing_latency = 52.735843
+average_packet_network_latency = 298.094869
+average_hops = 3.500849
+reception_rate = .43975
+throughput = 7.03613
+injectionrate = 0.45
+average_packet_latency = 368.028121
+average_packet_queueing_latency = 56.980739
+average_packet_network_latency = 311.047382
+average_hops = 3.500732
+reception_rate = .44971
+throughput = 7.19537
+injectionrate = 0.46
+average_packet_latency = 400.894838
+average_packet_queueing_latency = 69.026132
+average_packet_network_latency = 331.868706
+average_hops = 3.501181
+reception_rate = .45975
+throughput = 7.35608
+injectionrate = 0.47
+average_packet_latency = 475.907880
+average_packet_queueing_latency = 110.223913
+average_packet_network_latency = 365.683967
+average_hops = 3.501167
+reception_rate = .46974
+throughput = 7.51586
+injectionrate = 0.48
+average_packet_latency = 857.072424
+average_packet_queueing_latency = 426.194397
+average_packet_network_latency = 430.878027
+average_hops = 3.501582
+reception_rate = .47977
+throughput = 7.67647
+injectionrate = 0.49
+average_packet_latency = 33469.324316
+average_packet_queueing_latency = 32981.086432
+average_packet_network_latency = 488.237884
+average_hops = 3.509445
+reception_rate = .48307
+throughput = 7.72920
+injectionrate = 0.5
+average_packet_latency = 86720.847715
+average_packet_queueing_latency = 86222.336526
+average_packet_network_latency = 498.511188
+average_hops = 3.521818
+reception_rate = .48130
+throughput = 7.70094
diff --git a/results/Ring/results_Ring_algo_3_shuffle_N=6_horse.txt b/results/Ring/results_Ring_algo_3_shuffle_N=6_horse.txt
new file mode 100644
index 0000000000..0c2114b12e
--- /dev/null
+++ b/results/Ring/results_Ring_algo_3_shuffle_N=6_horse.txt
@@ -0,0 +1,57 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 494.809917
+average_packet_queueing_latency = 50
+average_packet_network_latency = 444.809917
+average_hops = 7.380054
+reception_rate = .00989
+throughput = .35616
+injectionrate = 0.05
+average_packet_latency = 497.499736
+average_packet_queueing_latency = 50
+average_packet_network_latency = 447.499736
+average_hops = 7.365062
+reception_rate = .04996
+throughput = 1.79871
+injectionrate = 0.1
+average_packet_latency = 503.382070
+average_packet_queueing_latency = 50
+average_packet_network_latency = 453.382070
+average_hops = 7.379447
+reception_rate = .09984
+throughput = 3.59447
+injectionrate = 0.15
+average_packet_latency = 512.170880
+average_packet_queueing_latency = 50
+average_packet_network_latency = 462.170880
+average_hops = 7.388506
+reception_rate = .14975
+throughput = 5.39127
+injectionrate = 0.2
+average_packet_latency = 546.113332
+average_packet_queueing_latency = 52.531704
+average_packet_network_latency = 493.581629
+average_hops = 7.385707
+reception_rate = .19981
+throughput = 7.19318
+injectionrate = 0.21
+average_packet_latency = 695.258537
+average_packet_queueing_latency = 142.825570
+average_packet_network_latency = 552.432966
+average_hops = 7.386259
+reception_rate = .20983
+throughput = 7.55405
+injectionrate = 0.22
+average_packet_latency = 4206.443588
+average_packet_queueing_latency = 3419.594863
+average_packet_network_latency = 786.848725
+average_hops = 7.385408
+reception_rate = .21979
+throughput = 7.91275
+injectionrate = 0.23
+average_packet_latency = 169770.332233
+average_packet_queueing_latency = 168203.703526
+average_packet_network_latency = 1566.628707
+average_hops = 8.222106
+reception_rate = .17904
+throughput = 6.44548
diff --git a/results/Ring/results_Ring_algo_3_shuffle_N=8_horse.txt b/results/Ring/results_Ring_algo_3_shuffle_N=8_horse.txt
new file mode 100644
index 0000000000..2b3ee79cb3
--- /dev/null
+++ b/results/Ring/results_Ring_algo_3_shuffle_N=8_horse.txt
@@ -0,0 +1,78 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 914.882289
+average_packet_queueing_latency = 50
+average_packet_network_latency = 864.882289
+average_hops = 15.743847
+reception_rate = .00994
+throughput = .63673
+injectionrate = 0.03
+average_packet_latency = 921.171762
+average_packet_queueing_latency = 50
+average_packet_network_latency = 871.171762
+average_hops = 15.747603
+reception_rate = .03002
+throughput = 1.92138
+injectionrate = 0.05
+average_packet_latency = 929.120531
+average_packet_queueing_latency = 50
+average_packet_network_latency = 879.120531
+average_hops = 15.737305
+reception_rate = .05003
+throughput = 3.20250
+injectionrate = 0.07
+average_packet_latency = 945.231907
+average_packet_queueing_latency = 50
+average_packet_network_latency = 895.231907
+average_hops = 15.740158
+reception_rate = .06994
+throughput = 4.47637
+injectionrate = 0.08
+average_packet_latency = 963.008885
+average_packet_queueing_latency = 50
+average_packet_network_latency = 913.008885
+average_hops = 15.749159
+reception_rate = .07990
+throughput = 5.11412
+injectionrate = 0.09
+average_packet_latency = 1014.868429
+average_packet_queueing_latency = 50.085218
+average_packet_network_latency = 964.783211
+average_hops = 15.742230
+reception_rate = .08993
+throughput = 5.75582
+injectionrate = 0.1
+average_packet_latency = 53412.341662
+average_packet_queueing_latency = 51317.501050
+average_packet_network_latency = 2094.840612
+average_hops = 15.595599
+reception_rate = .09334
+throughput = 5.97377
+injectionrate = 0.11
+average_packet_latency = 72734.269913
+average_packet_queueing_latency = 70047.570405
+average_packet_network_latency = 2686.699508
+average_hops = 14.802384
+reception_rate = .08759
+throughput = 5.60577
+injectionrate = 0.12
+average_packet_latency = 78931.140575
+average_packet_queueing_latency = 76122.132294
+average_packet_network_latency = 2809.008281
+average_hops = 14.146140
+reception_rate = .08871
+throughput = 5.67797
+injectionrate = 0.13
+average_packet_latency = 84316.715447
+average_packet_queueing_latency = 81506.523670
+average_packet_network_latency = 2810.191778
+average_hops = 13.509151
+reception_rate = .09070
+throughput = 5.80490
+injectionrate = 0.14
+average_packet_latency = 87356.053164
+average_packet_queueing_latency = 84627.064392
+average_packet_network_latency = 2728.988772
+average_hops = 12.859716
+reception_rate = .09290
+throughput = 5.94594
diff --git a/results/Ring/results_Ring_algo_3_tornado_N=4_horse.txt b/results/Ring/results_Ring_algo_3_tornado_N=4_horse.txt
new file mode 100644
index 0000000000..1a22b3026e
--- /dev/null
+++ b/results/Ring/results_Ring_algo_3_tornado_N=4_horse.txt
@@ -0,0 +1,78 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 200.142531
+average_packet_queueing_latency = 50
+average_packet_network_latency = 150.142531
+average_hops = 1.502851
+reception_rate = .00986
+throughput = .15786
+injectionrate = 0.1
+average_packet_latency = 200.068159
+average_packet_queueing_latency = 50
+average_packet_network_latency = 150.068159
+average_hops = 1.501363
+reception_rate = .09995
+throughput = 1.59920
+injectionrate = 0.2
+average_packet_latency = 200.038448
+average_packet_queueing_latency = 50
+average_packet_network_latency = 150.038448
+average_hops = 1.500769
+reception_rate = .19994
+throughput = 3.19912
+injectionrate = 0.3
+average_packet_latency = 200.062431
+average_packet_queueing_latency = 50
+average_packet_network_latency = 150.062431
+average_hops = 1.501249
+reception_rate = .30008
+throughput = 4.80133
+injectionrate = 0.4
+average_packet_latency = 200.051593
+average_packet_queueing_latency = 50
+average_packet_network_latency = 150.051593
+average_hops = 1.501032
+reception_rate = .39976
+throughput = 6.39620
+injectionrate = 0.5
+average_packet_latency = 200.009660
+average_packet_queueing_latency = 50
+average_packet_network_latency = 150.009660
+average_hops = 1.500193
+reception_rate = .49981
+throughput = 7.99711
+injectionrate = 0.6
+average_packet_latency = 200.012347
+average_packet_queueing_latency = 50
+average_packet_network_latency = 150.012347
+average_hops = 1.500247
+reception_rate = .59982
+throughput = 9.59714
+injectionrate = 0.7
+average_packet_latency = 200.000781
+average_packet_queueing_latency = 50
+average_packet_network_latency = 150.000781
+average_hops = 1.500016
+reception_rate = .69979
+throughput = 11.19669
+injectionrate = 0.8
+average_packet_latency = 199.997381
+average_packet_queueing_latency = 50
+average_packet_network_latency = 149.997381
+average_hops = 1.499948
+reception_rate = .79955
+throughput = 12.79290
+injectionrate = 0.9
+average_packet_latency = 200.001599
+average_packet_queueing_latency = 50
+average_packet_network_latency = 150.001599
+average_hops = 1.500032
+reception_rate = .89908
+throughput = 14.38540
+injectionrate = 1
+average_packet_latency = 200.000360
+average_packet_queueing_latency = 50
+average_packet_network_latency = 150.000360
+average_hops = 1.500007
+reception_rate = .99896
+throughput = 15.98337
diff --git a/results/Ring/results_Ring_algo_3_tornado_N=6_horse.txt b/results/Ring/results_Ring_algo_3_tornado_N=6_horse.txt
new file mode 100644
index 0000000000..bb64f5f6c3
--- /dev/null
+++ b/results/Ring/results_Ring_algo_3_tornado_N=6_horse.txt
@@ -0,0 +1,57 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 226.801758
+average_packet_queueing_latency = 50
+average_packet_network_latency = 176.801758
+average_hops = 2.034168
+reception_rate = .00989
+throughput = .35618
+injectionrate = 0.1
+average_packet_latency = 227.784052
+average_packet_queueing_latency = 50
+average_packet_network_latency = 177.784052
+average_hops = 2.035973
+reception_rate = .09985
+throughput = 3.59467
+injectionrate = 0.2
+average_packet_latency = 228.790920
+average_packet_queueing_latency = 50
+average_packet_network_latency = 178.790920
+average_hops = 2.032397
+reception_rate = .19982
+throughput = 7.19357
+injectionrate = 0.3
+average_packet_latency = 231.189428
+average_packet_queueing_latency = 50
+average_packet_network_latency = 181.189428
+average_hops = 2.030128
+reception_rate = .29983
+throughput = 10.79389
+injectionrate = 0.4
+average_packet_latency = 306.336919
+average_packet_queueing_latency = 89.564494
+average_packet_network_latency = 216.772425
+average_hops = 2.029079
+reception_rate = .39973
+throughput = 14.39051
+injectionrate = 0.41
+average_packet_latency = 3904.068959
+average_packet_queueing_latency = 3671.362486
+average_packet_network_latency = 232.706473
+average_hops = 2.024269
+reception_rate = .40908
+throughput = 14.72723
+injectionrate = 0.42
+average_packet_latency = 11499.239800
+average_packet_queueing_latency = 11266.738352
+average_packet_network_latency = 232.501448
+average_hops = 2.013881
+reception_rate = .41762
+throughput = 15.03453
+injectionrate = 0.5
+average_packet_latency = 38304.092011
+average_packet_queueing_latency = 38068.016819
+average_packet_network_latency = 236.075192
+average_hops = 1.936754
+reception_rate = .48479
+throughput = 17.45279
diff --git a/results/Ring/results_Ring_algo_3_tornado_N=8_horse.txt b/results/Ring/results_Ring_algo_3_tornado_N=8_horse.txt
new file mode 100644
index 0000000000..f397c16291
--- /dev/null
+++ b/results/Ring/results_Ring_algo_3_tornado_N=8_horse.txt
@@ -0,0 +1,64 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 908.568130
+average_packet_queueing_latency = 50
+average_packet_network_latency = 858.568130
+average_hops = 15.631031
+reception_rate = .00994
+throughput = .63672
+injectionrate = 0.03
+average_packet_latency = 913.201113
+average_packet_queueing_latency = 50
+average_packet_network_latency = 863.201113
+average_hops = 15.626899
+reception_rate = .03002
+throughput = 1.92141
+injectionrate = 0.05
+average_packet_latency = 921.734005
+average_packet_queueing_latency = 50
+average_packet_network_latency = 871.734005
+average_hops = 15.611331
+reception_rate = .05003
+throughput = 3.20247
+injectionrate = 0.07
+average_packet_latency = 1030.565423
+average_packet_queueing_latency = 50.000223
+average_packet_network_latency = 980.565200
+average_hops = 15.607394
+reception_rate = .06993
+throughput = 4.47594
+injectionrate = 0.08
+average_packet_latency = 31133.159183
+average_packet_queueing_latency = 29317.889915
+average_packet_network_latency = 1815.269268
+average_hops = 14.910839
+reception_rate = .07635
+throughput = 4.88658
+injectionrate = 0.09
+average_packet_latency = 31771.007953
+average_packet_queueing_latency = 29881.658113
+average_packet_network_latency = 1889.349840
+average_hops = 14.060147
+reception_rate = .08168
+throughput = 5.22802
+injectionrate = 0.1
+average_packet_latency = 33048.843906
+average_packet_queueing_latency = 31163.891951
+average_packet_network_latency = 1884.951955
+average_hops = 13.361637
+reception_rate = .08717
+throughput = 5.57913
+injectionrate = 0.11
+average_packet_latency = 32475.088381
+average_packet_queueing_latency = 30677.661683
+average_packet_network_latency = 1797.426699
+average_hops = 12.760963
+reception_rate = .09268
+throughput = 5.93168
+injectionrate = 0.12
+average_packet_latency = 36791.534530
+average_packet_queueing_latency = 35103.711961
+average_packet_network_latency = 1687.822568
+average_hops = 12.237608
+reception_rate = .09823
+throughput = 6.28704
diff --git a/results/Ring/results_Ring_algo_3_transpose_N=4_horse.txt b/results/Ring/results_Ring_algo_3_transpose_N=4_horse.txt
new file mode 100644
index 0000000000..ab27926b0c
--- /dev/null
+++ b/results/Ring/results_Ring_algo_3_transpose_N=4_horse.txt
@@ -0,0 +1,57 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 300.475135
+average_packet_queueing_latency = 50
+average_packet_network_latency = 250.475135
+average_hops = 3.503959
+reception_rate = .00986
+throughput = .15785
+injectionrate = 0.1
+average_packet_latency = 302.996104
+average_packet_queueing_latency = 50
+average_packet_network_latency = 252.996104
+average_hops = 3.505553
+reception_rate = .09994
+throughput = 1.59916
+injectionrate = 0.2
+average_packet_latency = 305.195012
+average_packet_queueing_latency = 50
+average_packet_network_latency = 255.195012
+average_hops = 3.494612
+reception_rate = .19993
+throughput = 3.19903
+injectionrate = 0.3
+average_packet_latency = 308.658028
+average_packet_queueing_latency = 50
+average_packet_network_latency = 258.658028
+average_hops = 3.498879
+reception_rate = .30007
+throughput = 4.80118
+injectionrate = 0.4
+average_packet_latency = 313.014187
+average_packet_queueing_latency = 50.000117
+average_packet_network_latency = 263.014070
+average_hops = 3.497364
+reception_rate = .39975
+throughput = 6.39602
+injectionrate = 0.5
+average_packet_latency = 321.453702
+average_packet_queueing_latency = 50.009973
+average_packet_network_latency = 271.443729
+average_hops = 3.498254
+reception_rate = .49980
+throughput = 7.99693
+injectionrate = 0.6
+average_packet_latency = 351.025456
+average_packet_queueing_latency = 51.330709
+average_packet_network_latency = 299.694747
+average_hops = 3.500511
+reception_rate = .59980
+throughput = 9.59695
+injectionrate = 0.605
+average_packet_latency = 348.917042
+average_packet_queueing_latency = 51.831164
+average_packet_network_latency = 297.085878
+average_hops = 3.400298
+reception_rate = .55708
+throughput = 8.91332
diff --git a/results/Ring/results_Ring_algo_3_transpose_N=6_horse.txt b/results/Ring/results_Ring_algo_3_transpose_N=6_horse.txt
new file mode 100644
index 0000000000..6e92c8ffbb
--- /dev/null
+++ b/results/Ring/results_Ring_algo_3_transpose_N=6_horse.txt
@@ -0,0 +1,57 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 527.582407
+average_packet_queueing_latency = 50
+average_packet_network_latency = 477.582407
+average_hops = 8.033019
+reception_rate = .00989
+throughput = .35616
+injectionrate = 0.05
+average_packet_latency = 529.966448
+average_packet_queueing_latency = 50
+average_packet_network_latency = 479.966448
+average_hops = 8.003780
+reception_rate = .04996
+throughput = 1.79872
+injectionrate = 0.1
+average_packet_latency = 535.892048
+average_packet_queueing_latency = 50
+average_packet_network_latency = 485.892048
+average_hops = 8.004551
+reception_rate = .09984
+throughput = 3.59448
+injectionrate = 0.15
+average_packet_latency = 545.191198
+average_packet_queueing_latency = 50
+average_packet_network_latency = 495.191198
+average_hops = 7.998197
+reception_rate = .14975
+throughput = 5.39126
+injectionrate = 0.2
+average_packet_latency = 575.295976
+average_packet_queueing_latency = 50.099365
+average_packet_network_latency = 525.196611
+average_hops = 7.997386
+reception_rate = .19980
+throughput = 7.19315
+injectionrate = 0.21
+average_packet_latency = 608.171399
+average_packet_queueing_latency = 55.452563
+average_packet_network_latency = 552.718835
+average_hops = 7.994890
+reception_rate = .20983
+throughput = 7.55397
+injectionrate = 0.22
+average_packet_latency = 979.486391
+average_packet_queueing_latency = 317.429357
+average_packet_network_latency = 662.057034
+average_hops = 7.993624
+reception_rate = .21973
+throughput = 7.91059
+injectionrate = 0.23
+average_packet_latency = 41573.463133
+average_packet_queueing_latency = 40738.910938
+average_packet_network_latency = 834.552195
+average_hops = 7.914551
+reception_rate = .22245
+throughput = 8.00850
diff --git a/results/Ring/results_Ring_algo_3_transpose_N=8_horse.txt b/results/Ring/results_Ring_algo_3_transpose_N=8_horse.txt
new file mode 100644
index 0000000000..579ebeeb5d
--- /dev/null
+++ b/results/Ring/results_Ring_algo_3_transpose_N=8_horse.txt
@@ -0,0 +1,57 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 916.231370
+average_packet_queueing_latency = 50
+average_packet_network_latency = 866.231370
+average_hops = 15.774033
+reception_rate = .00994
+throughput = .63673
+injectionrate = 0.03
+average_packet_latency = 921.769849
+average_packet_queueing_latency = 50
+average_packet_network_latency = 871.769849
+average_hops = 15.768746
+reception_rate = .03002
+throughput = 1.92135
+injectionrate = 0.05
+average_packet_latency = 929.346126
+average_packet_queueing_latency = 50
+average_packet_network_latency = 879.346126
+average_hops = 15.756387
+reception_rate = .05003
+throughput = 3.20245
+injectionrate = 0.07
+average_packet_latency = 946.093361
+average_packet_queueing_latency = 50
+average_packet_network_latency = 896.093361
+average_hops = 15.749301
+reception_rate = .06994
+throughput = 4.47629
+injectionrate = 0.08
+average_packet_latency = 969.928649
+average_packet_queueing_latency = 50.000440
+average_packet_network_latency = 919.928209
+average_hops = 15.755782
+reception_rate = .07990
+throughput = 5.11412
+injectionrate = 0.09
+average_packet_latency = 1188.867179
+average_packet_queueing_latency = 64.939836
+average_packet_network_latency = 1123.927343
+average_hops = 15.749815
+reception_rate = .08992
+throughput = 5.75510
+injectionrate = 0.1
+average_packet_latency = 30699.764580
+average_packet_queueing_latency = 28164.111188
+average_packet_network_latency = 2535.653391
+average_hops = 15.111621
+reception_rate = .09358
+throughput = 5.98929
+injectionrate = 0.11
+average_packet_latency = 61740.362891
+average_packet_queueing_latency = 58987.113315
+average_packet_network_latency = 2753.249575
+average_hops = 14.156756
+reception_rate = .09431
+throughput = 6.03625
diff --git a/results/Ring/results_Ring_algo_3_uniform_random_N=4_horse.txt b/results/Ring/results_Ring_algo_3_uniform_random_N=4_horse.txt
new file mode 100644
index 0000000000..e618f5c062
--- /dev/null
+++ b/results/Ring/results_Ring_algo_3_uniform_random_N=4_horse.txt
@@ -0,0 +1,50 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 323.535193
+average_packet_queueing_latency = 50
+average_packet_network_latency = 273.535193
+average_hops = 3.962270
+reception_rate = .00985
+throughput = .15770
+injectionrate = 0.1
+average_packet_latency = 329.267284
+average_packet_queueing_latency = 50
+average_packet_network_latency = 279.267284
+average_hops = 4.000326
+reception_rate = .09974
+throughput = 1.59598
+injectionrate = 0.2
+average_packet_latency = 334.006646
+average_packet_queueing_latency = 50
+average_packet_network_latency = 284.006646
+average_hops = 4.002273
+reception_rate = .19965
+throughput = 3.19453
+injectionrate = 0.3
+average_packet_latency = 340.182308
+average_packet_queueing_latency = 50
+average_packet_network_latency = 290.182308
+average_hops = 4.001318
+reception_rate = .29971
+throughput = 4.79545
+injectionrate = 0.4
+average_packet_latency = 349.442405
+average_packet_queueing_latency = 50.000078
+average_packet_network_latency = 299.442327
+average_hops = 4.000363
+reception_rate = .39948
+throughput = 6.39174
+injectionrate = 0.42
+average_packet_latency = 352.520243
+average_packet_queueing_latency = 50.000484
+average_packet_network_latency = 302.519758
+average_hops = 3.999853
+reception_rate = .41952
+throughput = 6.71235
+injectionrate = 0.43
+average_packet_latency = 354.540266
+average_packet_queueing_latency = 50.000764
+average_packet_network_latency = 304.539502
+average_hops = 4.003971
+reception_rate = .42952
+throughput = 6.87234
diff --git a/results/Ring/results_Ring_algo_3_uniform_random_N=6_horse.txt b/results/Ring/results_Ring_algo_3_uniform_random_N=6_horse.txt
new file mode 100644
index 0000000000..4456e0da10
--- /dev/null
+++ b/results/Ring/results_Ring_algo_3_uniform_random_N=6_horse.txt
@@ -0,0 +1,36 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 574.431595
+average_packet_queueing_latency = 50
+average_packet_network_latency = 524.431595
+average_hops = 8.967540
+reception_rate = .00988
+throughput = .35582
+injectionrate = 0.1
+average_packet_latency = 586.066626
+average_packet_queueing_latency = 50
+average_packet_network_latency = 536.066626
+average_hops = 8.993906
+reception_rate = .09978
+throughput = 3.59231
+injectionrate = 0.2
+average_packet_latency = 609.533479
+average_packet_queueing_latency = 50
+average_packet_network_latency = 559.533479
+average_hops = 8.998454
+reception_rate = .19981
+throughput = 7.19336
+injectionrate = 0.21
+average_packet_latency = 613.860504
+average_packet_queueing_latency = 50
+average_packet_network_latency = 563.860504
+average_hops = 8.996419
+reception_rate = .20988
+throughput = 7.55593
+injectionrate = 0.22
+average_packet_latency = 620.841069
+average_packet_queueing_latency = 50.000506
+average_packet_network_latency = 570.840563
+average_hops = 8.995822
+reception_rate = .21979
+throughput = 7.91273
diff --git a/results/Ring/results_Ring_algo_3_uniform_random_N=8_horse.txt b/results/Ring/results_Ring_algo_3_uniform_random_N=8_horse.txt
new file mode 100644
index 0000000000..31c051c644
--- /dev/null
+++ b/results/Ring/results_Ring_algo_3_uniform_random_N=8_horse.txt
@@ -0,0 +1,50 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 927.411299
+average_packet_queueing_latency = 50
+average_packet_network_latency = 877.411299
+average_hops = 16.010759
+reception_rate = .00994
+throughput = .63669
+injectionrate = 0.1
+average_packet_latency = 950.637607
+average_packet_queueing_latency = 50
+average_packet_network_latency = 900.637607
+average_hops = 16.005064
+reception_rate = .09982
+throughput = 6.38873
+injectionrate = 0.11
+average_packet_latency = 954.453750
+average_packet_queueing_latency = 50
+average_packet_network_latency = 904.453750
+average_hops = 15.990696
+reception_rate = .10976
+throughput = 7.02526
+injectionrate = 0.12
+average_packet_latency = 960.293905
+average_packet_queueing_latency = 50
+average_packet_network_latency = 910.293905
+average_hops = 15.990289
+reception_rate = .11972
+throughput = 7.66269
+injectionrate = 0.13
+average_packet_latency = 968.665204
+average_packet_queueing_latency = 50
+average_packet_network_latency = 918.665204
+average_hops = 16.008106
+reception_rate = .12968
+throughput = 8.30011
+injectionrate = 0.14
+average_packet_latency = 978.972828
+average_packet_queueing_latency = 50
+average_packet_network_latency = 928.972828
+average_hops = 16.011382
+reception_rate = .13972
+throughput = 8.94237
+injectionrate = 0.15
+average_packet_latency = 993.057015
+average_packet_queueing_latency = 50
+average_packet_network_latency = 943.057015
+average_hops = 16.002154
+reception_rate = .14972
+throughput = 9.58237
diff --git a/results/Routerless/results_Routerless_algo_5_neighbor_N=4_horse.txt b/results/Routerless/results_Routerless_algo_5_neighbor_N=4_horse.txt
new file mode 100644
index 0000000000..46b12b8188
--- /dev/null
+++ b/results/Routerless/results_Routerless_algo_5_neighbor_N=4_horse.txt
@@ -0,0 +1,78 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 225.421259
+average_packet_queueing_latency = 50
+average_packet_network_latency = 175.421259
+average_hops = 2.008425
+reception_rate = .00986
+throughput = .15786
+injectionrate = 0.1
+average_packet_latency = 225.116308
+average_packet_queueing_latency = 50
+average_packet_network_latency = 175.116308
+average_hops = 2.002326
+reception_rate = .09995
+throughput = 1.59920
+injectionrate = 0.2
+average_packet_latency = 225.045950
+average_packet_queueing_latency = 50
+average_packet_network_latency = 175.045950
+average_hops = 2.000919
+reception_rate = .19994
+throughput = 3.19911
+injectionrate = 0.3
+average_packet_latency = 225.099139
+average_packet_queueing_latency = 50
+average_packet_network_latency = 175.099139
+average_hops = 2.001983
+reception_rate = .30008
+throughput = 4.80132
+injectionrate = 0.4
+average_packet_latency = 225.081142
+average_packet_queueing_latency = 50
+average_packet_network_latency = 175.081142
+average_hops = 2.001623
+reception_rate = .39976
+throughput = 6.39618
+injectionrate = 0.5
+average_packet_latency = 225.015443
+average_packet_queueing_latency = 50
+average_packet_network_latency = 175.015443
+average_hops = 2.000309
+reception_rate = .49981
+throughput = 7.99708
+injectionrate = 0.6
+average_packet_latency = 225.008440
+average_packet_queueing_latency = 50
+average_packet_network_latency = 175.008440
+average_hops = 2.000169
+reception_rate = .59981
+throughput = 9.59711
+injectionrate = 0.7
+average_packet_latency = 225.001384
+average_packet_queueing_latency = 50
+average_packet_network_latency = 175.001384
+average_hops = 2.000028
+reception_rate = .69979
+throughput = 11.19665
+injectionrate = 0.8
+average_packet_latency = 225.012312
+average_packet_queueing_latency = 50
+average_packet_network_latency = 175.012312
+average_hops = 2.000246
+reception_rate = .79955
+throughput = 12.79286
+injectionrate = 0.9
+average_packet_latency = 224.997741
+average_packet_queueing_latency = 50
+average_packet_network_latency = 174.997741
+average_hops = 1.999955
+reception_rate = .89908
+throughput = 14.38533
+injectionrate = 1
+average_packet_latency = 225.001001
+average_packet_queueing_latency = 50
+average_packet_network_latency = 175.001001
+average_hops = 2.000020
+reception_rate = .99895
+throughput = 15.98329
diff --git a/results/Routerless/results_Routerless_algo_5_neighbor_N=6_dog.txt b/results/Routerless/results_Routerless_algo_5_neighbor_N=6_dog.txt
new file mode 100644
index 0000000000..c6d7e736e7
--- /dev/null
+++ b/results/Routerless/results_Routerless_algo_5_neighbor_N=6_dog.txt
@@ -0,0 +1,64 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 659.603128
+average_packet_queueing_latency = 50
+average_packet_network_latency = 609.603128
+average_hops = 10.676578
+reception_rate = .00989
+throughput = .35616
+injectionrate = 0.1
+average_packet_latency = 674.435421
+average_packet_queueing_latency = 50
+average_packet_network_latency = 624.435421
+average_hops = 10.815075
+reception_rate = .09984
+throughput = 3.59427
+injectionrate = 0.2
+average_packet_latency = 726.678681
+average_packet_queueing_latency = 50
+average_packet_network_latency = 676.678681
+average_hops = 11.565737
+reception_rate = .19980
+throughput = 7.19285
+injectionrate = 0.3
+average_packet_latency = 859.204439
+average_packet_queueing_latency = 50.039425
+average_packet_network_latency = 809.165014
+average_hops = 13.362374
+reception_rate = .29979
+throughput = 10.79251
+injectionrate = 0.31
+average_packet_latency = 913.348021
+average_packet_queueing_latency = 50.278082
+average_packet_network_latency = 863.069939
+average_hops = 13.863912
+reception_rate = .30978
+throughput = 11.15229
+injectionrate = 0.32
+average_packet_latency = 1026.348688
+average_packet_queueing_latency = 52.247712
+average_packet_network_latency = 974.100976
+average_hops = 14.266890
+reception_rate = .31980
+throughput = 11.51304
+injectionrate = 0.33
+average_packet_latency = 19334.032524
+average_packet_queueing_latency = 18131.861767
+average_packet_network_latency = 1202.170757
+average_hops = 14.194295
+reception_rate = .32670
+throughput = 11.76122
+injectionrate = 0.34
+average_packet_latency = 51060.599202
+average_packet_queueing_latency = 49844.343184
+average_packet_network_latency = 1216.256018
+average_hops = 14.456394
+reception_rate = .32635
+throughput = 11.74888
+injectionrate = 0.4
+average_packet_latency = 119703.817795
+average_packet_queueing_latency = 118391.539991
+average_packet_network_latency = 1312.277803
+average_hops = 15.393518
+reception_rate = .32592
+throughput = 11.73341
diff --git a/results/Routerless/results_Routerless_algo_5_neighbor_N=8_dog.txt b/results/Routerless/results_Routerless_algo_5_neighbor_N=8_dog.txt
new file mode 100644
index 0000000000..8fe07eef07
--- /dev/null
+++ b/results/Routerless/results_Routerless_algo_5_neighbor_N=8_dog.txt
@@ -0,0 +1,64 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 998.578698
+average_packet_queueing_latency = 50
+average_packet_network_latency = 948.578698
+average_hops = 17.450184
+reception_rate = .00994
+throughput = .63674
+injectionrate = 0.1
+average_packet_latency = 1029.946587
+average_packet_queueing_latency = 50
+average_packet_network_latency = 979.946587
+average_hops = 17.823005
+reception_rate = .09994
+throughput = 6.39638
+injectionrate = 0.2
+average_packet_latency = 1161.647567
+average_packet_queueing_latency = 50
+average_packet_network_latency = 1111.647567
+average_hops = 19.690851
+reception_rate = .19973
+throughput = 12.78282
+injectionrate = 0.21
+average_packet_latency = 1188.716432
+average_packet_queueing_latency = 50.000112
+average_packet_network_latency = 1138.716320
+average_hops = 20.034538
+reception_rate = .20975
+throughput = 13.42410
+injectionrate = 0.22
+average_packet_latency = 1228.289920
+average_packet_queueing_latency = 50.005138
+average_packet_network_latency = 1178.284783
+average_hops = 20.512796
+reception_rate = .21972
+throughput = 14.06227
+injectionrate = 0.23
+average_packet_latency = 1342.861983
+average_packet_queueing_latency = 50.722977
+average_packet_network_latency = 1292.139006
+average_hops = 21.329856
+reception_rate = .22976
+throughput = 14.70482
+injectionrate = 0.24
+average_packet_latency = 18646.445310
+average_packet_queueing_latency = 16969.787868
+average_packet_network_latency = 1676.657442
+average_hops = 21.548743
+reception_rate = .23707
+throughput = 15.17263
+injectionrate = 0.25
+average_packet_latency = 33269.883278
+average_packet_queueing_latency = 31592.865844
+average_packet_network_latency = 1677.017434
+average_hops = 22.241000
+reception_rate = .23588
+throughput = 15.09653
+injectionrate = 0.26
+average_packet_latency = 33860.080365
+average_packet_queueing_latency = 32167.244955
+average_packet_network_latency = 1692.835410
+average_hops = 22.891788
+reception_rate = .23168
+throughput = 14.82796
diff --git a/results/Routerless/results_Routerless_algo_5_shuffle_N=4_horse.txt b/results/Routerless/results_Routerless_algo_5_shuffle_N=4_horse.txt
new file mode 100644
index 0000000000..360bf4c22f
--- /dev/null
+++ b/results/Routerless/results_Routerless_algo_5_shuffle_N=4_horse.txt
@@ -0,0 +1,78 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 281.450336
+average_packet_queueing_latency = 50
+average_packet_network_latency = 231.450336
+average_hops = 3.128532
+reception_rate = .00986
+throughput = .15786
+injectionrate = 0.1
+average_packet_latency = 281.189109
+average_packet_queueing_latency = 50
+average_packet_network_latency = 231.189109
+average_hops = 3.120606
+reception_rate = .09994
+throughput = 1.59918
+injectionrate = 0.2
+average_packet_latency = 281.291184
+average_packet_queueing_latency = 50
+average_packet_network_latency = 231.291184
+average_hops = 3.119606
+reception_rate = .19994
+throughput = 3.19908
+injectionrate = 0.3
+average_packet_latency = 281.661717
+average_packet_queueing_latency = 50
+average_packet_network_latency = 231.661717
+average_hops = 3.123966
+reception_rate = .30007
+throughput = 4.80124
+injectionrate = 0.4
+average_packet_latency = 281.843886
+average_packet_queueing_latency = 50
+average_packet_network_latency = 231.843886
+average_hops = 3.124670
+reception_rate = .39975
+throughput = 6.39611
+injectionrate = 0.5
+average_packet_latency = 282.078847
+average_packet_queueing_latency = 50
+average_packet_network_latency = 232.078847
+average_hops = 3.126637
+reception_rate = .49981
+throughput = 7.99703
+injectionrate = 0.6
+average_packet_latency = 282.151033
+average_packet_queueing_latency = 50
+average_packet_network_latency = 232.151033
+average_hops = 3.125865
+reception_rate = .59981
+throughput = 9.59704
+injectionrate = 0.7
+average_packet_latency = 282.164847
+average_packet_queueing_latency = 50
+average_packet_network_latency = 232.164847
+average_hops = 3.124424
+reception_rate = .69978
+throughput = 11.19654
+injectionrate = 0.8
+average_packet_latency = 282.234871
+average_packet_queueing_latency = 50
+average_packet_network_latency = 232.234871
+average_hops = 3.124657
+reception_rate = .79954
+throughput = 12.79273
+injectionrate = 0.9
+average_packet_latency = 282.296646
+average_packet_queueing_latency = 50
+average_packet_network_latency = 232.296646
+average_hops = 3.125280
+reception_rate = .89907
+throughput = 14.38517
+injectionrate = 1
+average_packet_latency = 282.286364
+average_packet_queueing_latency = 50
+average_packet_network_latency = 232.286364
+average_hops = 3.124893
+reception_rate = .99894
+throughput = 15.98311
diff --git a/results/Routerless/results_Routerless_algo_5_shuffle_N=6_dog.txt b/results/Routerless/results_Routerless_algo_5_shuffle_N=6_dog.txt
new file mode 100644
index 0000000000..d27411aa94
--- /dev/null
+++ b/results/Routerless/results_Routerless_algo_5_shuffle_N=6_dog.txt
@@ -0,0 +1,57 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 659.601022
+average_packet_queueing_latency = 50
+average_packet_network_latency = 609.601022
+average_hops = 10.676578
+reception_rate = .00989
+throughput = .35616
+injectionrate = 0.1
+average_packet_latency = 674.450793
+average_packet_queueing_latency = 50
+average_packet_network_latency = 624.450793
+average_hops = 10.815145
+reception_rate = .09984
+throughput = 3.59427
+injectionrate = 0.2
+average_packet_latency = 726.546640
+average_packet_queueing_latency = 50
+average_packet_network_latency = 676.546640
+average_hops = 11.563279
+reception_rate = .19980
+throughput = 7.19285
+injectionrate = 0.3
+average_packet_latency = 861.427561
+average_packet_queueing_latency = 50.049294
+average_packet_network_latency = 811.378268
+average_hops = 13.383226
+reception_rate = .29979
+throughput = 10.79246
+injectionrate = 0.31
+average_packet_latency = 923.867272
+average_packet_queueing_latency = 50.553990
+average_packet_network_latency = 873.313282
+average_hops = 13.896961
+reception_rate = .30978
+throughput = 11.15228
+injectionrate = 0.32
+average_packet_latency = 1050.931758
+average_packet_queueing_latency = 56.543757
+average_packet_network_latency = 994.388001
+average_hops = 14.225409
+reception_rate = .31980
+throughput = 11.51292
+injectionrate = 0.33
+average_packet_latency = 25705.300612
+average_packet_queueing_latency = 24508.655261
+average_packet_network_latency = 1196.645350
+average_hops = 14.179900
+reception_rate = .32517
+throughput = 11.70629
+injectionrate = 0.34
+average_packet_latency = 51553.843306
+average_packet_queueing_latency = 50348.640939
+average_packet_network_latency = 1205.202367
+average_hops = 14.439560
+reception_rate = .32483
+throughput = 11.69410
diff --git a/results/Routerless/results_Routerless_algo_5_shuffle_N=8_dog.txt b/results/Routerless/results_Routerless_algo_5_shuffle_N=8_dog.txt
new file mode 100644
index 0000000000..dfabd6320d
--- /dev/null
+++ b/results/Routerless/results_Routerless_algo_5_shuffle_N=8_dog.txt
@@ -0,0 +1,57 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 998.519804
+average_packet_queueing_latency = 50
+average_packet_network_latency = 948.519804
+average_hops = 17.450184
+reception_rate = .00994
+throughput = .63674
+injectionrate = 0.1
+average_packet_latency = 1028.957825
+average_packet_queueing_latency = 50
+average_packet_network_latency = 978.957825
+average_hops = 17.820054
+reception_rate = .09994
+throughput = 6.39638
+injectionrate = 0.2
+average_packet_latency = 1153.586373
+average_packet_queueing_latency = 50
+average_packet_network_latency = 1103.586373
+average_hops = 19.620771
+reception_rate = .19973
+throughput = 12.78283
+injectionrate = 0.21
+average_packet_latency = 1177.515260
+average_packet_queueing_latency = 50.000112
+average_packet_network_latency = 1127.515148
+average_hops = 19.930781
+reception_rate = .20975
+throughput = 13.42416
+injectionrate = 0.22
+average_packet_latency = 1210.752374
+average_packet_queueing_latency = 50.004587
+average_packet_network_latency = 1160.747787
+average_hops = 20.348467
+reception_rate = .21972
+throughput = 14.06236
+injectionrate = 0.23
+average_packet_latency = 1281.744558
+average_packet_queueing_latency = 50.166370
+average_packet_network_latency = 1231.578188
+average_hops = 21.053325
+reception_rate = .22976
+throughput = 14.70519
+injectionrate = 0.24
+average_packet_latency = 1968.268064
+average_packet_queueing_latency = 447.006272
+average_packet_network_latency = 1521.261792
+average_hops = 21.461472
+reception_rate = .23974
+throughput = 15.34358
+injectionrate = 0.25
+average_packet_latency = 31382.518047
+average_packet_queueing_latency = 29655.731858
+average_packet_network_latency = 1726.786189
+average_hops = 22.003440
+reception_rate = .23870
+throughput = 15.27694
diff --git a/results/Routerless/results_Routerless_algo_5_tornado_N=4_horse.txt b/results/Routerless/results_Routerless_algo_5_tornado_N=4_horse.txt
new file mode 100644
index 0000000000..46b12b8188
--- /dev/null
+++ b/results/Routerless/results_Routerless_algo_5_tornado_N=4_horse.txt
@@ -0,0 +1,78 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 225.421259
+average_packet_queueing_latency = 50
+average_packet_network_latency = 175.421259
+average_hops = 2.008425
+reception_rate = .00986
+throughput = .15786
+injectionrate = 0.1
+average_packet_latency = 225.116308
+average_packet_queueing_latency = 50
+average_packet_network_latency = 175.116308
+average_hops = 2.002326
+reception_rate = .09995
+throughput = 1.59920
+injectionrate = 0.2
+average_packet_latency = 225.045950
+average_packet_queueing_latency = 50
+average_packet_network_latency = 175.045950
+average_hops = 2.000919
+reception_rate = .19994
+throughput = 3.19911
+injectionrate = 0.3
+average_packet_latency = 225.099139
+average_packet_queueing_latency = 50
+average_packet_network_latency = 175.099139
+average_hops = 2.001983
+reception_rate = .30008
+throughput = 4.80132
+injectionrate = 0.4
+average_packet_latency = 225.081142
+average_packet_queueing_latency = 50
+average_packet_network_latency = 175.081142
+average_hops = 2.001623
+reception_rate = .39976
+throughput = 6.39618
+injectionrate = 0.5
+average_packet_latency = 225.015443
+average_packet_queueing_latency = 50
+average_packet_network_latency = 175.015443
+average_hops = 2.000309
+reception_rate = .49981
+throughput = 7.99708
+injectionrate = 0.6
+average_packet_latency = 225.008440
+average_packet_queueing_latency = 50
+average_packet_network_latency = 175.008440
+average_hops = 2.000169
+reception_rate = .59981
+throughput = 9.59711
+injectionrate = 0.7
+average_packet_latency = 225.001384
+average_packet_queueing_latency = 50
+average_packet_network_latency = 175.001384
+average_hops = 2.000028
+reception_rate = .69979
+throughput = 11.19665
+injectionrate = 0.8
+average_packet_latency = 225.012312
+average_packet_queueing_latency = 50
+average_packet_network_latency = 175.012312
+average_hops = 2.000246
+reception_rate = .79955
+throughput = 12.79286
+injectionrate = 0.9
+average_packet_latency = 224.997741
+average_packet_queueing_latency = 50
+average_packet_network_latency = 174.997741
+average_hops = 1.999955
+reception_rate = .89908
+throughput = 14.38533
+injectionrate = 1
+average_packet_latency = 225.001001
+average_packet_queueing_latency = 50
+average_packet_network_latency = 175.001001
+average_hops = 2.000020
+reception_rate = .99895
+throughput = 15.98329
diff --git a/results/Routerless/results_Routerless_algo_5_tornado_N=6_dog.txt b/results/Routerless/results_Routerless_algo_5_tornado_N=6_dog.txt
new file mode 100644
index 0000000000..a1e38c18a9
--- /dev/null
+++ b/results/Routerless/results_Routerless_algo_5_tornado_N=6_dog.txt
@@ -0,0 +1,57 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 659.603128
+average_packet_queueing_latency = 50
+average_packet_network_latency = 609.603128
+average_hops = 10.676578
+reception_rate = .00989
+throughput = .35616
+injectionrate = 0.1
+average_packet_latency = 674.435421
+average_packet_queueing_latency = 50
+average_packet_network_latency = 624.435421
+average_hops = 10.815075
+reception_rate = .09984
+throughput = 3.59427
+injectionrate = 0.2
+average_packet_latency = 726.678681
+average_packet_queueing_latency = 50
+average_packet_network_latency = 676.678681
+average_hops = 11.565737
+reception_rate = .19980
+throughput = 7.19285
+injectionrate = 0.3
+average_packet_latency = 859.204439
+average_packet_queueing_latency = 50.039425
+average_packet_network_latency = 809.165014
+average_hops = 13.362374
+reception_rate = .29979
+throughput = 10.79251
+injectionrate = 0.31
+average_packet_latency = 913.348021
+average_packet_queueing_latency = 50.278082
+average_packet_network_latency = 863.069939
+average_hops = 13.863912
+reception_rate = .30978
+throughput = 11.15229
+injectionrate = 0.32
+average_packet_latency = 1026.348688
+average_packet_queueing_latency = 52.247712
+average_packet_network_latency = 974.100976
+average_hops = 14.266890
+reception_rate = .31980
+throughput = 11.51304
+injectionrate = 0.33
+average_packet_latency = 19334.032524
+average_packet_queueing_latency = 18131.861767
+average_packet_network_latency = 1202.170757
+average_hops = 14.194295
+reception_rate = .32670
+throughput = 11.76122
+injectionrate = 0.4
+average_packet_latency = 119703.817795
+average_packet_queueing_latency = 118391.539991
+average_packet_network_latency = 1312.277803
+average_hops = 15.393518
+reception_rate = .32592
+throughput = 11.73341
diff --git a/results/Routerless/results_Routerless_algo_5_tornado_N=8_dog.txt b/results/Routerless/results_Routerless_algo_5_tornado_N=8_dog.txt
new file mode 100644
index 0000000000..8fe07eef07
--- /dev/null
+++ b/results/Routerless/results_Routerless_algo_5_tornado_N=8_dog.txt
@@ -0,0 +1,64 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 998.578698
+average_packet_queueing_latency = 50
+average_packet_network_latency = 948.578698
+average_hops = 17.450184
+reception_rate = .00994
+throughput = .63674
+injectionrate = 0.1
+average_packet_latency = 1029.946587
+average_packet_queueing_latency = 50
+average_packet_network_latency = 979.946587
+average_hops = 17.823005
+reception_rate = .09994
+throughput = 6.39638
+injectionrate = 0.2
+average_packet_latency = 1161.647567
+average_packet_queueing_latency = 50
+average_packet_network_latency = 1111.647567
+average_hops = 19.690851
+reception_rate = .19973
+throughput = 12.78282
+injectionrate = 0.21
+average_packet_latency = 1188.716432
+average_packet_queueing_latency = 50.000112
+average_packet_network_latency = 1138.716320
+average_hops = 20.034538
+reception_rate = .20975
+throughput = 13.42410
+injectionrate = 0.22
+average_packet_latency = 1228.289920
+average_packet_queueing_latency = 50.005138
+average_packet_network_latency = 1178.284783
+average_hops = 20.512796
+reception_rate = .21972
+throughput = 14.06227
+injectionrate = 0.23
+average_packet_latency = 1342.861983
+average_packet_queueing_latency = 50.722977
+average_packet_network_latency = 1292.139006
+average_hops = 21.329856
+reception_rate = .22976
+throughput = 14.70482
+injectionrate = 0.24
+average_packet_latency = 18646.445310
+average_packet_queueing_latency = 16969.787868
+average_packet_network_latency = 1676.657442
+average_hops = 21.548743
+reception_rate = .23707
+throughput = 15.17263
+injectionrate = 0.25
+average_packet_latency = 33269.883278
+average_packet_queueing_latency = 31592.865844
+average_packet_network_latency = 1677.017434
+average_hops = 22.241000
+reception_rate = .23588
+throughput = 15.09653
+injectionrate = 0.26
+average_packet_latency = 33860.080365
+average_packet_queueing_latency = 32167.244955
+average_packet_network_latency = 1692.835410
+average_hops = 22.891788
+reception_rate = .23168
+throughput = 14.82796
diff --git a/results/Routerless/results_Routerless_algo_5_transpose_N=4_horse.txt b/results/Routerless/results_Routerless_algo_5_transpose_N=4_horse.txt
new file mode 100644
index 0000000000..f3204c4660
--- /dev/null
+++ b/results/Routerless/results_Routerless_algo_5_transpose_N=4_horse.txt
@@ -0,0 +1,78 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 301.076972
+average_packet_queueing_latency = 50
+average_packet_network_latency = 251.076972
+average_hops = 3.519290
+reception_rate = .00986
+throughput = .15785
+injectionrate = 0.1
+average_packet_latency = 301.375392
+average_packet_queueing_latency = 50
+average_packet_network_latency = 251.375392
+average_hops = 3.505259
+reception_rate = .09994
+throughput = 1.59918
+injectionrate = 0.2
+average_packet_latency = 302.758545
+average_packet_queueing_latency = 50
+average_packet_network_latency = 252.758545
+average_hops = 3.509912
+reception_rate = .19994
+throughput = 3.19906
+injectionrate = 0.3
+average_packet_latency = 306.456719
+average_packet_queueing_latency = 50
+average_packet_network_latency = 256.456719
+average_hops = 3.559256
+reception_rate = .30007
+throughput = 4.80120
+injectionrate = 0.4
+average_packet_latency = 312.138411
+average_packet_queueing_latency = 50
+average_packet_network_latency = 262.138411
+average_hops = 3.646033
+reception_rate = .39975
+throughput = 6.39608
+injectionrate = 0.5
+average_packet_latency = 320.042535
+average_packet_queueing_latency = 50
+average_packet_network_latency = 270.042535
+average_hops = 3.774761
+reception_rate = .49981
+throughput = 7.99698
+injectionrate = 0.6
+average_packet_latency = 329.349950
+average_packet_queueing_latency = 50
+average_packet_network_latency = 279.349950
+average_hops = 3.932491
+reception_rate = .59980
+throughput = 9.59695
+injectionrate = 0.7
+average_packet_latency = 338.533847
+average_packet_queueing_latency = 50
+average_packet_network_latency = 288.533847
+average_hops = 4.093215
+reception_rate = .69977
+throughput = 11.19641
+injectionrate = 0.8
+average_packet_latency = 347.097662
+average_packet_queueing_latency = 50
+average_packet_network_latency = 297.097662
+average_hops = 4.246545
+reception_rate = .79953
+throughput = 12.79253
+injectionrate = 0.9
+average_packet_latency = 354.869047
+average_packet_queueing_latency = 50
+average_packet_network_latency = 304.869047
+average_hops = 4.382008
+reception_rate = .89905
+throughput = 14.38495
+injectionrate = 1
+average_packet_latency = 362.051973
+average_packet_queueing_latency = 50
+average_packet_network_latency = 312.051973
+average_hops = 4.498779
+reception_rate = .99892
+throughput = 15.98286
diff --git a/results/Routerless/results_Routerless_algo_5_transpose_N=6_dog.txt b/results/Routerless/results_Routerless_algo_5_transpose_N=6_dog.txt
new file mode 100644
index 0000000000..ebb2e0f80c
--- /dev/null
+++ b/results/Routerless/results_Routerless_algo_5_transpose_N=6_dog.txt
@@ -0,0 +1,78 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 659.626993
+average_packet_queueing_latency = 50
+average_packet_network_latency = 609.626993
+average_hops = 10.676578
+reception_rate = .00989
+throughput = .35616
+injectionrate = 0.1
+average_packet_latency = 674.725396
+average_packet_queueing_latency = 50
+average_packet_network_latency = 624.725396
+average_hops = 10.815136
+reception_rate = .09984
+throughput = 3.59427
+injectionrate = 0.2
+average_packet_latency = 727.446944
+average_packet_queueing_latency = 50
+average_packet_network_latency = 677.446944
+average_hops = 11.564897
+reception_rate = .19980
+throughput = 7.19285
+injectionrate = 0.3
+average_packet_latency = 872.734035
+average_packet_queueing_latency = 50.057656
+average_packet_network_latency = 822.676379
+average_hops = 13.464669
+reception_rate = .29979
+throughput = 10.79253
+injectionrate = 0.31
+average_packet_latency = 943.054962
+average_packet_queueing_latency = 50.422474
+average_packet_network_latency = 892.632488
+average_hops = 14.021555
+reception_rate = .30978
+throughput = 11.15217
+injectionrate = 0.32
+average_packet_latency = 1112.924415
+average_packet_queueing_latency = 68.601894
+average_packet_network_latency = 1044.322521
+average_hops = 14.299433
+reception_rate = .31980
+throughput = 11.51290
+injectionrate = 0.33
+average_packet_latency = 35303.849203
+average_packet_queueing_latency = 34059.995034
+average_packet_network_latency = 1243.854169
+average_hops = 14.324157
+reception_rate = .32217
+throughput = 11.59831
+injectionrate = 0.34
+average_packet_latency = 51299.258858
+average_packet_queueing_latency = 50051.335306
+average_packet_network_latency = 1247.923551
+average_hops = 14.577122
+reception_rate = .32227
+throughput = 11.60202
+injectionrate = 0.35
+average_packet_latency = 52763.612950
+average_packet_queueing_latency = 51513.890280
+average_packet_network_latency = 1249.722669
+average_hops = 14.829133
+reception_rate = .32159
+throughput = 11.57734
+injectionrate = 0.36
+average_packet_latency = 60304.697956
+average_packet_queueing_latency = 59041.968147
+average_packet_network_latency = 1262.729808
+average_hops = 15.032559
+reception_rate = .32113
+throughput = 11.56072
+injectionrate = 0.4
+average_packet_latency = 122162.490413
+average_packet_queueing_latency = 120815.369032
+average_packet_network_latency = 1347.121381
+average_hops = 15.448721
+reception_rate = .32343
+throughput = 11.64369
diff --git a/results/Routerless/results_Routerless_algo_5_transpose_N=8_dog.txt b/results/Routerless/results_Routerless_algo_5_transpose_N=8_dog.txt
new file mode 100644
index 0000000000..a7a93b649d
--- /dev/null
+++ b/results/Routerless/results_Routerless_algo_5_transpose_N=8_dog.txt
@@ -0,0 +1,64 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 998.576342
+average_packet_queueing_latency = 50
+average_packet_network_latency = 948.576342
+average_hops = 17.450184
+reception_rate = .00994
+throughput = .63674
+injectionrate = 0.1
+average_packet_latency = 1029.878267
+average_packet_queueing_latency = 50
+average_packet_network_latency = 979.878267
+average_hops = 17.822817
+reception_rate = .09994
+throughput = 6.39638
+injectionrate = 0.2
+average_packet_latency = 1160.888607
+average_packet_queueing_latency = 50.000020
+average_packet_network_latency = 1110.888588
+average_hops = 19.673422
+reception_rate = .19973
+throughput = 12.78281
+injectionrate = 0.21
+average_packet_latency = 1187.441244
+average_packet_queueing_latency = 50.000112
+average_packet_network_latency = 1137.441132
+average_hops = 20.006843
+reception_rate = .20975
+throughput = 13.42410
+injectionrate = 0.22
+average_packet_latency = 1226.887143
+average_packet_queueing_latency = 50.003680
+average_packet_network_latency = 1176.883463
+average_hops = 20.492456
+reception_rate = .21972
+throughput = 14.06226
+injectionrate = 0.23
+average_packet_latency = 1330.041969
+average_packet_queueing_latency = 50.425147
+average_packet_network_latency = 1279.616822
+average_hops = 21.299454
+reception_rate = .22976
+throughput = 14.70492
+injectionrate = 0.24
+average_packet_latency = 21726.563124
+average_packet_queueing_latency = 20016.288203
+average_packet_network_latency = 1710.274922
+average_hops = 21.583716
+reception_rate = .23653
+throughput = 15.13795
+injectionrate = 0.25
+average_packet_latency = 34417.659343
+average_packet_queueing_latency = 32723.374764
+average_packet_network_latency = 1694.284580
+average_hops = 22.176679
+reception_rate = .23703
+throughput = 15.17010
+injectionrate = 0.26
+average_packet_latency = 29997.695878
+average_packet_queueing_latency = 28302.158706
+average_packet_network_latency = 1695.537173
+average_hops = 22.791652
+reception_rate = .23448
+throughput = 15.00691
diff --git a/results/Routerless/results_Routerless_algo_5_uniform_random_N=4_horse.txt b/results/Routerless/results_Routerless_algo_5_uniform_random_N=4_horse.txt
new file mode 100644
index 0000000000..8d0043e2ba
--- /dev/null
+++ b/results/Routerless/results_Routerless_algo_5_uniform_random_N=4_horse.txt
@@ -0,0 +1,78 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 325.594483
+average_packet_queueing_latency = 50
+average_packet_network_latency = 275.594483
+average_hops = 4.007800
+reception_rate = .00985
+throughput = .15770
+injectionrate = 0.1
+average_packet_latency = 327.660154
+average_packet_queueing_latency = 50
+average_packet_network_latency = 277.660154
+average_hops = 4.013653
+reception_rate = .09974
+throughput = 1.59596
+injectionrate = 0.2
+average_packet_latency = 329.731682
+average_packet_queueing_latency = 50
+average_packet_network_latency = 279.731682
+average_hops = 4.014534
+reception_rate = .19965
+throughput = 3.19453
+injectionrate = 0.3
+average_packet_latency = 331.990576
+average_packet_queueing_latency = 50
+average_packet_network_latency = 281.990576
+average_hops = 4.019091
+reception_rate = .29971
+throughput = 4.79542
+injectionrate = 0.4
+average_packet_latency = 334.322721
+average_packet_queueing_latency = 50
+average_packet_network_latency = 284.322721
+average_hops = 4.022272
+reception_rate = .39948
+throughput = 6.39183
+injectionrate = 0.5
+average_packet_latency = 337.310813
+average_packet_queueing_latency = 50
+average_packet_network_latency = 287.310813
+average_hops = 4.032986
+reception_rate = .49971
+throughput = 7.99541
+injectionrate = 0.6
+average_packet_latency = 340.994361
+average_packet_queueing_latency = 50.000052
+average_packet_network_latency = 290.994309
+average_hops = 4.051357
+reception_rate = .59974
+throughput = 9.59596
+injectionrate = 0.7
+average_packet_latency = 345.515874
+average_packet_queueing_latency = 50.000112
+average_packet_network_latency = 295.515762
+average_hops = 4.076534
+reception_rate = .69957
+throughput = 11.19315
+injectionrate = 0.8
+average_packet_latency = 351.650643
+average_packet_queueing_latency = 50.000821
+average_packet_network_latency = 301.649822
+average_hops = 4.122356
+reception_rate = .79896
+throughput = 12.78350
+injectionrate = 0.9
+average_packet_latency = 359.004994
+average_packet_queueing_latency = 50.001981
+average_packet_network_latency = 309.003013
+average_hops = 4.177091
+reception_rate = .89914
+throughput = 14.38635
+injectionrate = 1
+average_packet_latency = 368.723148
+average_packet_queueing_latency = 50.004411
+average_packet_network_latency = 318.718737
+average_hops = 4.249265
+reception_rate = .99894
+throughput = 15.98317
diff --git a/results/Routerless/results_Routerless_algo_5_uniform_random_N=6_dog.txt b/results/Routerless/results_Routerless_algo_5_uniform_random_N=6_dog.txt
new file mode 100644
index 0000000000..ebf6731569
--- /dev/null
+++ b/results/Routerless/results_Routerless_algo_5_uniform_random_N=6_dog.txt
@@ -0,0 +1,57 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 657.533092
+average_packet_queueing_latency = 50
+average_packet_network_latency = 607.533092
+average_hops = 10.634460
+reception_rate = .00988
+throughput = .35583
+injectionrate = 0.1
+average_packet_latency = 677.217652
+average_packet_queueing_latency = 50
+average_packet_network_latency = 627.217652
+average_hops = 10.850816
+reception_rate = .09978
+throughput = 3.59220
+injectionrate = 0.2
+average_packet_latency = 732.405699
+average_packet_queueing_latency = 50
+average_packet_network_latency = 682.405699
+average_hops = 11.607100
+reception_rate = .19981
+throughput = 7.19321
+injectionrate = 0.3
+average_packet_latency = 926.395050
+average_packet_queueing_latency = 50.250404
+average_packet_network_latency = 876.144646
+average_hops = 13.808300
+reception_rate = .29976
+throughput = 10.79155
+injectionrate = 0.31
+average_packet_latency = 1122.606806
+average_packet_queueing_latency = 69.571160
+average_packet_network_latency = 1053.035646
+average_hops = 14.286679
+reception_rate = .30971
+throughput = 11.14985
+injectionrate = 0.325
+average_packet_latency = 49420.597419
+average_packet_queueing_latency = 48139.785892
+average_packet_network_latency = 1280.811527
+average_hops = 14.420107
+reception_rate = .31323
+throughput = 11.27634
+injectionrate = 0.35
+average_packet_latency = 64596.446073
+average_packet_queueing_latency = 63285.933713
+average_packet_network_latency = 1310.512359
+average_hops = 14.997839
+reception_rate = .31222
+throughput = 11.23996
+injectionrate = 0.4
+average_packet_latency = 130842.449057
+average_packet_queueing_latency = 129375.654799
+average_packet_network_latency = 1466.794258
+average_hops = 15.483076
+reception_rate = .31333
+throughput = 11.28018
diff --git a/results/Routerless/results_Routerless_algo_5_uniform_random_N=8_dog.txt b/results/Routerless/results_Routerless_algo_5_uniform_random_N=8_dog.txt
new file mode 100644
index 0000000000..66aca2c50b
--- /dev/null
+++ b/results/Routerless/results_Routerless_algo_5_uniform_random_N=8_dog.txt
@@ -0,0 +1,57 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 998.058679
+average_packet_queueing_latency = 50
+average_packet_network_latency = 948.058679
+average_hops = 17.437174
+reception_rate = .01768
+throughput = .63668
+injectionrate = 0.1
+average_packet_latency = 1031.963639
+average_packet_queueing_latency = 50
+average_packet_network_latency = 981.963639
+average_hops = 17.819829
+reception_rate = .09982
+throughput = 6.38865
+injectionrate = 0.2
+average_packet_latency = 1195.747081
+average_packet_queueing_latency = 50
+average_packet_network_latency = 1145.747081
+average_hops = 19.884486
+reception_rate = .19973
+throughput = 12.78275
+injectionrate = 0.21
+average_packet_latency = 1245.275672
+average_packet_queueing_latency = 50.004767
+average_packet_network_latency = 1195.270904
+average_hops = 20.394080
+reception_rate = .20976
+throughput = 13.42503
+injectionrate = 0.22
+average_packet_latency = 1401.329701
+average_packet_queueing_latency = 51.161188
+average_packet_network_latency = 1350.168513
+average_hops = 21.383736
+reception_rate = .21973
+throughput = 14.06275
+injectionrate = 0.225
+average_packet_latency = 2210.617659
+average_packet_queueing_latency = 530.082846
+average_packet_network_latency = 1680.534813
+average_hops = 21.481245
+reception_rate = .22471
+throughput = 14.38156
+injectionrate = 0.23
+average_packet_latency = 28930.260973
+average_packet_queueing_latency = 27124.391145
+average_packet_network_latency = 1805.869828
+average_hops = 21.740062
+reception_rate = .22494
+throughput = 14.39629
+injectionrate = 0.235
+average_packet_latency = 31093.760563
+average_packet_queueing_latency = 29283.713099
+average_packet_network_latency = 1810.047465
+average_hops = 22.096541
+reception_rate = .22437
+throughput = 14.36019
diff --git a/results/objective_function/results_IMR_algo_4_uniform_random_N=4_default.txt b/results/objective_function/results_IMR_algo_4_uniform_random_N=4_default.txt
new file mode 100644
index 0000000000..db772382ad
--- /dev/null
+++ b/results/objective_function/results_IMR_algo_4_uniform_random_N=4_default.txt
@@ -0,0 +1,78 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 384.381737
+average_packet_queueing_latency = 50
+average_packet_network_latency = 334.381737
+average_hops = 5.183767
+reception_rate = .00985
+throughput = .15770
+injectionrate = 0.1
+average_packet_latency = 385.561421
+average_packet_queueing_latency = 50
+average_packet_network_latency = 335.561421
+average_hops = 5.171891
+reception_rate = .09974
+throughput = 1.59595
+injectionrate = 0.2
+average_packet_latency = 387.998397
+average_packet_queueing_latency = 50
+average_packet_network_latency = 337.998397
+average_hops = 5.180946
+reception_rate = .19965
+throughput = 3.19449
+injectionrate = 0.3
+average_packet_latency = 390.289018
+average_packet_queueing_latency = 50
+average_packet_network_latency = 340.289018
+average_hops = 5.184096
+reception_rate = .29971
+throughput = 4.79537
+injectionrate = 0.4
+average_packet_latency = 392.268444
+average_packet_queueing_latency = 50
+average_packet_network_latency = 342.268444
+average_hops = 5.181044
+reception_rate = .39948
+throughput = 6.39176
+injectionrate = 0.5
+average_packet_latency = 395.038504
+average_packet_queueing_latency = 50
+average_packet_network_latency = 345.038504
+average_hops = 5.188263
+reception_rate = .49970
+throughput = 7.99532
+injectionrate = 0.6
+average_packet_latency = 398.787936
+average_packet_queueing_latency = 50.000026
+average_packet_network_latency = 348.787910
+average_hops = 5.204445
+reception_rate = .59973
+throughput = 9.59582
+injectionrate = 0.7
+average_packet_latency = 403.103142
+average_packet_queueing_latency = 50.000156
+average_packet_network_latency = 353.102986
+average_hops = 5.224858
+reception_rate = .69956
+throughput = 11.19301
+injectionrate = 0.8
+average_packet_latency = 408.746432
+average_packet_queueing_latency = 50.000684
+average_packet_network_latency = 358.745747
+average_hops = 5.259513
+reception_rate = .79895
+throughput = 12.78327
+injectionrate = 0.9
+average_packet_latency = 415.677229
+average_packet_queueing_latency = 50.001338
+average_packet_network_latency = 365.675891
+average_hops = 5.298117
+reception_rate = .89914
+throughput = 14.38628
+injectionrate = 1
+average_packet_latency = 424.761636
+average_packet_queueing_latency = 50.006585
+average_packet_network_latency = 374.755051
+average_hops = 5.352720
+reception_rate = .99893
+throughput = 15.98294
diff --git a/results/objective_function/results_IMR_algo_4_uniform_random_N=4_o.txt b/results/objective_function/results_IMR_algo_4_uniform_random_N=4_o.txt
new file mode 100644
index 0000000000..6206ad469b
--- /dev/null
+++ b/results/objective_function/results_IMR_algo_4_uniform_random_N=4_o.txt
@@ -0,0 +1,78 @@
+link_width_bits=128
+injectionrate = 0.01
+average_packet_latency = 393.926760
+average_packet_queueing_latency = 50
+average_packet_network_latency = 343.926760
+average_hops = 5.375269
+reception_rate = .00985
+throughput = .15770
+injectionrate = 0.1
+average_packet_latency = 393.425430
+average_packet_queueing_latency = 50
+average_packet_network_latency = 343.425430
+average_hops = 5.332884
+reception_rate = .09974
+throughput = 1.59596
+injectionrate = 0.2
+average_packet_latency = 394.982658
+average_packet_queueing_latency = 50
+average_packet_network_latency = 344.982658
+average_hops = 5.328477
+reception_rate = .19965
+throughput = 3.19447
+injectionrate = 0.3
+average_packet_latency = 396.902631
+average_packet_queueing_latency = 50
+average_packet_network_latency = 346.902631
+average_hops = 5.330077
+reception_rate = .29971
+throughput = 4.79536
+injectionrate = 0.4
+average_packet_latency = 398.516902
+average_packet_queueing_latency = 50
+average_packet_network_latency = 348.516902
+average_hops = 5.325311
+reception_rate = .39948
+throughput = 6.39169
+injectionrate = 0.5
+average_packet_latency = 400.942522
+average_packet_queueing_latency = 50
+average_packet_network_latency = 350.942522
+average_hops = 5.333083
+reception_rate = .49970
+throughput = 7.99530
+injectionrate = 0.6
+average_packet_latency = 403.541650
+average_packet_queueing_latency = 50.000078
+average_packet_network_latency = 353.541572
+average_hops = 5.337375
+reception_rate = .59973
+throughput = 9.59581
+injectionrate = 0.7
+average_packet_latency = 406.089376
+average_packet_queueing_latency = 50.000156
+average_packet_network_latency = 356.089220
+average_hops = 5.336256
+reception_rate = .69956
+throughput = 11.19306
+injectionrate = 0.8
+average_packet_latency = 410.134942
+average_packet_queueing_latency = 50.000567
+average_packet_network_latency = 360.134375
+average_hops = 5.355565
+reception_rate = .79895
+throughput = 12.78325
+injectionrate = 0.9
+average_packet_latency = 414.283634
+average_packet_queueing_latency = 50.002259
+average_packet_network_latency = 364.281375
+average_hops = 5.363667
+reception_rate = .89913
+throughput = 14.38622
+injectionrate = 1
+average_packet_latency = 419.530081
+average_packet_queueing_latency = 50.008165
+average_packet_network_latency = 369.521916
+average_hops = 5.376343
+reception_rate = .99893
+throughput = 15.98296
diff --git a/simulate.sh b/simulate.sh
new file mode 100644
index 0000000000..22b5dfb5a1
--- /dev/null
+++ b/simulate.sh
@@ -0,0 +1,68 @@
+#!/bin/bash
+
+topology="Mesh_XY"
+algorithm=1
+mesh_rows=4
+mode="tornado"
+injection_rates=(0.01 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1)
+vcs_per_vnet=4
+router_latency=1
+link_width_bits=128
+output="results_$topology""_algo_$algorithm""_$mode""_N=$mesh_rows.txt"
+
+rm -f $output
+echo "link_width_bits=$link_width_bits" >> $output
+
+for injectionrate in "${injection_rates[@]}"
+do
+    echo "Running simulation with injectionrate = $injectionrate"
+
+    ./build/NULL/gem5.opt \
+    configs/example/garnet_synth_traffic.py \
+    --link-width-bits=$link_width_bits \
+    --vcs-per-vnet=$vcs_per_vnet \
+    --router-latency=$router_latency \
+    --network=garnet --num-cpus=16 --num-dirs=16 \
+    --topology=$topology \
+    --routing-algorithm=$algorithm \
+    --inj-vnet=0 --synthetic=$mode \
+    --sim-cycles=5000000 --injectionrate=$injectionrate \
+    #--mesh-rows=$mesh_rows
+
+    rm -f network_stats.txt
+    echo > network_stats.txt
+    grep "packets_injected::total" m5out/stats.txt | sed 's/system.ruby.network.packets_injected::total\s*/packets_injected = /' >> network_stats.txt
+    grep "packets_received::total" m5out/stats.txt | sed 's/system.ruby.network.packets_received::total\s*/packets_received = /' >> network_stats.txt
+    grep "average_packet_queueing_latency" m5out/stats.txt | sed 's/system.ruby.network.average_packet_queueing_latency\s*/average_packet_queueing_latency = /' >> network_stats.txt
+    grep "average_packet_network_latency" m5out/stats.txt | sed 's/system.ruby.network.average_packet_network_latency\s*/average_packet_network_latency = /' >> network_stats.txt
+    grep "average_packet_latency" m5out/stats.txt | sed 's/system.ruby.network.average_packet_latency\s*/average_packet_latency = /' >> network_stats.txt
+    grep "average_hops" m5out/stats.txt | sed 's/system.ruby.network.average_hops\s*/average_hops = /' >> network_stats.txt
+
+    packets_received=$(grep "packets_received" network_stats.txt | awk '{print $3}')
+    num_cpus=$(grep "num_cpus" m5out/statistic.txt | awk -F= '{print $2}'| tail -n 1)
+    sim_cycles=$(grep "sim_cycles" m5out/statistic.txt | awk -F= '{print $2}'| tail -n 1)
+    Reception_Rate=$(echo "scale=5; $packets_received / ($num_cpus * 100000)" | bc)
+    echo packets_received = $packets_received
+    echo num_cpus = $num_cpus
+    echo sim_cycles = $sim_cycles
+    throughput=$(echo "scale=5; $packets_received / 100000" | bc)
+    echo "reception_rate = $Reception_Rate" >> network_stats.txt
+    echo "throughput = $throughput" >> network_stats.txt
+
+    > m5out/statistic.txt
+
+    avg_latency=$(grep "average_packet_latency" network_stats.txt | awk '{print $3}')
+    average_packet_queueing_latency=$(grep "average_packet_queueing_latency" network_stats.txt | awk '{print $3}')
+    average_packet_network_latency=$(grep "average_packet_network_latency" network_stats.txt | awk '{print $3}')
+    throughput=$(grep "throughput" network_stats.txt | awk '{print $3}')
+    average_hops=$(grep "average_hops" network_stats.txt | awk '{print $3}')
+    echo "injectionrate = $injectionrate" >> $output
+    echo "average_packet_latency = $avg_latency" >> $output
+    echo "average_packet_queueing_latency = $average_packet_queueing_latency" >> $output
+    echo "average_packet_network_latency = $average_packet_network_latency" >> $output
+    echo "average_hops = $average_hops" >> $output
+    echo "reception_rate = $Reception_Rate" >> $output
+    echo "throughput = $throughput" >> $output
+done
+
+echo "-----------------------------------" >> $output
diff --git a/src/mem/ruby/network/garnet/CommonTypes.hh b/src/mem/ruby/network/garnet/CommonTypes.hh
index 0bf6f3680d..7c09f40103 100644
--- a/src/mem/ruby/network/garnet/CommonTypes.hh
+++ b/src/mem/ruby/network/garnet/CommonTypes.hh
@@ -50,7 +50,7 @@ enum VC_state_type {IDLE_, VC_AB_, ACTIVE_, NUM_VC_STATE_TYPE_};
 enum VNET_type {CTRL_VNET_, DATA_VNET_, NULL_VNET_, NUM_VNET_TYPE_};
 enum flit_stage {I_, VA_, SA_, ST_, LT_, NUM_FLIT_STAGE_};
 enum link_type { EXT_IN_, EXT_OUT_, INT_, NUM_LINK_TYPES_ };
-enum RoutingAlgorithm { TABLE_ = 0, XY_ = 1, CUSTOM_ = 2,
+enum RoutingAlgorithm { TABLE_ = 0, XY_ = 1, CUSTOM_ = 2, RING_ = 3, IMR_ = 4, ROUTERLESS_ = 5,
                         NUM_ROUTING_ALGORITHM_};

 struct RouteInfo
diff --git a/src/mem/ruby/network/garnet/GarnetNetwork.cc b/src/mem/ruby/network/garnet/GarnetNetwork.cc
index 57922698e0..2c501b576b 100644
--- a/src/mem/ruby/network/garnet/GarnetNetwork.cc
+++ b/src/mem/ruby/network/garnet/GarnetNetwork.cc
@@ -93,6 +93,9 @@ GarnetNetwork::GarnetNetwork(const Params &p)

         // initialize the router's network pointers
         router->init_net_ptr(this);
+
+        // Read the ring routing table from the configuration
+        router->init_ring_routing_table(m_routing_algorithm);
     }

     // record the network interfaces
diff --git a/src/mem/ruby/network/garnet/Router.hh b/src/mem/ruby/network/garnet/Router.hh
index dbcdda9dbf..399e75f307 100644
--- a/src/mem/ruby/network/garnet/Router.hh
+++ b/src/mem/ruby/network/garnet/Router.hh
@@ -35,6 +35,10 @@
 #include <iostream>
 #include <memory>
 #include <vector>
+#include <fstream>
+#include <sstream>
+#include <string>
+#include <utility>

 #include "mem/ruby/common/Consumer.hh"
 #include "mem/ruby/common/NetDest.hh"
@@ -66,6 +70,12 @@ class OutputUnit;
 class Router : public BasicRouter, public Consumer
 {
   public:
+    struct RingRoutingEntry {
+      int src;
+      int dst;
+      std::vector<std::pair<int, int>> ring_distance_pairs; // (ring_id, distance) pairs
+    };
+
     typedef GarnetRouterParams Params;
     Router(const Params &p);

@@ -97,6 +107,80 @@ class Router : public BasicRouter, public Consumer

     GarnetNetwork* get_net_ptr()                    { return m_network_ptr; }

+    void init_ring_routing_table(int routing_algorithm){
+      std::string filename;
+      // Modify the path to your own ABSOLUTE path
+      switch (routing_algorithm)
+      {
+      case IMR_:
+        filename = "/home/s2022011336/gem5/Experiment Data/IMR/routing_table.txt";
+        break;
+      case ROUTERLESS_:
+        filename = "/home/s2022011336/gem5/Experiment Data/Routerless/routing_table.txt";
+        break;
+      default:
+        return;
+      }
+      std::ifstream file(filename);
+      std::string line;
+
+      if (!file.is_open()) {
+          std::cerr << "Unable to open file: " << filename << std::endl;
+          return;
+      }
+
+      RingRoutingEntry entry;
+      bool readingEntry = false;
+
+      while (std::getline(file, line)) {
+          if (line.empty()) {
+              continue; // 跳过空行
+          }
+
+          std::istringstream iss(line);
+          std::string word;
+
+          // 检查是否是 Pair 开头的行
+          if (line.find("Pair") != std::string::npos) {
+              // 检查上一个 entry 是否符合条件并保存
+              if (readingEntry) {
+                  ringRoutingTable.push_back(entry);
+              }
+
+              // 重置当前 entry
+              entry.ring_distance_pairs.clear();
+              readingEntry = false;
+
+              // 解析 src 和 dst
+              char discard;
+              if (iss >> word >> discard >> entry.src >> discard >> entry.dst >> discard) {
+                  // 检查 src 是否等于 m_id
+                  if (entry.src == m_id) {
+                      readingEntry = true; // 只处理符合条件的条目
+                  }
+              }
+          }
+          // 读取 Ring 和 Length 对
+          else if (readingEntry && line.find("Ring") != std::string::npos) {
+              int ring_id, length;
+              char discard;
+              if (iss >> word >> ring_id >> discard >> word >> discard >> length) {
+                  entry.ring_distance_pairs.emplace_back(ring_id, length);
+              }
+          }
+      }
+
+      // 保存最后一个 entry（如果符合条件）
+      if (readingEntry) {
+          ringRoutingTable.push_back(entry);
+      }
+
+      file.close();
+      return;
+    }
+
+    std::vector<RingRoutingEntry>& get_ring_routing_table() { return ringRoutingTable; }
+
     InputUnit*
     getInputUnit(unsigned port)
     {
@@ -151,6 +235,7 @@ class Router : public BasicRouter, public Consumer
     RoutingUnit routingUnit;
     SwitchAllocator switchAllocator;
     CrossbarSwitch crossbarSwitch;
+    std::vector<RingRoutingEntry> ringRoutingTable;

     std::vector<std::shared_ptr<InputUnit>> m_input_unit;
     std::vector<std::shared_ptr<OutputUnit>> m_output_unit;
diff --git a/src/mem/ruby/network/garnet/RoutingUnit.cc b/src/mem/ruby/network/garnet/RoutingUnit.cc
index f6075fb651..ebdf40f29a 100644
--- a/src/mem/ruby/network/garnet/RoutingUnit.cc
+++ b/src/mem/ruby/network/garnet/RoutingUnit.cc
@@ -35,6 +35,7 @@
 #include "debug/RubyNetwork.hh"
 #include "mem/ruby/network/garnet/InputUnit.hh"
 #include "mem/ruby/network/garnet/Router.hh"
+#include "mem/ruby/network/garnet/OutputUnit.hh"
 #include "mem/ruby/slicc_interface/Message.hh"

 namespace gem5
@@ -193,6 +194,11 @@ RoutingUnit::outportCompute(RouteInfo route, int inport,
         // any custom algorithm
         case CUSTOM_: outport =
             outportComputeCustom(route, inport, inport_dirn); break;
+        case RING_: outport =
+            outportComputeRing(route, inport, inport_dirn); break;
+        case IMR_:
+        case ROUTERLESS_:
+            outport = outportComputeRouterless(route, inport, inport_dirn); break;
         default: outport =
             lookupRoutingTable(route.vnet, route.net_dest); break;
     }
@@ -260,6 +266,76 @@ RoutingUnit::outportComputeXY(RouteInfo route,
     return m_outports_dirn2idx[outport_dirn];
 }

+int RoutingUnit::outportComputeRing(RouteInfo route, int inport, PortDirection inport_dirn) {
+    int num_routers = m_router->get_net_ptr()->getNumRouters();
+    int my_id = m_router->get_id();
+    int dest_id = route.dest_router;
+
+    int clockwise_hops = (dest_id - my_id + num_routers) % num_routers;
+    int counter_clockwise_hops = (my_id - dest_id + num_routers) % num_routers;
+
+    PortDirection outport_dirn = "Unknown";
+    if (clockwise_hops <= counter_clockwise_hops) {
+        outport_dirn = "Src";  // 顺时针方向
+    } else {
+        outport_dirn = "End";  // 逆时针方向
+    }
+
+    return m_outports_dirn2idx[outport_dirn];
+}
+
+int
+RoutingUnit::outportComputeRouterless(RouteInfo route, int inport,
+                                      PortDirection inport_dirn)
+{
+    PortDirection outport_dirn = "Unknown";
+    if (inport_dirn == "Local") {
+        // 如果是在这个node inject的话，需要根据ring routing table找到对应的输出端口
+        auto &ring_routing_table = m_router->get_ring_routing_table();
+        for (auto &entry : ring_routing_table) {
+            if (entry.dst == route.dest_router) {
+                for (auto &pair : entry.ring_distance_pairs) {
+                    int ring_id = pair.first;
+                    std::string ring_name = "ring" + std::to_string(ring_id);
+                    for (auto &it : m_outports_dirn2idx) {
+                        if (it.first.find(ring_name) != std::string::npos) {
+                            outport_dirn = it.first;
+                            int outport = it.second;
+                            // 这里需要检查对应的环是否idle
+                            if (m_router->getOutputUnit(outport)->has_free_vc(route.vnet)) {
+                                return outport;
+                            } else {
+                                continue;
+                            }
+                        }
+                    }
+                }
+                // 如果找不到对应的输出端口，随机选择一个
+                int ring_id = entry.ring_distance_pairs[rand() % entry.ring_distance_pairs.size()].first;
+                std::string ring_name = "ring" + std::to_string(ring_id);
+                for (auto &it : m_outports_dirn2idx) {
+                    if (it.first.find(ring_name) != std::string::npos) {
+                        return it.second;
+                    }
+                }
+            }
+        }
+        // 寄了
+        panic("Routerless Routing: No output port found for input port %s", inport_dirn);
+
+    } else {
+        // 如果不是在这个node inject的话，直接传到输入端口所在环的对应输出端口即可
+        if (m_outports_dirn2idx.find(inport_dirn) != m_outports_dirn2idx.end()) {
+            return m_outports_dirn2idx[inport_dirn];
+        } else {
+            for (auto &it : m_outports_dirn2idx){
+                std::cout << it.first << " " << it.second << std::endl;
+            }
+            panic("Routerless Routing: No output port found for input port %s", inport_dirn);
+        }
+    }
+}
+
 // Template for implementing custom routing algorithm
 // using port directions. (Example adaptive)
 int
diff --git a/src/mem/ruby/network/garnet/RoutingUnit.hh b/src/mem/ruby/network/garnet/RoutingUnit.hh
index e593afd080..556564b335 100644
--- a/src/mem/ruby/network/garnet/RoutingUnit.hh
+++ b/src/mem/ruby/network/garnet/RoutingUnit.hh
@@ -73,6 +73,10 @@ class RoutingUnit
                          int inport,
                          PortDirection inport_dirn);

+    int outportComputeRing(RouteInfo route, int inport, PortDirection inport_dirn);
+
+    int outportComputeRouterless(RouteInfo route, int inport, PortDirection inport_dirn);
+
     // Custom Routing Algorithm using Port Directions
     int outportComputeCustom(RouteInfo route,
                              int inport,
--
2.17.1

